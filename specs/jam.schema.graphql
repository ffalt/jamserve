type Query {
  currentUser: UserQL!
  user(id: ID!): UserQL!
  users(page: PageArgsQL, filter: UserFilterArgsQL, order: [UserOrderArgsQL!]): UserPageQL!
  userIndex(filter: UserFilterArgsQL): UserIndexQL!

  """Get an Album by Id"""
  album(id: ID!): AlbumQL!

  """Search albums"""
  albums(page: PageArgsQL, filter: AlbumFilterArgsQL, order: [AlbumOrderArgsQL!], list: ListType, seed: String): AlbumPageQL!

  """Get the Navigation Index for Albums"""
  albumIndex(filter: AlbumFilterArgsQL): AlbumIndexQL!

  """Get an Artist by Id"""
  artist(id: ID!): ArtistQL!

  """Search Artists"""
  artists(page: PageArgsQL, filter: ArtistFilterArgsQL, order: [ArtistOrderArgsQL!], list: ListType, seed: String): ArtistPageQL!

  """Get the Navigation Index for Albums"""
  artistIndex(filter: ArtistFilterArgsQL): ArtistIndexQL!

  """Get an Artwork by Id"""
  artwork(id: ID!): ArtworkQL!

  """Search Artworks"""
  artworks(page: PageArgsQL, filter: ArtworkFilterArgsQL, order: [ArtworkOrderArgsQL!], list: ListType, seed: String): ArtworkPageQL!

  """Get a Bookmark by Id"""
  bookmark(id: ID!): BookmarkQL!

  """Search Bookmarks"""
  bookmarks(page: PageArgsQL, filter: BookmarkFilterArgsQL, order: [BookmarkOrderArgsQL!]): BookmarkPageQL!

  """Get Chat Messages"""
  chats(since: Float): [ChatQL!]!

  """Get a Episode by Id"""
  episode(id: ID!): EpisodeQL!

  """Search Episodes"""
  episodes(page: PageArgsQL, filter: EpisodeFilterArgsQL, order: [EpisodeOrderArgsQL!], list: ListType, seed: String): EpisodePageQL!

  """Get a Folder by Id"""
  folder(id: ID!): FolderQL!

  """Search Folders"""
  folders(page: PageArgsQL, filter: FolderFilterArgsQL, order: [FolderOrderArgsQL!], list: ListType, seed: String): FolderPageQL!

  """Get the Navigation Index for Folders"""
  folderIndex(filter: FolderFilterArgsQL): FolderIndexQL!
  waveform(id: ID!): WaveformQL!

  """Get an Genre by Id"""
  genre(id: ID!): GenreQL!

  """Search Genres"""
  genres(page: PageArgsQL, filter: GenreFilterArgsQL, order: [GenreOrderArgsQL!], list: ListType, seed: String): GenrePageQL!

  """Get the Navigation Index for Genres"""
  genreIndex(filter: GenreFilterArgsQL): GenreIndexQL!

  """Get a Playlist by Id"""
  playlist(id: ID!): PlaylistQL!

  """Search Playlists"""
  playlists(page: PageArgsQL, filter: PlaylistFilterArgsQL, order: [PlaylistOrderArgsQL!], list: ListType, seed: String): PlaylistPageQL!

  """Get the Navigation Index for Playlists"""
  playlistIndex(filter: PlaylistFilterArgsQL): PlaylistIndexQL!

  """Get a PlayQueue for the calling user"""
  playQueue: PlayQueueQL!

  """Get a Podcast by Id"""
  podcast(id: ID!): PodcastQL!

  """Search Podcasts"""
  podcasts(page: PageArgsQL, filter: PodcastFilterArgsQL, order: [PodcastOrderArgsQL!], list: ListType, seed: String): PodcastPageQL!

  """Get the Navigation Index for Podcasts"""
  podcastIndex(filter: PodcastFilterArgsQL): PodcastIndexQL!

  """Get a Radio by Id"""
  radio(id: ID!): RadioQL!

  """Search Radios"""
  radios(page: PageArgsQL, filter: RadioFilterArgsQL, order: [RadioOrderArgsQL!], list: ListType, seed: String): RadioPageQL!

  """Get the Navigation Index for Radios"""
  radioIndex(filter: RadioFilterArgsQL): RadioIndexQL!

  """Get a Root by Id"""
  root(id: ID!): RootQL!

  """Search Roots"""
  roots(page: PageArgsQL, filter: RootFilterArgsQL, order: [RootOrderArgsQL!], list: ListType, seed: String): RootPageQL!

  """Get a Series by Id"""
  series(id: ID!): SeriesQL!

  """Search Series"""
  serieses(page: PageArgsQL, filter: SeriesFilterArgsQL, order: [SeriesOrderArgsQL!], list: ListType, seed: String): SeriesPageQL!

  """Get the Navigation Index for Series"""
  seriesIndex(filter: SeriesFilterArgsQL): SeriesIndexQL!

  """Get the API Version"""
  version: String!

  """Check the Login State"""
  session: SessionQL!

  """Get a list of all sessions of the current user"""
  sessions(page: PageArgsQL, filter: SessionFilterArgsQL, order: [SessionOrderArgsQL!]): SessionPageQL!
  track(id: ID!): TrackQL!
  tracks(page: PageArgsQL, filter: TrackFilterArgsQL, order: [TrackOrderArgsQL!], list: ListType, seed: String): TrackPageQL!
  stats(rootID: ID): StatsQL!

  """Get User State (fav/rate/etc) for Base Objects"""
  state(
    """Object Id"""
    id: ID!
  ): StateQL!

  """Get a List of media [Track, Episode] played currently by Users"""
  nowPlaying: [NowPlayingQL!]!

  """Get the Server Admin Settings"""
  adminSettings: AdminSettingsQL!

  """Get Queue Information for Admin Change Tasks"""
  adminQueue(
    """Queue Task Id"""
    id: ID!
  ): AdminChangeQueueInfoQL!
}

type UserQL {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  email: String!
  maxBitRate: Int
  playQueue: PlayQueueQL
  roles: [UserRole!]!
  favorites: UserFavoritesQL!
  stats: UserStatsQL!
  playlists(page: PageArgsQL, filter: PlaylistFilterArgsQL, order: [PlaylistOrderArgsQL!]): PlaylistPageQL!
  bookmarks(page: PageArgsQL, filter: BookmarkFilterArgsQL, order: [BookmarkOrderArgsQL!]): BookmarkPageQL!
  sessions(page: PageArgsQL, filter: SessionFilterArgsQL, order: [SessionOrderArgsQL!]): SessionPageQL!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type PlayQueueQL {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  current: Int
  position: Float
  duration: Float
  changedBy: String!
  entries: [PlayQueueEntryQL!]!
  entriesCount: Int!
}

type PlayQueueEntryQL {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  position: Int!
  playQueue: PlayQueueQL!
  track: TrackQL
  episode: EpisodeQL
}

type TrackQL {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  fileName: String!
  path: String!
  fileSize: Float!
  series: SeriesQL
  album: AlbumQL
  folder: FolderQL!
  artist: ArtistQL
  albumArtist: ArtistQL
  genres: [GenreQL!]!
  root: RootQL!
  bookmarks: [BookmarkQL!]!
  tag: TagQL
  state: StateQL!
  waveform: WaveformQL!
  rawTag: MediaTagRawQL!
  lyrics: TrackLyricsQL!
  bookmarksCount: Int!
  fileCreated: DateTime!
  fileModified: DateTime!
}

type SeriesQL {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  albumTypes: [AlbumType!]!
  artist: ArtistQL
  tracks: [TrackQL!]!
  albums: [AlbumQL!]!
  roots: [RootQL!]!
  folders: [FolderQL!]!
  rootsCount: Int!
  foldersCount: Int!
  tracksCount: Int!
  albumsCount: Int!
  state: StateQL!
}

enum AlbumType {
  unknown
  album
  compilation
  live
  bootleg
  soundtrack
  audiobook
  ep
  single
  series
}

type ArtistQL {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  slug: String!
  nameSort: String!
  mbArtistID: String
  albumTypes: [AlbumType!]!
  genres: [GenreQL!]!
  tracks: [TrackQL!]!
  albumTracks: [TrackQL!]!
  albums: [AlbumQL!]!
  roots: [RootQL!]!
  folders: [FolderQL!]!
  series: [SeriesQL!]!
  tracksCount: Int!
  albumsCount: Int!
  rootsCount: Int!
  foldersCount: Int!
  seriesCount: Int!
  state: StateQL!
  albumsTracksCount: Int!
}

type GenreQL {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  tracks(page: PageArgsQL, filter: TrackFilterArgsQL, order: [TrackOrderArgsQL!]): TrackPageQL!
  albums(page: PageArgsQL, filter: AlbumFilterArgsQL, order: [AlbumOrderArgsQL!]): AlbumPageQL!
  artists(page: PageArgsQL, filter: ArtistFilterArgsQL, order: [ArtistOrderArgsQL!]): ArtistPageQL!
  folders: [FolderQL!]!
  trackCount: Int!
  albumCount: Int!
  artistCount: Int!
  folderCount: Int!
}

type TrackPageQL {
  items: [TrackQL!]!
  total: Int!
  take: Int
  skip: Int
}

input PageArgsQL {
  """return items starting from offset position"""
  skip: Int = 0

  """amount of returned items"""
  take: Int
}

input TrackFilterArgsQL {
  query: String
  name: String
  ids: [ID!]
  childOfID: ID
  artist: String
  album: String
  genres: [String!]
  genreIDs: [ID!]
  since: Float
  seriesIDs: [ID!]
  albumIDs: [ID!]
  artistIDs: [ID!]
  albumArtistIDs: [ID!]
  rootIDs: [ID!]
  folderIDs: [ID!]
  bookmarkIDs: [ID!]
  fromYear: Int
  toYear: Int
}

input TrackOrderArgsQL {
  orderDesc: Boolean
  orderBy: TrackOrderFields
}

enum TrackOrderFields {
  default
  created
  updated
  trackNr
  discNr
  seriesNr
  album
  title
  parent
  filename
}

type AlbumPageQL {
  items: [AlbumQL!]!
  total: Int!
  take: Int
  skip: Int
}

type AlbumQL {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  slug: String!
  albumType: AlbumType!
  seriesNr: String
  year: Int
  duration: Float
  mbArtistID: String
  mbReleaseID: String
  genres: [GenreQL!]!
  tracks: [TrackQL!]!
  roots: [RootQL!]!
  folders: [FolderQL!]!
  series: SeriesQL
  artist: ArtistQL!
  tracksCount: Int!
  rootsCount: Int!
  foldersCount: Int!
  state: StateQL!
}

type RootQL {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  path: String!
  strategy: RootScanStrategy!
  folders: [FolderQL!]!
  tracks: [TrackQL!]!
  albums: [AlbumQL!]!
  artists: [ArtistQL!]!
  series: [SeriesQL!]!
  status: RootStatusQL!
}

enum RootScanStrategy {
  auto
  artistalbum
  compilation
  audiobook
}

type FolderQL {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  title: String
  path: String!
  statCreated: DateTime!
  statModified: DateTime!
  level: Int!
  album: String
  artist: String
  artistSort: String
  albumTrackCount: Int
  year: Int
  mbReleaseID: String
  mbReleaseGroupID: String
  mbAlbumType: String
  mbArtistID: String
  albumType: AlbumType
  folderType: FolderType!
  genres: [GenreQL!]!
  parent: FolderQL
  children: [FolderQL!]!
  root: RootQL!
  artworks: [ArtworkQL!]
  tracks: [TrackQL!]
  albums: [AlbumQL!]
  artists: [ArtistQL!]
  series: [SeriesQL!]
  childrenCount: Int!
  artworksCount: Int!
  tracksCount: Int!
  albumsCount: Int!
  artistsCount: Int!
  seriesCount: Int!
  rootsCount: Int!
  state: StateQL!
}

enum FolderType {
  unknown
  artist
  collection
  album
  multialbum
  extras
}

type ArtworkQL {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  path: String!
  types: [ArtworkImageType!]!
  statCreated: DateTime!
  statModified: DateTime!
  fileSize: Int!
  width: Int
  height: Int
  format: String

  """Get the Navigation Index for Albums"""
  folder: FolderQL!
}

enum ArtworkImageType {
  front
  back
  booklet
  medium
  tray
  obi
  spine
  track
  liner
  sticker
  poster
  watermark
  raw
  unedited
  other
  artist
}

type StateQL {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  faved: DateTime
  played: Int
  rated: Int
  lastPlayed: DateTime
}

type RootStatusQL {
  lastScan: DateTime
  scanning: Boolean
  error: String
}

input AlbumFilterArgsQL {
  query: String
  name: String
  slug: String
  artist: String
  ids: [ID!]
  rootIDs: [ID!]
  artistIDs: [ID!]
  trackIDs: [ID!]
  folderIDs: [ID!]
  seriesIDs: [ID!]
  albumTypes: [AlbumType!]
  mbReleaseIDs: [String!]
  mbArtistIDs: [String!]
  notMbArtistID: String
  genres: [String!]
  genreIDs: [ID!]
  since: Float
  fromYear: Int
  toYear: Int
}

input AlbumOrderArgsQL {
  orderDesc: Boolean
  orderBy: AlbumOrderFields
}

enum AlbumOrderFields {
  default
  created
  updated
  name
  artist
  year
  seriesNr
  duration
  albumType
}

type ArtistPageQL {
  items: [ArtistQL!]!
  total: Int!
  take: Int
  skip: Int
}

input ArtistFilterArgsQL {
  query: String
  name: String
  slug: String
  ids: [ID!]
  rootIDs: [ID!]
  albumIDs: [ID!]
  trackIDs: [ID!]
  albumTrackIDs: [ID!]
  seriesIDs: [ID!]
  folderIDs: [ID!]
  genres: [String!]
  genreIDs: [ID!]
  albumTypes: [AlbumType!]
  mbArtistIDs: [String!]
  notMbArtistID: String
  since: Float
}

input ArtistOrderArgsQL {
  orderDesc: Boolean
  orderBy: ArtistOrderFields
}

enum ArtistOrderFields {
  default
  created
  updated
  name
  nameSort
}

type BookmarkQL {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  position: Float!
  track: TrackQL
  episode: EpisodeQL
  comment: String
}

type EpisodeQL {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  status: PodcastStatus!
  fileSize: Int
  error: String
  path: String
  link: String
  summary: String
  duration: Float
  guid: String
  author: String
  tag: TagQL
  podcast: PodcastQL!
  bookmarks: [BookmarkQL!]!
  bookmarksCount: Int!
  state: StateQL!
  fileCreated: DateTime
  fileModified: DateTime
  date: DateTime!
  chapters: [EpisodeChapterQL!]
  enclosures: [EpisodeEnclosureQL!]
  waveform: WaveformQL!
}

enum PodcastStatus {
  new
  downloading
  completed
  error
  deleted
}

type TagQL {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  format: TagFormatType!
  album: String
  albumSort: String
  albumArtist: String
  albumArtistSort: String
  artist: String
  artistSort: String
  genres: [String!]
  disc: Int
  discTotal: Int
  title: String
  titleSort: String
  trackNr: Int
  trackTotal: Int
  year: Int
  nrTagImages: Int
  mbTrackID: String
  mbAlbumType: String
  mbAlbumArtistID: String
  mbArtistID: String
  mbReleaseID: String
  mbReleaseTrackID: String
  mbReleaseGroupID: String
  mbRecordingID: String
  mbAlbumStatus: String
  mbReleaseCountry: String
  series: String
  seriesNr: String
  lyrics: String
  chapters: [TagChapterQL!]
  mediaDuration: Float
  mediaBitRate: Float
  mediaFormat: AudioFormatType
  mediaSampleRate: Float
  mediaChannels: Int
  mediaEncoded: String
  mediaMode: String
  mediaVersion: String
}

enum TagFormatType {
  none
  ffmpeg
  id3v20
  id3v21
  id3v22
  id3v23
  id3v24
  id3v1
  vorbis
}

type TagChapterQL {
  start: Float!
  end: Float!
  title: String!
}

enum AudioFormatType {
  mp3
  m4a
  mp4
  ogg
  oga
  flv
  flac
  webma
  wav
}

type PodcastQL {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  url: String!
  status: PodcastStatus!
  image: String
  errorMessage: String
  title: String
  language: String
  link: String
  author: String
  description: String
  generator: String
  categories: [String!]!
  episodes: [EpisodeQL!]!
  episodesCount: Int!
  lastCheck: DateTime!
  state: StateQL!
}

type EpisodeChapterQL {
  start: Float!
  title: String!
}

type EpisodeEnclosureQL {
  url: String!
  type: String
  length: Float
}

type WaveformQL {
  json: String
  svg(width: Int!): String
}

type MediaTagRawQL {
  version: String!
  frames: JSON!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type TrackLyricsQL {
  lyrics: String
  source: String
}

"""User Roles"""
enum UserRole {
  admin
  stream
  upload
  podcast
}

type UserFavoritesQL {
  albums(page: PageArgsQL, filter: AlbumFilterArgsQL, order: [AlbumOrderArgsQL!]): AlbumPageQL!
  artists(page: PageArgsQL, filter: ArtistFilterArgsQL, order: [ArtistOrderArgsQL!]): ArtistPageQL!
  series(page: PageArgsQL, filter: SeriesFilterArgsQL, order: [SeriesOrderArgsQL!]): SeriesPageQL!
  podcasts(page: PageArgsQL, filter: PodcastFilterArgsQL, order: [PodcastOrderArgsQL!]): PodcastPageQL!
  episodes(page: PageArgsQL, filter: EpisodeFilterArgsQL, order: [EpisodeOrderArgsQL!]): EpisodePageQL!
  tracks(page: PageArgsQL, filter: TrackFilterArgsQL, order: [TrackOrderArgsQL!]): TrackPageQL!
  folders(page: PageArgsQL, filter: FolderFilterArgsQL, order: [FolderOrderArgsQL!]): FolderPageQL!
  playlists(page: PageArgsQL, filter: PlaylistFilterArgsQL, order: [PlaylistOrderArgsQL!]): PlaylistPageQL!
  artworks(page: PageArgsQL, filter: ArtworkFilterArgsQL, order: [ArtworkOrderArgsQL!]): ArtistPageQL!
}

type SeriesPageQL {
  items: [SeriesQL!]!
  total: Int!
  take: Int
  skip: Int
}

input SeriesFilterArgsQL {
  query: String
  name: String
  ids: [ID!]
  albumTypes: [AlbumType!]
  since: Float
  trackIDs: [ID!]
  albumIDs: [ID!]
  artistIDs: [ID!]
  rootIDs: [ID!]
  folderIDs: [ID!]
}

input SeriesOrderArgsQL {
  orderDesc: Boolean
  orderBy: DefaultOrderFields
}

enum DefaultOrderFields {
  default
  created
  updated
  name
}

type PodcastPageQL {
  items: [PodcastQL!]!
  total: Int!
  take: Int
  skip: Int
}

input PodcastFilterArgsQL {
  query: String
  name: String
  ids: [ID!]
  episodeIDs: [ID!]
  since: Float
  url: String
  statuses: [PodcastStatus!]
  lastCheckFrom: Float
  lastCheckTo: Float
  title: String
  author: String
  description: String
  generator: String
  categories: [String!]
}

input PodcastOrderArgsQL {
  orderDesc: Boolean
  orderBy: PodcastOrderFields
}

enum PodcastOrderFields {
  default
  created
  updated
  name
  lastCheck
}

type EpisodePageQL {
  items: [EpisodeQL!]!
  total: Int!
  take: Int
  skip: Int
}

input EpisodeFilterArgsQL {
  query: String
  name: String
  ids: [ID!]
  podcastIDs: [ID!]
  since: Float
  authors: [String!]
  guids: [String!]
  statuses: [PodcastStatus!]
}

input EpisodeOrderArgsQL {
  orderDesc: Boolean
  orderBy: EpisodeOrderFields
}

enum EpisodeOrderFields {
  default
  created
  updated
  name
  status
  date
}

type FolderPageQL {
  items: [FolderQL!]!
  total: Int!
  take: Int
  skip: Int
}

input FolderFilterArgsQL {
  query: String
  name: String
  ids: [ID!]
  since: Float
  parentIDs: [ID!]
  childOfID: ID
  level: Int
  albumTypes: [AlbumType!]
  folderTypes: [FolderType!]
  genres: [String!]
  album: String
  artist: String
  artistSort: String
  title: String
  fromYear: Int
  toYear: Int
  mbReleaseIDs: [String!]
  mbReleaseGroupIDs: [String!]
  mbAlbumTypes: [String!]
  mbArtistIDs: [String!]
  artworksIDs: [ID!]
  rootIDs: [ID!]
  trackIDs: [ID!]
  albumIDs: [ID!]
  artistIDs: [ID!]
  seriesIDs: [ID!]
}

input FolderOrderArgsQL {
  orderDesc: Boolean
  orderBy: FolderOrderFields
}

enum FolderOrderFields {
  default
  created
  updated
  level
  name
  title
  year
}

type PlaylistPageQL {
  items: [PlaylistQL!]!
  total: Int!
  take: Int
  skip: Int
}

type PlaylistQL {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  comment: String
  isPublic: Boolean!
  duration: Float!
  entries: [PlaylistEntryQL!]!
  userID: ID!
  userName: String!
  entriesCount: Int!
  state: StateQL!
}

type PlaylistEntryQL {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  position: Float!
  playlist: PlaylistQL!
  track: TrackQL!
  episode: EpisodeQL!
}

input PlaylistFilterArgsQL {
  query: String
  name: String
  comment: String
  ids: [ID!]
  since: Float
  userIDs: [ID!]
  isPublic: Boolean
  durationFrom: Float
  durationTo: Float
}

input PlaylistOrderArgsQL {
  orderDesc: Boolean
  orderBy: DefaultOrderFields
}

input ArtworkFilterArgsQL {
  query: String
  name: String
  ids: [ID!]
  formats: [String!]
  folderIDs: [ID!]
  childOfID: ID
  types: [ArtworkImageType!]
  since: Float
  sizeFrom: Int
  sizeTo: Int
  widthFrom: Int
  widthTo: Int
  heightFrom: Int
  heightTo: Int
}

input ArtworkOrderArgsQL {
  orderDesc: Boolean
  orderBy: DefaultOrderFields
}

type UserStatsQL {
  playlist: Int!
  bookmark: Int!
  favorite: UserDetailStatsQL!
  played: UserDetailStatsQL!
}

type UserDetailStatsQL {
  track: Int!
  folder: Int!
  series: Int!
  artist: Int!
  artistTypes: StatsAlbumTypesQL!
  album: Int!
  albumTypes: StatsAlbumTypesQL!
}

type StatsAlbumTypesQL {
  album: Int!
  compilation: Int!
  artistCompilation: Int!
  live: Int!
  audiobook: Int!
  soundtrack: Int!
  series: Int!
  bootleg: Int!
  ep: Int!
  single: Int!
  unknown: Int!
}

type BookmarkPageQL {
  items: [BookmarkQL!]!
  total: Int!
  take: Int
  skip: Int
}

input BookmarkFilterArgsQL {
  query: String
  comment: String
  ids: [ID!]
  trackIDs: [ID!]
  episodeIDs: [ID!]
  since: Float
  userIDs: [ID!]
}

input BookmarkOrderArgsQL {
  orderDesc: Boolean
  orderBy: BookmarkOrderFields
}

enum BookmarkOrderFields {
  default
  created
  updated
  media
  position
}

type SessionPageQL {
  items: [SessionQL!]!
  total: Int!
  take: Int
  skip: Int
}

type SessionQL {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  client: String!
  agent: String!
  expires: DateTime!
  mode: SessionMode!
}

enum SessionMode {
  browser
  jwt
}

input SessionFilterArgsQL {
  ids: [ID!]
  since: Float
  client: String
  agent: String
  expiresFrom: Float
  expiresTo: Float
  mode: SessionMode
  userIDs: [ID!]
}

input SessionOrderArgsQL {
  orderDesc: Boolean
  orderBy: SessionOrderFields
}

enum SessionOrderFields {
  default
  expires
}

type UserPageQL {
  items: [UserQL!]!
  total: Int!
  take: Int
  skip: Int
}

input UserFilterArgsQL {
  query: String
  name: String
  ids: [ID!]
  since: Float
  email: String
  roles: [UserRole!]
}

input UserOrderArgsQL {
  orderDesc: Boolean
  orderBy: DefaultOrderFields
}

type UserIndexQL {
  groups: [UserIndexGroupQL!]!
}

type UserIndexGroupQL {
  items: [UserQL!]!
  name: String!
}

"""Type of List Request"""
enum ListType {
  random
  highest
  avghighest
  frequent
  faved
  recent
}

type AlbumIndexQL {
  groups: [AlbumIndexGroupQL!]!
}

type AlbumIndexGroupQL {
  items: [AlbumQL!]!
  name: String!
}

type ArtistIndexQL {
  groups: [ArtistIndexGroupQL!]!
}

type ArtistIndexGroupQL {
  items: [ArtistQL!]!
  name: String!
}

type ArtworkPageQL {
  items: [ArtworkQL!]!
  total: Int!
  take: Int
  skip: Int
}

type ChatQL {
  message: String!
  created: DateTime!
  userName: String!
  userID: ID!
}

type FolderIndexQL {
  groups: [FolderIndexGroupQL!]!
}

type FolderIndexGroupQL {
  items: [FolderQL!]!
  name: String!
}

type GenrePageQL {
  items: [GenreQL!]!
  total: Int!
  take: Int
  skip: Int
}

input GenreFilterArgsQL {
  query: String
  name: String
  ids: [ID!]
  trackIDs: [ID!]
  since: Float
}

input GenreOrderArgsQL {
  orderDesc: Boolean
  orderBy: GenreOrderFields
}

enum GenreOrderFields {
  default
  created
  updated
  name
}

type GenreIndexQL {
  groups: [GenreIndexGroupQL!]!
}

type GenreIndexGroupQL {
  items: [GenreQL!]!
  name: String!
}

type PlaylistIndexQL {
  groups: [PlaylistIndexGroupQL!]!
}

type PlaylistIndexGroupQL {
  items: [PlaylistQL!]!
  name: String!
}

type PodcastIndexQL {
  groups: [PodcastIndexGroupQL!]!
}

type PodcastIndexGroupQL {
  items: [PodcastQL!]!
  name: String!
}

type RadioQL {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  url: String!
  homepage: String
  disabled: Boolean!
  state: StateQL!
}

type RadioPageQL {
  items: [RadioQL!]!
  total: Int!
  take: Int
  skip: Int
}

input RadioFilterArgsQL {
  query: String
  name: String
  ids: [ID!]
  url: String
  homepage: String
  since: Int
  disabled: Boolean
}

input RadioOrderArgsQL {
  orderDesc: Boolean
  orderBy: DefaultOrderFields
}

type RadioIndexQL {
  groups: [RadioIndexGroupQL!]!
}

type RadioIndexGroupQL {
  items: [RadioQL!]!
  name: String!
}

type RootPageQL {
  items: [RootQL!]!
  total: Int!
  take: Int
  skip: Int
}

input RootFilterArgsQL {
  query: String
  name: String
  ids: [ID!]
  since: Float
  strategies: [RootScanStrategy!]!
  trackIDs: [ID!]
  folderIDs: [ID!]
  albumIDs: [ID!]
  artistIDs: [ID!]
  seriesIDs: [ID!]
}

input RootOrderArgsQL {
  orderDesc: Boolean
  orderBy: DefaultOrderFields
}

type SeriesIndexQL {
  groups: [SeriesIndexGroupQL!]!
}

type SeriesIndexGroupQL {
  items: [SeriesQL!]!
  name: String!
}

type StatsQL {
  rootID: ID
  track: Int!
  folder: Int!
  series: Int!
  artist: Int!
  artistTypes: StatsAlbumTypesQL!
  album: Int!
  albumTypes: StatsAlbumTypesQL!
}

type NowPlayingQL {
  time: Float!
  track: TrackQL
  episode: EpisodeQL
  userName: String!
  userID: ID!
}

"""Admin Settings"""
type AdminSettingsQL {
  chat: AdminSettingsChatQL!
  index: AdminSettingsIndexQL!
  library: AdminSettingsLibraryQL!
  externalServices: AdminSettingsExternalQL!
}

"""Admin Chat Settings"""
type AdminSettingsChatQL {
  """Maximum Number of Chat Messages to keep"""
  maxMessages: Int!

  """Maximum Age of Chat Messages to keep"""
  maxAge: AdminSettingsChatMaxAgeQL!
}

"""Admin Chat Maximum Age Settings"""
type AdminSettingsChatMaxAgeQL {
  """Value of Maximum Age"""
  value: Int!

  """Unit of Maximum Age"""
  unit: String!
}

"""Admin Index Settings"""
type AdminSettingsIndexQL {
  """List of ignored Articles"""
  ignoreArticles: [String!]!
}

"""Admin Library Settings"""
type AdminSettingsLibraryQL {
  """Start Root Scanning on Server Start"""
  scanAtStart: Boolean!
}

"""Admin External Services Settings"""
type AdminSettingsExternalQL {
  """Enable External Services"""
  enabled: Boolean!
}

"""Admin Change Queue Info"""
type AdminChangeQueueInfoQL {
  """Queue ID"""
  id: ID!

  """Waiting Position"""
  position: Int!

  """Error (if any)"""
  error: String!

  """Changes Completed Timestamp"""
  done: Int!
}

type Mutation {
  fav(remove: Boolean, id: ID!): StateQL!
  rate(rating: Int!, id: ID!): StateQL!
  scrobble(id: ID!): NowPlayingQL!
}
