{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/db/db.types.ts","webpack:///./src/model/jam-types.ts","webpack:///./src/utils/logger.ts","webpack:///external \"path\"","webpack:///./src/utils/fs-utils.ts","webpack:///./src/api/jam/error.ts","webpack:///external \"fs-extra\"","webpack:///./src/engine/base/base.query.helper.ts","webpack:///./src/engine/base/base.store.ts","webpack:///./src/utils/paginate.ts","webpack:///./src/engine/state/state.format.ts","webpack:///./src/engine/base/base.service.ts","webpack:///./src/engine/base/dbobject-list.controller.ts","webpack:///./src/engine/base/dbobject-list.service.ts","webpack:///external \"moment\"","webpack:///./src/utils/random.ts","webpack:///./src/api/jam/check.ts","webpack:///./src/utils/filetype.ts","webpack:///./src/utils/webservice-client.ts","webpack:///./src/utils/queue.ts","webpack:///./src/utils/hash.ts","webpack:///./src/engine/base/dbobject.controller.ts","webpack:///./src/engine/index/index.format.ts","webpack:///./src/api/jam/response.ts","webpack:///external \"jamp3\"","webpack:///external \"fs\"","webpack:///./src/utils/debounce-promises.ts","webpack:///./src/utils/slug.ts","webpack:///./src/engine/track/track.format.ts","webpack:///./src/engine/folder/folder.format.ts","webpack:///./src/api/jam/version.ts","webpack:///./src/engine/user/user.format.ts","webpack:///./src/modules/audio/metadata.ts","webpack:///./src/modules/audio/formats/flac/lib/block.ts","webpack:///./src/modules/audio/audio.module.ts","webpack:///./src/modules/audio/audio.format.ts","webpack:///./src/utils/webservice-json-client.ts","webpack:///external \"request\"","webpack:///./src/utils/tool.ts","webpack:///./src/utils/id-file-cache.ts","webpack:///external \"express\"","webpack:///external \"crypto\"","webpack:///./src/api/response.ts","webpack:///./src/engine/episode/episode.format.ts","webpack:///./src/engine/folder/folder.service.ts","webpack:///./src/modules/audio/formats/flac/lib/block.picture.ts","webpack:///./src/modules/audio/formats/flac/lib/block.writeable.ts","webpack:///./src/modules/audio/formats/flac/lib/block.vorbiscomment.ts","webpack:///external \"stream\"","webpack:///./src/modules/audio/transcoder/transcoder-stream.ts","webpack:///external \"fluent-ffmpeg\"","webpack:///./src/utils/max-age.ts","webpack:///external \"express-session\"","webpack:///./src/config sync","webpack:///./src/db/elasticsearch/db-elastic.mapping.ts","webpack:///./src/version.ts","webpack:///external \"sharp\"","webpack:///./src/utils/download.ts","webpack:///./src/utils/compress-base-stream.ts","webpack:///./src/engine/playlist/playlist.service.ts","webpack:///./src/utils/artwork-id.ts","webpack:///./src/utils/album-name.ts","webpack:///./src/engine/worker/match-dir/match-dir.meta-stats.builder.ts","webpack:///./src/index.ts","webpack:///external \"commander\"","webpack:///./src/api/server.ts","webpack:///external \"body-parser\"","webpack:///external \"helmet\"","webpack:///external \"winston\"","webpack:///./src/api/jam/router.ts","webpack:///external \"express-rate-limit\"","webpack:///./src/api/jam/api.ts","webpack:///./src/engine/album/album.controller.ts","webpack:///./src/engine/album/album.format.ts","webpack:///./src/engine/artist/artist.controller.ts","webpack:///./src/engine/artist/artist.format.ts","webpack:///./src/engine/autocomplete/autocomplete.controller.ts","webpack:///./src/engine/bookmark/bookmark.controller.ts","webpack:///./src/engine/bookmark/bookmark.format.ts","webpack:///./src/engine/chat/chat.controller.ts","webpack:///./src/engine/chat/chat.format.ts","webpack:///./src/engine/download/download.controller.ts","webpack:///./src/utils/openapi-parameters-check.ts","webpack:///./src/utils/validate-json.ts","webpack:///external \"ajv\"","webpack:///./src/engine/episode/episode.controller.ts","webpack:///./src/engine/folder/folder.controller.ts","webpack:///./src/engine/health/folder.rule.ts","webpack:///./src/engine/genre/genre.controller.ts","webpack:///./src/engine/genre/genre.format.ts","webpack:///./src/engine/image/image.controller.ts","webpack:///./src/engine/metadata/metadata.controller.ts","webpack:///./src/engine/nowplaying/nowplaying.controller.ts","webpack:///./src/engine/nowplaying/nowplaying.format.ts","webpack:///./src/engine/playlist/playlist.controller.ts","webpack:///./src/engine/playlist/playlist.format.ts","webpack:///./src/engine/playqueue/playqueue.controller.ts","webpack:///./src/engine/playqueue/playqueue.format.ts","webpack:///./src/engine/podcast/podcast.controller.ts","webpack:///./src/engine/podcast/podcast.format.ts","webpack:///./src/engine/radio/radio.controller.ts","webpack:///./src/engine/radio/radio.format.ts","webpack:///./src/engine/root/root.controller.ts","webpack:///./src/engine/root/root.format.ts","webpack:///./src/engine/series/series.controller.ts","webpack:///./src/engine/series/series.format.ts","webpack:///./src/engine/session/session.controller.ts","webpack:///./src/engine/session/session.format.ts","webpack:///external \"express-useragent\"","webpack:///./src/engine/settings/settings.controller.ts","webpack:///./src/engine/stats/stats.controller.ts","webpack:///./src/engine/stats/stats.format.ts","webpack:///./src/engine/stream/stream.controller.ts","webpack:///./src/engine/track/track.controller.ts","webpack:///./src/engine/health/track.rule.ts","webpack:///./src/utils/genres.ts","webpack:///./src/modules/audio/clients/acousticbrainz-client.ts","webpack:///external \"limiter\"","webpack:///./src/modules/audio/clients/acoustid-client.ts","webpack:///./src/modules/audio/tools/fpcalc.ts","webpack:///external \"child_process\"","webpack:///./src/utils/which.ts","webpack:///external \"which\"","webpack:///./src/modules/audio/clients/coverartarchive-client.ts","webpack:///./src/modules/audio/clients/lastfm-client.ts","webpack:///./src/modules/audio/clients/lyricsovh-client.ts","webpack:///./src/modules/audio/clients/musicbrainz-client.ts","webpack:///./src/modules/audio/clients/musicbrainz-client.types.ts","webpack:///./src/modules/audio/clients/wikipedia-client.ts","webpack:///./src/modules/audio/formats/flac.module.ts","webpack:///./src/modules/audio/formats/flac/index.ts","webpack:///./src/modules/audio/formats/flac/lib/processor.ts","webpack:///./src/modules/audio/formats/flac/lib/block.streaminfo.ts","webpack:///./src/modules/audio/formats/mp3.module.ts","webpack:///external \"node-worker-threads-pool\"","webpack:///./src/modules/audio/tools/ffprobe.ts","webpack:///./src/modules/audio/transcoder/transcoder.module.ts","webpack:///./src/modules/audio/waveform/waveform.module.ts","webpack:///./src/modules/audio/waveform/waveform.generator.ts","webpack:///external \"d3-array\"","webpack:///external \"d3-node\"","webpack:///external \"d3-scale\"","webpack:///external \"d3-shape\"","webpack:///external \"waveform-data\"","webpack:///./src/modules/audio/waveform/waveform.class.ts","webpack:///./src/modules/audio/waveform/waveform.stream.ts","webpack:///./src/modules/audio/tools/flac.ts","webpack:///external \"p-queue\"","webpack:///./src/engine/user/user.controller.ts","webpack:///./src/engine/waveform/waveform.controller.ts","webpack:///./src/api/jam/cors.ts","webpack:///external \"cors\"","webpack:///./src/api/jam/login.ts","webpack:///./src/api/jam/passport.ts","webpack:///external \"jsonwebtoken\"","webpack:///external \"passport\"","webpack:///external \"passport-jwt\"","webpack:///external \"passport-local\"","webpack:///./src/api/jam/roles.ts","webpack:///./src/api/jam/routes.ts","webpack:///./src/api/jam/session.ts","webpack:///./src/api/jam/session-store.ts","webpack:///./src/engine/session/session.types.ts","webpack:///./src/api/jam/upload.ts","webpack:///external \"multer\"","webpack:///external \"on-finished\"","webpack:///./src/config/config.ts","webpack:///./src/db/elasticsearch/db-elastic.ts","webpack:///external \"@elastic/elasticsearch\"","webpack:///./src/utils/wait.ts","webpack:///./src/db/elasticsearch/db-elastic.index.ts","webpack:///./src/db/elasticsearch/db-elastic.sequence.ts","webpack:///./src/db/nedb/db-nedb.ts","webpack:///external \"nedb\"","webpack:///./src/db/nedb/db-nedb.index.ts","webpack:///./src/engine/engine.ts","webpack:///./src/config/thirdparty.config.ts","webpack:///./src/modules/image/image.module.ts","webpack:///external \"jimp\"","webpack:///external \"mime-types\"","webpack:///external \"http\"","webpack:///./src/modules/image/image.avatar.ts","webpack:///./src/modules/image/avatar-generator/avatar-generator.ts","webpack:///external \"seedrandom\"","webpack:///./src/engine/album/album.service.ts","webpack:///./src/engine/artist/artist.service.ts","webpack:///./src/engine/bookmark/bookmark.service.ts","webpack:///./src/engine/chat/chat.service.ts","webpack:///./src/engine/download/download.service.ts","webpack:///./src/utils/compress-folder-stream.ts","webpack:///external \"archiver\"","webpack:///./src/utils/compress-list-stream.ts","webpack:///./src/engine/episode/episode.service.ts","webpack:///./src/engine/genre/genre.service.ts","webpack:///./src/engine/image/image.service.ts","webpack:///./src/engine/index/index.service.ts","webpack:///./src/engine/index/index.builder.ts","webpack:///./src/engine/io/io.service.ts","webpack:///./src/engine/worker/changes/changes.logger.ts","webpack:///./src/engine/metadata/metadata.service.ts","webpack:///./src/engine/metadata/metadata.service.extended-info.ts","webpack:///./src/engine/metadata/metadata.format.ts","webpack:///./src/engine/metadata/metadata.service.similar-artists.ts","webpack:///./src/engine/metadata/metadata.service.similar-tracks.ts","webpack:///./src/engine/metadata/metadata.service.top-tracks.ts","webpack:///./src/engine/metadata/metadata.types.ts","webpack:///./src/engine/nowplaying/nowplaying.service.ts","webpack:///./src/engine/playqueue/playqueue.service.ts","webpack:///./src/engine/podcast/podcast.service.ts","webpack:///./src/utils/feed.ts","webpack:///external \"feedparser\"","webpack:///external \"iconv-lite\"","webpack:///external \"zlib\"","webpack:///./src/engine/radio/radio.service.ts","webpack:///./src/engine/root/root.service.ts","webpack:///./src/engine/series/series.service.ts","webpack:///./src/engine/session/session.service.ts","webpack:///./src/engine/settings/settings.service.ts","webpack:///./src/config/settings.default.ts","webpack:///./src/engine/state/state.service.ts","webpack:///./src/engine/stats/stats.service.ts","webpack:///./src/engine/stream/stream.service.ts","webpack:///./src/engine/track/track.service.ts","webpack:///./src/engine/user/user.service.ts","webpack:///external \"common-password-checker\"","webpack:///./src/engine/waveform/waveform.service.ts","webpack:///./src/engine/worker/worker.service.ts","webpack:///./src/engine/worker/match-dir/match-dir.builder.db.ts","webpack:///./src/engine/worker/tasks/worker.artwork.ts","webpack:///./src/engine/worker/tasks/worker.changes.ts","webpack:///./src/engine/worker/changes/changes.ts","webpack:///./src/engine/worker/merge/merge.match-dir.ts","webpack:///./src/utils/deep-compare.ts","webpack:///./src/engine/worker/merge/merge.match-dir.builder.ts","webpack:///./src/engine/worker/match-dir/match-dir.meta-stats.ts","webpack:///./src/engine/worker/merge/merge.meta.ts","webpack:///./src/engine/worker/merge/merge.meta.cache.ts","webpack:///./src/engine/worker/tasks/worker.folder.ts","webpack:///./src/engine/worker/tasks/worker.root.ts","webpack:///./src/engine/worker/match-dir/match-dir.builder.scan.ts","webpack:///./src/engine/worker/scan-dir/scan-dir.ts","webpack:///./src/engine/worker/tasks/worker.track.ts","webpack:///./src/engine/store/store.ts","webpack:///./src/engine/album/album.store.ts","webpack:///./src/engine/artist/artist.store.ts","webpack:///./src/engine/bookmark/bookmark.store.ts","webpack:///./src/engine/episode/episode.store.ts","webpack:///./src/engine/folder/folder.store.ts","webpack:///./src/engine/metadata/metadata.store.ts","webpack:///./src/engine/playlist/playlist.store.ts","webpack:///./src/engine/playqueue/playqueue.store.ts","webpack:///./src/engine/podcast/podcast.store.ts","webpack:///./src/engine/radio/radio.store.ts","webpack:///./src/engine/root/root.store.ts","webpack:///./src/engine/series/series.store.ts","webpack:///./src/engine/session/session.store.ts","webpack:///./src/engine/settings/settings.store.ts","webpack:///./src/engine/state/state.store.ts","webpack:///./src/engine/track/track.store.ts","webpack:///./src/engine/user/user.store.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","DBObjectType","WaveformFormatType","FolderType","AlbumType","JamObjectType","RootScanStrategy","AudioMimeTypes","mp3","m4a","mp4","ogg","oga","flv","flac","webma","webm","wav","AudioFormatType","VideoMimeTypes","m4v","ogv","webmv","PodcastStatus","FolderTypeImageName","unknown","artist","collection","album","multialbum","extras","ArtworkImageType","FolderTypesAlbum","DatabaseQuerySortType","AlbumTypesArtistMusic","live","bootleg","ep","single","FileTyp","LastFMLookupType","MusicBrainzLookupType","MusicBrainzSearchType","CoverArtArchiveLookupType","TrackTagFormatType","MusicBrainzAlbumPrimaryType","MusicBrainzAlbumSecondaryType","MUSICBRAINZ_VARIOUS_ARTISTS_ID","MUSICBRAINZ_VARIOUS_ARTISTS_NAME","cUnknownArtist","cUnknownAlbum","TrackHealthID","FolderHealthID","AudioFormats","DownloadFormats","DefaultDownloadFormat","WaveformFormats","WaveformDefaultFormat","svg","level","configure","transports","Console","format","combine","colorize","simple","Logger","this","params","log","Date","toISOString","concat","join","applyLog","toString","require","pathName","pathExists","unlink","remove","filename","extname","slice","toLowerCase","basename","replace","FolderSystemCharsRegEx","test","length","sep","ApiError","Error","message","failCode","super","constructor","captureStackTrace","Errors","itemNotFound","invalidParameter","internalError","unauthorized","msg","q","field","term","match","startsWith","startsWiths","terms","notNull","push","lte","gte","undefined","range","query","fieldMap","ids","id","keys","all","sorts","forEach","sort","descending","ascending","amount","offset","type","db","client","getDBIndex","byId","e","allIds","getNewId","item","add","items","bulk","idOrIds","byIds","queryOne","queryIds","count","onItems","iterate","upsert","removeByQuery","transformQuery","distinct","list","total","formatState","state","played","lastplayed","faved","rated","states","result","store","BaseListController","BaseController","listService","stateService","imageService","downloadService","listQuery","jamquery","includes","user","translateQuery","searchIDs","randomItems","getHighestRatedIDs","paginate","getAvgHighestIDs","getFrequentlyPlayedIDs","getFavedIDs","getRecentlyPlayedIDs","Promise","reject","InvalidParamError","prepareListByIDs","req","getList","byID","getObjDownload","BaseListService","BaseStoreService","a","b","indexOf","getAvgHighestDestIDs","getFilteredIDs","getHighestRatedDestIDs","getFrequentlyPlayedDestIDs","getFavedDestIDs","getRecentlyPlayedDestIDs","shuffle","j","Math","floor","random","randomInt","min","max","done","randomBytes","ceil","validatePathParameterIDFormat","pathParameter","validFormats","defaultFormat","trim","split","pathParameterPath","parameters","in","schema","required","paths","extendOpenApi","res","next","checkOpenApiParameters","check","then","catch","ApiResponder","error","minSize","maxSize","idsplit","iid","size","Number","isNaN","SupportedReadImageFormat","SupportedWriteImageFormat","SupportedAudioFormat","SupportedTranscodeAudioFormat","suffix","fileSuffix","IMAGE","AUDIO","TAG","BACKUP","OTHER","requestPerInterval","requestIntervalMS","userAgent","enabled","limiter","RateLimiter","response","body","statusCode","statusMessage","resolve","JSON","parse","err","url","options","headers","qs","timeout","removeTokens","parseResult","concurrent","process","concurrency","onIdle","hashSaltSHA512","salt","hash","createHmac","update","digest","randomString","createHash","service","obj","NotFoundError","prepare","prepareList","search","defaultSort","prepareByID","byIDs","findOrCreate","findOrCreateMany","map","formatStates","fav","rating","rate","getObjImage","index","lastModified","groups","entries","series","trackCount","trackIDs","albumCount","albumIDs","seriesID","artistID","folderID","folder","ApiBaseResponder","sendJSON","data","sendError","sendBinary","pendingPromises","Map","set","getPendingArray","pending","delete","cb","formatTrackTag","tag","trackNr","track","disc","discTotal","year","title","genre","mbRecordingID","mbReleaseTrackID","mbReleaseGroupID","mbTrackID","mbArtistID","mbReleaseID","parentID","albumArtistID","albumID","created","stat","duration","media","trackMedia","bitRate","channels","sampleRate","trackTag","formatFolderArtwork","artwork","types","image","height","width","formatFolderArtworks","artworks","formatFolderTag","isAlbum","isArtist","artistSort","albumType","genres","path","folderCounts","folderCount","folderTag","folderArtworks","lname","front","other","localeCompare","JAMAPI_VERSION","JAMAPI_URL_VERSION","formatRoles","roles","stream","upload","admin","podcast","email","prepareFrame","frame","bin","binValue","subframes","prepareResponseTag","frames","rawFrameToID3v2","Buffer","from","flacInfo","comment","builder","ID3V24TagBuilder","ALBUM","albumSort","ALBUMSORT","originalAlbum","ORIGINALALBUM","originalArtist","ORIGINALARTIST","originalDate","ORIGINALDATE","TITLE","titleSort","TITLESORT","work","WORK","ARTIST","ARTISTSORT","albumArtist","ALBUMARTIST","albumArtistSort","ALBUMARTISTSORT","artists","ARTISTS","isCompilation","COMPILATION","grouping","GROUPING","date","DATE","composer","COMPOSER","composerSort","remixer","REMIXER","label","LABEL","subtitle","SUBTITLE","discSubtitle","DISCSUBTITLE","lyricist","LYRICIST","GENRE","bpm","BPM","mood","MOOD","lyrics","LYRICS","mediaType","MEDIA","language","LANGUAGE","encoder","ENCODEDBY","encoderSettings","ENCODERSETTINGS","initialKey","KEY","copyright","COPYRIGHT","isrc","ISRC","barcode","BARCODE","asin","ASIN","catalogNumber","CATALOGNUMBER","script","SCRIPT","license","LICENSE","website","WEBSITE","movement","MOVEMENTNAME","movementNr","MOVEMENT","MOVEMENTTOTAL","writer","WRITER","TRACKNUMBER","TRACKTOTAL","TOTALTRACKS","DISCNUMBER","DISCTOTAL","TOTALDISCS","musicianCredit","PERFORMER","involved","ARRANGER","ENGINEER","PRODUCER","DJMIXER","MIXER","mbAlbumStatus","RELEASESTATUS","mbAlbumType","RELEASETYPE","mbAlbumReleaseCountry","RELEASECOUNTRY","MUSICBRAINZ_TRACKID","MUSICBRAINZ_RELEASETRACKID","mbAlbumID","MUSICBRAINZ_ALBUMID","mbOriginalAlbumID","MUSICBRAINZ_ORIGINALALBUMID","MUSICBRAINZ_ARTISTID","mbOriginalArtistID","MUSICBRAINZ_ORIGINALARTISTID","mbAlbumArtistID","MUSICBRAINZ_ALBUMARTISTID","MUSICBRAINZ_RELEASEGROUPID","mbWorkID","MUSICBRAINZ_WORKID","mbTRMID","MUSICBRAINZ_TRMID","mbDiscID","MUSICBRAINZ_DISCID","acoustidID","ACOUSTID_ID","acoustidFingerprint","ACOUSTID_FINGERPRINT","musicIPPUID","MUSICIP_PUID","custom","CATALOGUE","VERSION","ACCURATERIPRESULT","UPC","EAN","UPN","STYLE","LOCATION","PERIOD","SOLOISTS","PARTNUMBER","LABELNO","OPUS","PART","SOURCE","SOURCEMEDIA","SHOWMOVEMENT","ORIGINALYEAR","REPLAYGAIN_ALBUM_GAIN","REPLAYGAIN_ALBUM_PEAK","REPLAYGAIN_TRACK_GAIN","REPLAYGAIN_TRACK_PEAK","COMMENT","DESCRIPTION","nr","substring","chapterTime","valueOf","chapterID","chapterName","chapterURL","subframeBuilder","chapter","buildFrames","pictures","pic","picture","pictureType","description","mimeType","pictureData","version","rawBuilder","build","id3v2tag","head","ver","f","imageModule","ID3v2","simplify","comments","BlockVorbiscomment","createVorbisCommentBlock","pics","filter","imageInfo","getImageInfoBuffer","picBlock","MetaDataBlockPicture","createPictureBlock","colorDepth","colors","trackTotal","ITagID","rev","valid","start","end","isLast","hasData","removed","buffer","ID3TrackTagRawFormatTypes","id3v20","id3v21","id3v22","id3v23","id3v24","waveformCachePath","transcodeCachePath","tools","musicbrainz","MusicbrainzClient","retryOn","acousticbrainz","AcousticbrainzClient","lastFM","LastFMClient","lastfm","apiKey","acoustid","AcoustidClient","lyricsOVH","LyricsOVHClient","chartlyrics","wikipedia","WikipediaClient","coverArtArchive","CoverArtArchiveClient","coverartarchive","transcoder","TranscoderModule","AudioModuleMP3","AudioModuleFLAC","waveform","WaveformModule","externalServices","read","probe","FORMAT","packProbeJamServeTag","packProbeJamServeMedia","none","readRaw","write","extractTagImage","clearCacheByIDs","durationEstimate","encoded","layer","streams","codec_type","bit_rate","sample_rate","channel_layout","codec_long_name","tags","toUpperCase","cleanText","ffmpeg","parseNum","TRACK","DISC","seriesNr","cleanGenre","ALBUM_ARTIST","ALBUM_SORT","ALBUM_SORT_ORDER","ALBUM_ARTIST_SORT","ALBUM_ARTIST_SORT_ORDER","ARTIST_SORT","ARTIST_SORT_ORDER","TITLE_SORT","TITLE_SORT_ORDER","TRACKID","ALBUMTYPE","ALBUMARTISTID","ARTISTID","ALBUMID","RELEASETRACKID","RELEASEGROUPID","RECORDINGID","ALBUMSTATUS","mbReleaseCountry","id3v1","genreIndex","ID3v1_GENRES","parseYear","RELEASETIME","nrTagImages","vorbis","logger","WebserviceJSONClient","WebserviceClient","port","basePath","limit","retryDelay","retryCount","host","reqToHost","retry","info","setTimeout","reqToUrl","stringify","getJson","isRateLimitError","processError","spawnTool","binName","envName","args","getBinPath","child","spawn","stdout","stderr","errMsg","on","code","dataPath","filePrefix","resolveParams","cacheDebounce","DebouncePromises","prefixCacheFilename","searches","readdir","findIndex","cacheID","cacheFilename","isPending","append","cachefile","file","setPending","callback","writeHead","status","json","send","sendErrorMsg","pipe","contentType","sendFile","formatChapters","chapters","chap","episode","podcastID","errorMessage","summary","guid","author","link","getFolderDisplayImage","find","FolderService","folderStore","trackStore","folderId","cachedFolders","collect","unshift","getArtworkImage","MetaWriteableDataBlock","bitsPerPixel","mdb","pos","readUInt32BE","mimeTypeLength","descriptionLength","pictureDataLength","alloc","copy","getSize","header","writeUInt32BE","mimeTypeLen","byteLength","descriptionLen","MetaDataBlock","vendor","vendorLen","readUInt32LE","commentCount","commentLen","writeUInt32LE","TranscoderStream","mediaFormat","maxBitRate","getAvailableFormats","formats","canDemux","source","proc","withNoVideo","toFormat","addOptions","withAudioCodec","withAudioBitrate","destination","getTranscodeProc","cmd","debug","save","maxAgeSpec","maxAge","unit","asMilliseconds","webpackEmptyContext","typeBool","typeInt","typeString","fields","keyword","typeKey","typeRoot","properties","strategy","typeUser","scrobblingEnabled","allowedFolder","typeFolder","rootID","albumTrackCount","typePlayQueue","userID","currentID","position","changed","changedBy","typeTrackTag","typeTrackMedia","typeTrack","typeAlbum","slug","rootIDs","folderIDs","typeArtist","nameSort","seriesIDs","albumTypes","typeRadio","homepage","disabled","typeState","destID","destType","typePlaylist","coverArt","allowedUser","isPublic","typePodcast","lastCheck","generator","categories","typeEpisode","enclosures","typeBookmark","typeMetaData","dataType","typeSettings","section","typeSession","agent","expires","sessionID","cookie","jwth","mapping","root","playqueue","radio","playlist","bookmark","metadata","settings","session","JAMSERVE_VERSION","pack","fileDeleteIfExists","STATUS_CODES","createWriteStream","BaseCompressStream","streaming","replaceFileSystemChars","isSupportedFormat","archive","zlib","setHeader","run","finalize","updatePlayListTracks","tracks","trackHash","PlaylistService","playlistStore","now","hashMD5","MetaStatBuilder","stats","val","multi","cleaned","slugify","convert2list","entry","convert2Numlist","asList","getMostUsedTagValue","asNumberList","usage","option","argv","config","loadConfig","configureLogger","database","use","DBElastic","elasticsearch","DBNedb","getDataPath","Store","engine","Engine","server","Server","reset","open","clearLocalFiles","close","runClearDB","console","stop","exit","settingsService","settingsVersion","forceRescan","library","scanAtStart","ioService","refresh","saveSettings","app","urlencoded","extended","proxy","enable","initJamRouter","configFile","static","frontend","indexFile","listen","getURL","registerApiPublic","router","api","LoginLimiter","windowMs","login","window","skipSuccessfulRequests","post","apiCheck","CallSessionLoginHandler","registerLogin","register","execute","apiCheckName","registerPublicApi","JamApi","Router","originalUrl","registerLog","registerSession","registerPassPort","registerPublicCORS","registerAuthentication","registerAuthenticatedCors","CallSessionLogoutHandler","jamUpload","checkRoles","handler","registerAccessControlApi","registerApiAuthenticated","register404Error","settingsController","SettingsController","streamController","StreamController","streamService","nowPlayingService","chatController","ChatController","chatService","genreController","GenreController","genreService","statsController","StatsController","statsService","nowPlayingController","NowPlayingController","imageController","ImageController","downloadController","DownloadController","waveformController","WaveformController","waveformService","autocompleteController","AutocompleteController","radioController","RadioController","radioService","rootController","RootController","rootService","trackController","TrackController","trackService","folderService","audioModule","bookmarkService","metaDataService","episodeController","EpisodeController","episodeService","podcastController","PodcastController","podcastService","albumController","AlbumController","albumService","indexService","seriesController","SeriesController","seriesService","artistController","ArtistController","artistService","folderController","FolderController","sessionController","SessionController","sessionService","userController","UserController","userService","playlistController","PlaylistController","playlistService","bookmarkController","BookmarkController","playqueueController","PlayQueueController","playQueueService","metadataController","MetadataController","formatAlbum","albumState","albumInfo","extInfo","byAlbum","albumTracks","sortAlbumTracks","trackID","newerThan","fromYear","toYear","sortField","sortDescending","similarTracks","albums","formatAlbumIndex","getAlbumIndex","albumTrackIDs","aNr","bNr","sortGrouping","formatArtist","artistState","artistInfo","byArtist","artistSimilar","similar","similarArtists","artistTracks","sortArtistTracks","artistAlbums","sortArtistAlbums","formatArtistIndex","getArtistIndex","artistTrackIDs","artistAlbumIDs","artistSeries","seriesCount","autocompleteQuery","albumStore","artistStore","folders","playlists","podcastStore","podcasts","episodeStore","episodes","seriesStore","formatBookmark","bookmarkTrack","removeByTrack","byUser","byTrack","since","formatChatMessage","time","UnauthError","username","download","findInStores","downloadStores","Validator","param","num","isInteger","minimum","maximum","enum","listValues","Array","isArray","listValue","validOAParameterValueBySchema","results","anyOf","default","validateAnyOfParameter","validateBooleanParameter","validateStringParameter","validateArrayParameter","validateNumberParameter","components","$ref","pop","schemas","def","specialSchema","jsonValidator","requestBody","content","validator","createJSONValidator","validateJSON","errors","validOAParameter","cookies","openapi","forceMethod","cmdPath","method","checkAOParameters","checkAORequestBody","jsonvalidator","compile","schemaValidator","schemaPath","formatEpisode","isDownloading","downloading","trackState","downloadEpisode","streamEpisode","metadataService","checker","FolderRulesChecker","formatFolder","folderChildren","folderTracks","prepareByQuery","folderSubfolders","folderState","folderInfo","byFolderArtist","byFolderAlbum","folderSimilar","byFolder","folderParents","parents","collectFolderPath","parent","inPath","childOfID","trackQuery","recursive","inPaths","parentIDs","resultTracks","renameFolder","formatFolderIndex","getFolderIndex","art","artworkByID","downloadArtwork","createArtwork","fileType","updateArtwork","renameArtwork","deleteArtwork","roots","rootStore","health","destFolder","moveFolders","deleteFolder","newFolder","folderRules","albumTagsExists","missing","details","reason","expected","albumMBIDExists","albumTracksComplete","actual","albumNameConform","checkNiceName","nicename","nameSlug","folderPath","nicenameSlug","niceSlug","replaceFolderSystemChars","getNiceAlbumFolderName","getNiceOtherFolderName","albumImageExists","albumImageValid","albumImageQuality","artistImageExists","artistImageValid","artistNameConform","artistName","artistNameSlug","rule","getGenres","formatGenre","artistCount","validatePathParameterIDSizeFormat","findInAll","musicbrainzSearch","acoustidLookupTrack","inc","lastFMLookup","acousticbrainzLookup","coverartarchiveLookup","musicbrainzLookup","wikipediaSummary","lang","wikidataSummary","wikidataLookup","nowplayingService","nowPlayings","getNowPlaying","packNowPlaying","playing","minutesAgo","round","diff","asMinutes","formatTrack","formatPlaylist","playlistState","playlistTracks","playlistTrackIDs","playqueueService","playQueue","getQueueOrCreate","formatPlayQueue","playQueueTracks","playQueueTrackIDs","formatPodcast","podcastState","podcastEpisodes","refreshPodcasts","formatRadio","radioState","formatRoot","getRootStatus","createRoot","updateRoot","removeRoot","refreshMeta","refreshRoot","getAdminChangeQueueInfoStatus","rootState","formatSeries","seriesState","seriesInfo","bySeries","seriesTracks","sortSeriesTracks","seriesAlbums","sortSeriesAlbums","formatSeriesIndex","getSeriesIndex","seriesAlbumIDs","seriesTrackIDs","allowedCookieDomains","formatSessionUser","byUserID","formatSession","clearCache","parseAgent","ua","browser","os","platform","updateSettings","getStats","formatStats","artistTypes","streamTrack","reportTrack","reportEpisode","streamDBObject","streamStores","metaService","TrackRulesChecker","trackRawTag","tagRaw","getRawTag","readRawTag","trackTagToRawTag","writeRawTag","renameTrack","moveTracks","removeTrack","fixTrack","fixID","checks","processQueue","song","analyzeErrors","xing","xingMissing","mpeg","fixable","GARBAGE_FRAMES_IDS","hasID3v2Tag","isMP3","trackRules","tagValuesExists","tagCache","id3v2NoId3v1","id3v2Exists","id3v2Valid","mp3Warnings","id3v2","id3v2Garbage","mp3Garbage","warnings","mp3HeaderExists","mp3HeaderValid","mp3MediaValid","flacMediaValid","flacWarnings","audiomodule","checkMedia","mediaCache","ana","analyze","w","flac_test","isFlac","GenresSlugs","buildGenreSlugs","Genres","g","part","numpart","exec","parseInt","sub","mbid","fp","meta","toFixed","fingerprint","fpcalc","cmds","raw","spawnToolJson","isWindows","cache","env","environment","resolvedPath","whichAsync","arch","localBin","images","SyntaxError","LastFMClientBeautify","subkey","ensureList","sample","fulltrack","img","walk","buildSubValue","walkBeautifyObject","sortedParams","api_key","beautify","toptracks","similartracks","topArtistSongsID","similarTrackID","albumIDTopTags","songName","cleanString","encodeURIComponent","normalize","formatKey","concatSearchQuery","lookup","LookupIncludes","invalidKey","lookupIds","LookupBrowseTypes","area","event","instrument","place","recording","release","action","prop","exintro","redirects","titles","pages","page","extract","redirect","extract_html","entities","Flac","packFlacVorbisCommentJamServeTag","packFlacMediaInfoJamServeMedia","flacToRawTag","id3","rawTagToID3v2","flacBlocks","id3v2ToFlacMetaData","reader","createReadStream","processor","FlacProcessorStream","formatMediaBlock","formatMediaComment","formatMediaPicture","flacBlock","block","publish","tmpFile","writeTo","move","line","bitsPerSample","sampleCount","samples","minBlockSize","maxBlockSize","minFrameSize","maxFrameSize","Transform","reportID3","parseMetaDataBlocks","hasError","hasID3","bufPos","mdbLen","mdbLast","mdbPush","mdbLastWritten","encoding","chunk","emit","buf","rest","scanSetFlac","minCapacity","persist","validate","isDone","safePushFull","safePushIncomplete","scan","safePush","validateMarker","validateMDBHeader","validateMDB","processIDLE","processSCANMARKER","processMARKER","processMDBHEADER","processMDB","processPASSTHROUGH","destroy","MetaDataBlockStreamInfo","initMDB","preProcess","readUInt16BE","readUInt8","tmp","checksum","taskPath","__dirname","taskRewriteMp3","taskFixMp3","taskRemoveID3v1","taskAnalyzeMp3","MP3","mpegQuick","packID3v2JamServeTag","packJamServeMedia","ID3v1","v1","packID3v1JamServeTag","id3v2ToRawTag","keepBackup","paddingSize","removeID3v1Pool","StaticPool","task","fixMP3Pool","rewriteAudioPool","analyzeMp3Pool","transcodeCache","IDFolderCache","validTranscoding","transcodeToFile","removeByIDs","waveformCache","wf","WaveformGenerator","dat","binary","generateWaveform","writeFile","asBinary","asJSON","buildSvg","Waveform","samplesPerPixel","x","scaleLinear","y","wfd","resample","scale","channel","minArray","min_array","maxArray","max_array","domain","rangeRound","waveArea","y0","y1","d3n","createSVG","preserveAspectRatio","viewBox","datum","attr","svgString","opts","ws","WaveformStream","px","writeInt32LE","writeInt16LE","samples_per_pixel","bits","atSamplesPerPixel","atSampleRate","writableObjectMode","readableObjectMode","highWaterMark","_buf","PassThrough","_out","_started","_min","_max","_samples","_total","_samplesPerPixel","_sampleRate","_ffmpeg","errored","writeToStream","readResults","readInt16LE","dataLen","once","formatUser","isAdmin","auth","password","pass","pw","hashAndSaltSHA512","u","roleAdmin","roleStream","roleUpload","rolePodcast","checkUserAccess","getByName","GenericError","generateAvatar","seed","setUserImage","setUserPassword","newPassword","setUserEmail","getWaveform","getTrackWaveform","getEpisodeWaveform","readFile","preflightContinue","credentials","allowedHeaders","origin","methods","origins","jwt","CheckAuthMiddleWare","jwthash","token","clearSession","removeByJwth","destroySession","initialize","serializeUser","deserializeUser","getByID","Strategy","usernameField","passwordField","resolvePayload","jwtPayload","jwtFromRequest","ExtractJwt","fromAuthHeaderAsBearerToken","secretOrKey","secret","fromUrlQueryParameter","bearer","authenticate","isRevoked","revoked","err2","getMaxAge","tokenData","exp","sign","generateJWT","logout","clearCookie","ok","role","ping","lastfmLookup","lyricsovhSearch","acoustidLookup","autocomplete","subfolders","artistSimilarTracks","rawTag","rawTags","retrieve","refreshAll","sessions","byTrackList","queueId","artworkImage","imageByPathParameter","streamByPathParameter","waveformByPathParameter","svgByPathParameter","downloadByPathParameter","scrobble","byTrackDelete","favUpdate","rateUpdate","rawTagUpdate","nameUpdate","parentUpdate","fix","artworkCreate","artworkDelete","artworkNameUpdate","mimetype","artworkUploadCreate","artworkUploadUpdate","passwordUpdate","emailUpdate","imageRandom","imageUploadUpdate","adminUpdate","ExpressSessionStore","resave","saveUninitialized","secure","jamSession","sid","_get","toJam","toExpress","clear","registerNotify","SessionMode","passport","expired","JamUpload","tmpPath","dest","autoClean","mu","registerAutoClean","validateConfig","extendConfig","jamServe","firstStart","parts","configPath","cwd","configFirstStartFile","Client","node","sequence","DbElasticSequence","indexPrefix","indexRefresh","getTypes","resetIndex","init","indexName","indices","exists","_default_","date_detection","mappings","createIndex","waitAfter","checkIndex","wait","DBIndexElastic","ms","_index","_type","_map","hit","_source","match_all","must","getPropertyMapping","match_phrase_prefix","prefix","vals","bool","onHits","getMoreUntilDone","hits","_scroll_id","scroll","scroll_id","filterProperties","translateElasticQuery","indexItem","aggs","_count","cardinality","aggregations","bodies","found","hit2Obj","mget","docs","doc","buckets","queryScroll","stored_fields","_id","onItem","deleteByQuery","deleted","esTypeMapping","_all","initPromise","initError","cacheFillPromise","cacheSize","esIndex","esType","isFinite","isInjectedCacheSizeValid","isObject","initEsIndexIfNeeded","putMapping","addMappingToEsIndexIfMissing","number_of_shards","auto_expand_replicas","sequenceName","bulkParams","_version","shift","returnValue","interal_get","fillCache","dbPath","clients","sequenceId","initClient","loadDatabase","checkMaxSequence","DBIndexNedb","getNewID","getGlobalNewID","literal","$regex","RegExp","$in","$gte","$lte","$exists","$and","insert","numReplaced","hits2Objs","dbquery","translateSortQuery","skip","prepareFindCursor","getFieldValueR","getDotFieldValues","collectDistinctValues","ImageModule","audio","AudioModule","ThirdPartyConfig","ChatService","WaveformService","StreamService","StateService","stateStore","TrackService","AlbumService","IndexService","workerService","WorkerService","SettingsService","settingsStore","ArtistService","UserService","userStore","bookmarkStore","playQueueStore","sessionStore","GenreService","StatsService","IoService","DownloadService","NowPlayingService","PlayQueueService","BookmarkService","EpisodeService","PodcastService","SeriesService","ImageService","MetaDataService","metaStore","RootService","RadioService","radioStore","SessionService","buildDefaultIndexes","cleanUp","clearExpired","mail","first","auto","adminUser","buildAdminUser","buildRoots","ensureDir","resolveCachePaths","checkDataPaths","loadSettings","checkFirstStart","pathDeleteIfExists","simd","imageCachePath","avatarPartsLocation","filepath","imageUrl","imageext","downloadFile","text","font","loadFont","FONT_SANS_32_WHITE","print","alignmentX","HORIZONTAL_ALIGN_CENTER","alignmentY","VERTICAL_ALIGN_MIDDLE","resize","mime","getBufferAsync","fileFormat","getImageAs","sharpy","failOnError","fit","cover","entropy","toBuffer","getExisting","getImageBufferAs","getImage","png","toFile","tempFile","resizeImagePNG","rename","avatarGenerator","AvatarGen","avatar","generate","density","formatImageInfo","defaultAvatarSettings","partsLocation","AvatarGenerator","imageExtension","cfg","_variants","BuildVariantsMap","_parts","fileRegex","readdirSync","partsDir","statSync","isDirectory","reduce","variants","discriminator","dir","ps","fileName","variant","variantParts","rng","partName","partVariants","Boolean","getParts","composite","input","tryFolderID","getAlbumFolder","getAlbumTrackImage","getAlbumFolderImage","artistFolder","canHaveArtistImage","getArtistFolder","paint","searchOne","messages","chatConfig","maxMessages","subtract","cleanOld","CompressListStream","CompressFolderStream","fileList","downloadTrack","downloadFolder","downloadArtist","downloadSeries","downloadAlbum","downloadPodcast","downloadPlaylist","directory","podcastsPath","episodeDownloadDebounce","podcastEpisodeId","downloadEpisodeFile","completed","ctime","modified","mtime","removeEpisodes","storeEpisodes","newEpisodes","oldEpisodes","epi","getBuffer","genreHash","sections","sec","getCoverArtTextTrack","getCoverArtTextFolder","getCoverArtTextEpisode","getCoverArtTextPodcast","getEpisodeImage","rootFolder","paintImage","getCoverArtText","cached","indexCacheFolderDebounce","indexCacheArtistDebounce","indexCacheSeriesDebounce","indexCacheAlbumDebounce","indexConfig","ignoreArticles","IndexFolderTreeBuilder","buildFolderIndex","IndexArtistTreeBuilder","buildArtistIndex","IndexSeriesTreeBuilder","buildSeriesIndex","IndexAlbumTreeBuilder","buildAlbumIndex","IndexTreeBuilder","ignore","matches","charAt","searchCount","getTotalTrackCount","removeArticles","indexChar","getIndexChar","group","WorkerRequestMode","WorkerRequest","stack","onRefresh","scanning","rootstatus","queue","delayedTrackTagWrite","delayedTrackFix","nextID","history","clearAfterRefresh","lastScan","current","changes","logChanges","runAfterRefresh","afterScanTimeout","clearTimeout","runRequest","getRequestInfo","addRequest","generateRequestID","request","forceMetaRefresh","oldRequest","findRequest","newRequest","newParentID","deleteFolders","artworkID","newname","artworkFilename","artworkMimeType","artworkURL","removeTracks","newName","writeTrackTags","delayedCmd","fixes","fixTracks","createFolder","logChange","v","utc","newTracks","updateTracks","removedTracks","newFolders","updateFolders","removedFolders","newArtists","updateArtists","removedArtists","newAlbums","updateAlbums","removedAlbums","newSeries","updateSeries","removedSeries","metadataStore","MetadataServiceExtendedInfo","MetadataServiceSimilarArtists","MetadataServiceSimilarTracks","topTracks","MetadataServiceTopTracks","olderThan","addToStore","searchInStore","MetaDataType","topArtistSongs","highLevel","releaseImages","releaseGroup","releaseGroupImages","cutVariants","cut","wikidata","entity","site","sitelinks","langSite","wiki","MetaDataFormat","formatWikipediaExtendedInfo","relations","rel","resource","getWikiDataExtendedInfo","bio","formatLastFMExtendedInfo","getMusicBrainzIDWikipediaArtistInfo","getLastFMArtistInfo","getMusicBrainzIDWikipediaAlbumInfo","getLastFMAlbumInfo","getArtistInfoByMusicBrainzID","lastFMArtistSearch","albumName","releases","getAlbumInfoByMusicBrainzID","lastFMAlbumSearch","getArtistInfoByName","getAlbumInfoByName","stripInlineWikipediaHTML","licenseUrl","stripInlineLastFM","names","getLastFMSimilarArtists","byArtistIdName","findSimilarArtists","findSimilarArtistFolders","songs","sim","mbTrackIDs","tr","lastFMTopTracksArtistID","lastFMTopTracksArtist","similars","getSimilarSongs","findSongTracks","getSimilarArtistTracks","lastFMSimilarTracks","np","reportPlaying","emptyPlaylist","podcastRefreshDebounce","podcastId","new","clearImageCacheByIDs","feed","Feed","imageFile","podcastPath","storeImage","mergeEpisodes","as","str","para","decompress","createInflate","createGunzip","charset","iv","decodeStream","posts","doneReported","pool","setMaxListeners","feedParser","abort","getParams","pipestream","maybeDecompress","maybeTranslate","fetch","anypost","parseItunesDurationSeconds","pscChaps","pscChap","parseDurationMilliseconds","homepageUrl","events","jwthCache","old","notify","defaultSettings","getSettings","initSettingsStoreObj","setSettings","chat","emptyState","destIDs","minRating","ratings","avg","isPlayed","isFaved","compilation","artist_compilation","audiobook","soundtrack","sourceFormat","destFormat","needsTranscoding","streamFile","defaultCompare","getTrackFolder","userAvatarPath","cachedUsers","avatarImageFilename","destName","createAvatar","testPassword","artworkWorker","ArtworkWorker","trackWorker","TrackWorker","folderWorker","FolderWorker","rootWorker","RootWorker","ChangesWorker","dbMatcher","MatchDirBuilderDB","rootMatch","changedDirs","mergeMatch","finish","forceRefreshMeta","mergeDBMatch","changedFolderIDs","changedTrackIDs","writeTags","files","directories","metaStat","buildMatchFileFromDB","matchFile","loadedMatches","parentMatch","buildMatchDirDBData","buildMatchDirParentsFromDBData","loadChildsFromDBData","changedFiles","removedID","destFile","generateArtworkId","artWorkImageNameToType","getImageInfo","containsFolderSystemChars","ext","fileExt","buildArtworkImageFile","imageCleanIds","Set","trackCleanIds","artistIDs","oldTrack","rebuildDirTag","forceTrackMetaRefresh","merger","MatchDirMerge","merge","emptyChanges","metaMerger","MetaMerger","mergeMeta","storeChanges","cleanChanges","folderBuilder","MatchDirMergeBuilder","tagBuilder","MatchDirMergeTagBuilder","deepCompare","folderHasChanged","buildFolder","mergeRecursive","mergeMatchDir","buildMerge","buildMergeTags","ignoreList","compare","oa","ob","ensureTrailingPathSeparator","buildDefaultTag","basenameStripExt","dirname","trackHasChanged","buildTrack","buildMergeTrack","getMultiAlbumFolderType","isExtraFolder","hasMultipleAlbums","getMixedFolderType","hasMultipleArtists","getFolderType","setFolderTagType","markMultiAlbumChildDirs","markArtistChildDirs","nameSplit","splitDirectoryName","subFolderTrackCount","buildFolderArtworks","oldArtworks","oldArtwork","buildFolderArtwork","rebuildTag","MatchDirMetaStats","buildMetaStat","buildFolderTag","applyFolderTagType","typeByGenreNames","typeByMusicbrainzString","artistalbum","tracktag","statSlugValue","extractAlbumName","statNumber","statTrackCount","statID","buildTrackSlugs","subtag","buildSubFolderSlugs","mostUsed","getGenreAlbumType","getMusicbrainzAlbumType","getStrategyAlbumType","asStringList","buildTracksSlugs","buildSubFoldersSlugs","getAlbumInfo","mostUsedNumber","MetaMergerCache","trackInfo","findOrCreateArtist","findOrCreateCompilationArtist","findOrCreateAlbum","findOrCreateSeries","getSeriesByID","getArtistByID","getAlbumByID","getFolderByID","allArtistIDs","allAlbumIDs","allSeriesIDs","removedTrackIDs","tracksAlbumsIDs","removedFromArtist","refreshedTracks","refreshedAlbums","refreshArtistTracks","metaStatBuilder","refreshArtistAlbums","checkArtists","refreshArtist","removedFromAlbum","refreshIDs","refreshSeriesTracks","refreshSeriesAlbums","checkSeries","refreshSeries","trackInfos","refreshAlbumTracks","getAlbumName","checkAlbums","refreshAlbum","collectNewTrackInfos","collectUpdateTrackInfos","addMeta","removeMeta","collectAll","refreshAlbums","refreshArtists","refreshSerieses","getAlbumSlug","artistCache","seriesCache","albumCache","folderCache","findSeriesInCache","findSeriesInDB","buildSeries","findAlbumInCache","findAlbumInDB","buildAlbum","aa","slugArtist","slugs","findCompilationArtist","findArtistInCache","findArtistInDB","buildArtist","sourceDir","destPath","newPath","oldPath","replaceMany","newParent","oldpath","validateFolderTask","updatePaths","moveFolderIDs","moveFolder","validateFolderName","mkdir","buildNewFolder","trashPath","dirScanner","DirScanner","scanDir","MatchDirBuilderScan","addRoot","checkUsedPath","cloneScanDir","searchTracks","searchFolders","subFolder","subDir","sd","matchDirR","folderList","trackList","subStat","getFileType","scanDirR","fixTasks","fixIDs","rewrite","fixAudio","removeID3v1","ext2","SettingsStore","TrackStore","FolderStore","UserStore","StateStore","PlaylistStore","PodcastStore","EpisodeStore","BookmarkStore","ArtistStore","AlbumStore","PlayQueueStore","RadioStore","RootStore","MetaDataStore","SessionStore","SeriesStore","stores","allStores","objs","BaseStore","QueryHelper","podcastIDs","sortFieldMap","maxRating","albumartist","albumArtistIDs"],"mappings":"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","file":"jamserve.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 63);\n","export enum DBObjectType {\n\troot,\n\tuser,\n\tfolder,\n\ttrack,\n\tstate,\n\tplaylist,\n\tpodcast,\n\tepisode,\n\tbookmark,\n\talbum,\n\tartist,\n\tplayqueue,\n\tradio,\n\tmetadata,\n\tsettings,\n\tsession,\n\tseries\n}\n","export enum JamObjectType {\n\troot = 'root',\n\tuser = 'user',\n\tfolder = 'folder',\n\ttrack = 'track',\n\tstate = 'state',\n\tplaylist = 'playlist',\n\tpodcast = 'podcast',\n\tepisode = 'episode',\n\tseries = 'series',\n\tbookmark = 'bookmark',\n\talbum = 'album',\n\tartist = 'artist',\n\tplayqueue = 'playqueue',\n\tradio = 'radio'\n}\n\nexport enum RootScanStrategy {\n\tauto = 'auto',\n\tartistalbum = 'artistalbum',\n\tcompilation = 'compilation',\n\taudiobook = 'audiobook'\n}\n\nexport const AudioMimeTypes: { [ext: string]: string } = {\n\tmp3: 'audio/mpeg',\n\tm4a: 'audio/mp4',\n\tmp4: 'audio/mp4',\n\togg: 'audio/ogg',\n\toga: 'audio/ogg',\n\tflv: 'aaudio/x-flv',\n\tflac: 'audio/flac',\n\twebma: 'audio/webm',\n\twebm: 'audio/webm',\n\twav: 'audio/wav'\n};\n\nexport enum WaveformFormatType {\n\tsvg = 'svg',\n\tjson = 'json',\n\tdat = 'dat'\n}\n\nexport enum AudioFormatType {\n\tmp3 = 'mp3',\n\tm4a = 'm4a',\n\tmp4 = 'mp4',\n\togg = 'ogg',\n\toga = 'oga',\n\tflv = 'flv',\n\tflac = 'flac',\n\twebma = 'webma',\n\twav = 'wav'\n}\n\nexport const VideoMimeTypes: { [ext: string]: string } = {\n\tmp4: 'audio/mp4',\n\tm4v: 'audio/mp4',\n\togv: 'audio/ogg',\n\twebmv: 'audio/webm',\n\twebm: 'audio/webm'\n};\n\nexport enum FolderType {\n\tunknown = 'unknown',\n\tartist = 'artist',\n\tcollection = 'collection',\n\talbum = 'album',\n\tmultialbum = 'multialbum',\n\textras = 'extras'\n}\n\nexport enum PodcastStatus {\n\t'new' = 'new',\n\tdownloading = 'downloading',\n\tcompleted = 'completed',\n\terror = 'error',\n\tdeleted = 'deleted'\n\t// skipped = 'skipped'\n}\n\nexport const FolderTypeImageName: { [foldertype: string]: string } = {\n\tunknown: 'folder',\n\tartist: 'artist',\n\tcollection: 'folder',\n\talbum: 'cover',\n\tmultialbum: 'cover',\n\textras: 'folder'\n};\n\nexport enum ArtworkImageType {\n\tfront = 'front',\n\tback = 'back',\n\tbooklet = 'booklet',\n\tmedium = 'medium',\n\ttray = 'tray',\n\tobi = 'obi',\n\tspine = 'spine',\n\ttrack = 'track',\n\tliner = 'liner',\n\tsticker = 'sticker',\n\tposter = 'poster',\n\twatermark = 'watermark',\n\traw = 'raw',\n\tunedited = 'unedited',\n\tother = 'other',\n\tartist = 'artist'\n}\n\nexport const FolderTypesAlbum = [FolderType.album, FolderType.multialbum];\n\nexport enum DatabaseQuerySortType {\n\tascending, descending\n}\n\nexport enum AlbumType {\n\tunknown = 'unknown',\n\talbum = 'album',\n\tcompilation = 'compilation',\n\tlive = 'live',\n\tbootleg = 'bootleg',\n\tsoundtrack = 'soundtrack',\n\taudiobook = 'audiobook',\n\tep = 'ep',\n\tsingle = 'single',\n\tseries = 'series'\n}\n\nexport const AlbumTypesArtistMusic = [AlbumType.album, AlbumType.live, AlbumType.bootleg, AlbumType.ep, AlbumType.single];\n\nexport enum FileTyp {\n\tUNKNOWN = 'unknown',\n\tAUDIO = 'audio',\n\tIMAGE = 'image',\n\tTAG = 'tag',\n\tBACKUP = 'backup',\n\tOTHER = 'other'\n}\n\nexport enum LastFMLookupType {\n\talbum = 'album',\n\talbumToptracks = 'album-toptracks',\n\tartist = 'artist',\n\ttrack = 'track',\n\ttrackSimilar = 'track-similar',\n\tartistToptracks = 'artist-toptracks'\n}\n\nexport enum MusicBrainzLookupType {\n\tarea = 'area',\n\tartist = 'artist',\n\tcollection = 'collection',\n\tevent = 'event',\n\tinstrument = 'instrument',\n\tlabel = 'label',\n\tplace = 'place',\n\trecording = 'recording',\n\trelease = 'release',\n\treleaseGroup = 'release-group',\n\tseries = 'series',\n\twork = 'work',\n\turl = 'url'\n}\n\nexport enum MusicBrainzSearchType {\n\tartist = 'artist',\n\tlabel = 'label',\n\trecording = 'recording',\n\trelease = 'release',\n\treleaseGroup = 'release-group',\n\twork = 'work',\n\tarea = 'area'\n}\n\nexport enum CoverArtArchiveLookupType {\n\trelease = 'release',\n\treleaseGroup = 'release-group'\n}\n\nexport enum TrackTagFormatType {\n\tnone = 'none',\n\tffmpeg = 'ffmpeg',\n\tid3v20 = 'id3v20',\n\tid3v21 = 'id3v21',\n\tid3v22 = 'id3v22',\n\tid3v23 = 'id3v23',\n\tid3v24 = 'id3v24',\n\tid3v1 = 'id3v1',\n\tvorbis = 'vorbis'\n}\n\nexport enum MusicBrainzAlbumPrimaryType {\n\talbum = 'Album',\n\tsingle = 'Single',\n\tep = 'EP',\n\tbroadcast = 'Broadcast',\n\tother = 'Other'\n}\n\nexport enum MusicBrainzAlbumSecondaryType {\n\tcompilation = 'Compilation',\n\tsoundtrack = 'Soundtrack',\n\tspokenword = 'Spokenword',\n\tinterview = 'Interview',\n\taudiobook = 'Audiobook',\n\taudiodrama = 'Audio drama',\n\tlive = 'Live',\n\tremix = 'Remix',\n\tdjmix = 'DJ-mix',\n\tmixtape = 'Mixtape'\n}\n\nexport const MUSICBRAINZ_VARIOUS_ARTISTS_ID = '89ad4ac3-39f7-470e-963a-56509c546377';\nexport const MUSICBRAINZ_VARIOUS_ARTISTS_NAME = 'Various Artists';\n\nexport const cUnknownArtist = '[Unknown Artist]';\nexport const cUnknownAlbum = '[Unknown Album]';\n\nexport enum TrackHealthID {\n\ttagValuesExists = 'track.tag.values.exists',\n\tid3v2Exists = 'track.mp3.id3v2.exists',\n\tid3v2Valid = 'track.mp3.id3v2.valid',\n\tid3v2Garbage = 'track.mp3.id3v2.garbage.frames',\n\tmp3HeaderExists = 'track.mp3.vbr.header.exists',\n\tmp3HeaderValid = 'track.mp3.vbr.header.valid',\n\tmp3MediaValid = 'track.mp3.media.valid',\n\tflacMediaValid = 'track.flac.media.valid',\n\tid3v2NoId3v1 = 'track.mp3.id3v2.no.id3v1',\n\tmp3Garbage = 'track.mp3.garbage.data'\n}\n\nexport enum FolderHealthID {\n\talbumTagsExists = 'folder.album.tags.exists',\n\talbumMBIDExists = 'folder.album.mbid.exists',\n\talbumTracksComplete = 'folder.album.tracks.complete',\n\talbumNameConform = 'folder.album.name.conform',\n\talbumImageExists = 'folder.album.image.exists',\n\talbumImageValid = 'folder.album.image.valid',\n\talbumImageQuality = 'folder.album.image.quality',\n\tartistNameConform = 'folder.artist.name.conform',\n\tartistImageExists = 'folder.artist.image.exists',\n\tartistImageValid = 'folder.artist.image.valid'\n}\n\nexport const AudioFormats = ['mp3', 'm4a', 'mp4', 'ogg', 'oga', 'flv', 'flac', 'webma', 'wav'];\nexport const DownloadFormats = ['zip', 'tar'];\nexport const DefaultDownloadFormat = 'zip';\nexport const WaveformFormats = ['svg', 'json', 'dat'];\nexport const WaveformDefaultFormat = WaveformFormatType.svg;\n","import winston from 'winston';\n\nexport function configureLogger(level: string): void {\n\twinston.configure({\n\t\tlevel,\n\t\ttransports: [\n\t\t\tnew winston.transports.Console({\n\t\t\t\tformat:\n\t\t\t\t\twinston.format.combine(\n\t\t\t\t\t\t// winston.format.timestamp(),\n\t\t\t\t\t\twinston.format.colorize(),\n\t\t\t\t\t\twinston.format.simple()\n\t\t\t\t\t\t// winston.format.json()\n\t\t\t\t\t)\n\t\t\t})\n\t\t]\n\t});\n}\n\nexport class Logger {\n\tprivate readonly name: string;\n\n\tconstructor(name: string) {\n\t\tthis.name = name;\n\t}\n\n\tprivate applyLog(level: string, format: string, ...params: Array<any>): void {\n\t\twinston.log(level, `${(new Date()).toISOString()} ${this.name}: ${[format].concat(params).join(' ')}`);\n\t}\n\n\tdebug(format: string, ...params: Array<any>): void {\n\t\tthis.applyLog('debug', format, params);\n\t}\n\n\tinfo(format: string, ...params: Array<any>): void {\n\t\tthis.applyLog('info', format, params);\n\t}\n\n\twarn(format: string, ...params: Array<any>): void {\n\t\tthis.applyLog('warn', format, params);\n\t}\n\n\terror(format: string | Error, ...params: Array<any>): void {\n\t\tthis.applyLog('error', format.toString(), params);\n\t}\n\n}\n\nexport function logger(name: string): Logger {\n\treturn new Logger(name);\n}\n","module.exports = require(\"path\");","import fse from 'fs-extra';\nimport path from 'path';\n\nexport async function fileDeleteIfExists(pathName: string): Promise<void> {\n\tconst exists = await fse.pathExists(pathName);\n\tif (exists) {\n\t\tawait fse.unlink(pathName);\n\t}\n}\n\nexport async function pathDeleteIfExists(pathName: string): Promise<void> {\n\tconst exists = await fse.pathExists(pathName);\n\tif (exists) {\n\t\tawait fse.remove(pathName);\n\t}\n}\n\nexport function fileSuffix(filename: string): string {\n\treturn path.extname(filename).slice(1).toLowerCase();\n}\n\nexport function fileExt(filename: string): string {\n\treturn path.extname(filename).toLowerCase();\n}\n\nexport function basenameStripExt(filename: string): string {\n\treturn path.basename(filename, path.extname(filename));\n}\n\nexport function replaceFileSystemChars(s: string, replace: string): string {\n\treturn s.toString()\n\t\t.replace(/:/g, ' - ')\n\t\t.replace(/[?/!\\\\\"]/g, replace);\n}\n\n// eslint-disable-next-line no-control-regex\nconst FolderSystemCharsRegEx = /[<>:\"/\\\\|?*\\x00-\\x1F]|^(?:aux|con|clock\\$|nul|prn|com[1-9]|lpt[1-9])$/i;\n\nexport function containsFolderSystemChars(s: string): boolean {\n\treturn FolderSystemCharsRegEx.test(s);\n}\n\nexport function replaceFolderSystemChars(s: string, replace: string): string {\n\t/*\n\t\t< (less than)\n\t\t> (greater than)\n\t\t: (colon)\n\t\t\" (double quote)\n\t\t/ (forward slash)\n\t\t\\ (backslash)\n\t\t| (vertical bar or pipe)\n\t\t? (question mark)\n\t\t* (asterisk)\n\t */\n\treturn s.toString()\n\t\t.replace(/:/g, ' -')\n\t\t.replace(/[|*?/!\\\\<>\"]/g, replace);\n}\n\nexport function ensureTrailingPathSeparator(s: string): string {\n\tif (s.length > 0 && s[s.length - 1] !== path.sep) {\n\t\treturn s + path.sep;\n\t}\n\treturn s;\n}\n\nexport function removeTrailingPathSeparator(s: string): string {\n\tif (s.length > 0 && s[s.length - 1] === path.sep) {\n\t\treturn s.slice(0, s.length - 1);\n\t}\n\treturn s;\n}\n","class ApiError extends Error {\n\tfailCode: number;\n\n\tconstructor(message: string, failCode: number) {\n\n\t\t// Calling parent constructor of base Error class.\n\t\tsuper(message);\n\n\t\t// Saving class name in the property of our custom error as a shortcut.\n\t\tthis.name = this.constructor.name;\n\n\t\t// Capturing stack trace, excluding constructor call from it.\n\t\tError.captureStackTrace(this, this.constructor);\n\n\t\t// You can use any additional properties you want.\n\t\t// I'm going to use preferred HTTP status for this error types.\n\t\t// `500` is the default value if not specified.\n\t\tthis.failCode = failCode || 500;\n\t}\n}\n\nexport const Errors = {\n\titemNotFound: 'Item not found',\n\tinvalidParameter: 'Invalid/Missing parameter',\n\tinternalError: 'Guru Meditation',\n\tunauthorized: 'Unauthorized'\n};\n\nexport function InvalidParamError(msg?: string): ApiError {\n\treturn new ApiError(msg || Errors.invalidParameter, 400);\n}\n\nexport function NotFoundError(msg?: string): ApiError {\n\treturn new ApiError(msg || Errors.itemNotFound, 404);\n}\n\nexport function UnauthError(msg?: string): ApiError {\n\treturn new ApiError(msg || Errors.unauthorized, 401);\n}\n\nexport function GenericError(msg?: string): ApiError {\n\treturn new ApiError(msg || 'Guru Meditation', 500);\n}\n","module.exports = require(\"fs-extra\");","import {DatabaseQuery, DatabaseQuerySort} from '../../db/db.model';\nimport {DatabaseQuerySortType} from '../../model/jam-types';\nimport {SearchQuery} from './base.store';\n\nexport class QueryHelper {\n\tprivate q: DatabaseQuery = {};\n\n\tterm(field: string, value: string | number | boolean | undefined): void {\n\t\tif (value !== undefined && value !== null) {\n\t\t\tthis.q.term = this.q.term || {};\n\t\t\tthis.q.term[field] = value;\n\t\t}\n\t}\n\n\tmatch(field: string, value: string | undefined): void {\n\t\tif (value !== undefined && value !== null) {\n\t\t\tthis.q.match = this.q.match || {};\n\t\t\tthis.q.match[field] = value;\n\t\t}\n\t}\n\n\tstartsWith(field: string, value: string | undefined): void {\n\t\tif (value !== undefined && value !== null) {\n\t\t\tthis.q.startsWith = this.q.startsWith || {};\n\t\t\tthis.q.startsWith[field] = value;\n\t\t}\n\t}\n\n\tstartsWiths(field: string, value: Array<string> | undefined): void {\n\t\tif (value !== undefined && value !== null) {\n\t\t\tthis.q.startsWiths = this.q.startsWiths || {};\n\t\t\tthis.q.startsWiths[field] = value;\n\t\t}\n\t}\n\n\tterms(field: string, value: Array<string | number | boolean> | undefined): void {\n\t\tif (value !== undefined && value !== null) {\n\t\t\tthis.q.terms = this.q.terms || {};\n\t\t\tthis.q.terms[field] = value;\n\t\t}\n\t}\n\n\tbool(field: string, value: boolean | undefined): void {\n\t\tif (value !== undefined && value !== null) {\n\t\t\tthis.q.term = this.q.term || {};\n\t\t\tthis.q.term[field] = value;\n\t\t}\n\t}\n\n\tnotNull(field: string, value: boolean | undefined): void {\n\t\tif (value !== undefined && value !== null) {\n\t\t\tthis.q.notNull = this.q.notNull || [];\n\t\t\tthis.q.notNull.push(field);\n\t\t}\n\t}\n\n\trange(field: string, lte: number | undefined, gte: number | undefined): void {\n\t\tif (lte !== undefined || gte !== undefined) {\n\t\t\tthis.q.range = this.q.range || {};\n\t\t\tthis.q.range[field] = {gte, lte};\n\t\t}\n\t}\n\n\tget(query: SearchQuery, fieldMap?: { [name: string]: string }): DatabaseQuery {\n\t\tthis.terms('id', query.ids);\n\t\tthis.term('id', query.id);\n\t\tif (Object.keys(this.q).length === 0) {\n\t\t\tthis.q.all = true;\n\t\t}\n\t\tif (query.sorts && query.sorts.length > 0) {\n\t\t\tconst sorts: DatabaseQuerySort = {};\n\t\t\tquery.sorts.forEach(sort => {\n\t\t\t\tconst field = fieldMap ? fieldMap[sort.field] : undefined;\n\t\t\t\tif (field) {\n\t\t\t\t\tsorts[field] = sort.descending ? DatabaseQuerySortType.descending : DatabaseQuerySortType.ascending;\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.q.sort = sorts;\n\t\t}\n\t\tif (query.amount !== undefined && query.amount > 0) {\n\t\t\tthis.q.amount = query.amount;\n\t\t}\n\t\tif (query.offset !== undefined && query.offset > 0) {\n\t\t\tthis.q.offset = query.offset;\n\t\t}\n\t\treturn this.q;\n\t}\n}\n","import {Database, DatabaseIndex, DatabaseQuery} from '../../db/db.model';\nimport {DBObjectType} from '../../db/db.types';\nimport {DBObject} from './base.model';\nimport {ListResult} from './list-result';\n\nexport interface SearchQuery {\n\tid?: string;\n\tids?: Array<string>;\n\tquery?: string;\n\toffset?: number;\n\tamount?: number;\n\tsorts?: Array<SearchQuerySort<any>>;\n}\n\nexport interface SearchQuerySort<T> {\n\tfield: T;\n\tdescending: boolean;\n}\n\nexport abstract class BaseStore<T extends DBObject, X extends SearchQuery> {\n\tprotected client: DatabaseIndex<T>;\n\n\tprotected constructor(public type: DBObjectType, db: Database) {\n\t\tthis.client = db.getDBIndex<T>(type);\n\t}\n\n\tprotected abstract transformQuery(query: X): DatabaseQuery;\n\n\tasync exists(id: string): Promise<boolean> {\n\t\ttry {\n\t\t\tconst session = await this.byId(id);\n\t\t\treturn !!session;\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tasync clear(): Promise<void> {\n\t\tconst ids = await this.allIds();\n\t\tawait this.remove(ids);\n\t}\n\n\tasync getNewId(): Promise<string> {\n\t\treturn this.client.getNewId();\n\t}\n\n\tasync add(item: T): Promise<string> {\n\t\treturn this.client.add(item);\n\t}\n\n\tasync bulk(items: Array<T>): Promise<void> {\n\t\treturn this.client.bulk(items);\n\t}\n\n\tasync replace(item: T): Promise<void> {\n\t\treturn this.client.replace(item.id, item);\n\t}\n\n\tasync remove(idOrIds: string | Array<string>): Promise<number> {\n\t\treturn this.client.remove(idOrIds);\n\t}\n\n\tasync replaceMany(items: Array<T>): Promise<void> {\n\t\tfor (const item of items) {\n\t\t\tawait this.client.replace(item.id, item);\n\t\t}\n\t}\n\n\tasync byId(id: string): Promise<T | undefined> {\n\t\treturn this.client.byId(id);\n\t}\n\n\tasync byIds(ids: Array<string>): Promise<Array<T>> {\n\t\treturn this.client.byIds(ids);\n\t}\n\n\tasync random(): Promise<T | undefined> {\n\t\treturn this.client.queryOne({all: true});\n\t}\n\n\tasync all(): Promise<Array<T>> {\n\t\treturn (await this.client.query({all: true})).items;\n\t}\n\n\tasync allIds(): Promise<Array<string>> {\n\t\treturn this.client.queryIds({all: true});\n\t}\n\n\tasync count(): Promise<number> {\n\t\treturn this.client.count({all: true});\n\t}\n\n\tasync iterate(onItems: (items: Array<T>) => Promise<void>): Promise<void> {\n\t\tawait this.client.iterate({all: true}, onItems);\n\t}\n\n\tasync upsert(items: Array<T>): Promise<void> {\n\t\tfor (const item of items) {\n\t\t\tawait this.client.upsert(item.id, item);\n\t\t}\n\t}\n\n\tasync removeByQuery(query: X): Promise<number> {\n\t\treturn this.client.removeByQuery(this.transformQuery(query));\n\t}\n\n\tasync searchIDs(query: X): Promise<Array<string>> {\n\t\treturn this.client.queryIds(this.transformQuery(query));\n\t}\n\n\tasync search(query: X): Promise<ListResult<T>> {\n\t\treturn this.client.query(this.transformQuery(query));\n\t}\n\n\tasync searchOne(query: X): Promise<T | undefined> {\n\t\treturn this.client.queryOne(this.transformQuery(query));\n\t}\n\n\tasync searchCount(query: X): Promise<number> {\n\t\treturn this.client.count(this.transformQuery(query));\n\t}\n\n\tasync searchDistinct(query: X, field: string): Promise<Array<string>> {\n\t\treturn this.client.distinct(this.transformQuery(query), field);\n\t}\n\n}\n","import {ListResult} from '../engine/base/list-result';\n\nexport function paginate<T>(list: Array<T>, amount: number | undefined, offset: number | undefined): ListResult<T> {\n\tif (amount === undefined || amount < 0) {\n\t\treturn {items: list, total: list.length, amount, offset};\n\t}\n\toffset = offset || 0;\n\treturn {items: list.slice(offset, offset + amount), total: list.length, amount, offset};\n}\n","import {Jam} from '../../model/jam-rest-data';\nimport {State, States} from './state.model';\n\nexport function formatState(state?: State): Jam.State {\n\treturn {\n\t\tplayed: state && state.played > 0 ? state.played : undefined,\n\t\tlastplayed: state && state.lastplayed > 0 ? state.lastplayed : undefined,\n\t\tfaved: state ? state.faved : undefined,\n\t\trated: state && state.rated !== undefined && state.rated > 0 ? state.rated : undefined\n\t};\n}\n\nexport function formatStates(states: States): Jam.States {\n\tconst result: Jam.States = {};\n\tObject.keys(states).forEach(key => {\n\t\tresult[key] = formatState(states[key]);\n\t});\n\treturn result;\n}\n","import {DBObject} from './base.model';\nimport {BaseStore, SearchQuery} from './base.store';\n\nexport abstract class BaseStoreService<DBOBJECT extends DBObject, QUERY extends SearchQuery> {\n\n\tprotected constructor(public store: BaseStore<DBOBJECT, QUERY>) {\n\t}\n\n\tabstract defaultSort(items: Array<DBOBJECT>): Array<DBOBJECT>;\n\n}\n","import {JamRequest} from '../../api/jam/api';\nimport {InvalidParamError} from '../../api/jam/error';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {ApiBinaryResult} from '../../typings';\nimport {paginate} from '../../utils/paginate';\nimport {randomItems} from '../../utils/random';\nimport {DownloadService} from '../download/download.service';\nimport {ImageService} from '../image/image.service';\nimport {StateService} from '../state/state.service';\nimport {User} from '../user/user.model';\nimport {DBObject} from './base.model';\nimport {SearchQuery} from './base.store';\nimport {BaseListService} from './dbobject-list.service';\nimport {BaseController} from './dbobject.controller';\nimport {ListResult} from './list-result';\n\nexport abstract class BaseListController<OBJREQUEST extends JamParameters.ID | INCLUDE,\n\tOBJLISTREQUEST extends JamParameters.IDs | INCLUDE,\n\tINCLUDE,\n\tJAMQUERY extends SearchQuery,\n\tSEARCHQUERY extends JamParameters.SearchQuery | INCLUDE,\n\tDBOBJECT extends DBObject,\n\tRESULTOBJ extends { id: string },\n\tLISTQUERY extends JamParameters.List | INCLUDE | SEARCHQUERY>\n\textends BaseController<OBJREQUEST, OBJLISTREQUEST, INCLUDE, JAMQUERY, SEARCHQUERY, DBOBJECT, RESULTOBJ> {\n\n\tprotected constructor(\n\t\tpublic listService: BaseListService<DBOBJECT, JAMQUERY>,\n\t\tprotected stateService: StateService,\n\t\tprotected imageService: ImageService,\n\t\tprotected downloadService: DownloadService\n\t) {\n\t\tsuper(listService, stateService, imageService, downloadService);\n\t}\n\n\tprivate async getList(listQuery: JamParameters.List, jamquery: SEARCHQUERY, includes: INCLUDE, user: User): Promise<ListResult<RESULTOBJ>> {\n\t\tconst query = await this.translateQuery(jamquery, user);\n\t\tlet ids: Array<string> = [];\n\t\tlet total: number | undefined;\n\t\tswitch (listQuery.list) {\n\t\t\tcase 'random':\n\t\t\t\t// TODO: cache ids to avoid duplicates in random items pagination\n\t\t\t\tids = await this.listService.store.searchIDs({...query, amount: -1, offset: 0});\n\t\t\t\tlistQuery.amount = listQuery.amount || 20;\n\t\t\t\ttotal = ids.length;\n\t\t\t\tids = randomItems<string>(ids, listQuery.amount || 20);\n\t\t\t\tbreak;\n\t\t\tcase 'highest':\n\t\t\t\tids = await this.listService.getHighestRatedIDs(query, user);\n\t\t\t\ttotal = ids.length;\n\t\t\t\tids = paginate(ids, listQuery.amount, listQuery.offset).items;\n\t\t\t\tbreak;\n\t\t\tcase 'avghighest':\n\t\t\t\tids = await this.listService.getAvgHighestIDs(query);\n\t\t\t\ttotal = ids.length;\n\t\t\t\tids = paginate(ids, listQuery.amount, listQuery.offset).items;\n\t\t\t\tbreak;\n\t\t\tcase 'frequent':\n\t\t\t\tids = await this.listService.getFrequentlyPlayedIDs(query, user);\n\t\t\t\ttotal = ids.length;\n\t\t\t\tids = paginate(ids, listQuery.amount, listQuery.offset).items;\n\t\t\t\tbreak;\n\t\t\tcase 'faved':\n\t\t\t\tids = await this.listService.getFavedIDs(query, user);\n\t\t\t\ttotal = ids.length;\n\t\t\t\tids = paginate(ids, listQuery.amount, listQuery.offset).items;\n\t\t\t\tbreak;\n\t\t\tcase 'recent':\n\t\t\t\tids = await this.listService.getRecentlyPlayedIDs(query, user);\n\t\t\t\ttotal = ids.length;\n\t\t\t\tids = paginate(ids, listQuery.amount, listQuery.offset).items;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn Promise.reject(InvalidParamError('Unknown List Type'));\n\t\t}\n\t\tconst result = await this.prepareListByIDs(ids, includes, user);\n\t\treturn {\n\t\t\ttotal,\n\t\t\toffset: listQuery.offset,\n\t\t\tamount: listQuery.amount,\n\t\t\titems: result\n\t\t};\n\t}\n\n\tasync list(req: JamRequest<LISTQUERY>): Promise<ListResult<RESULTOBJ>> {\n\t\treturn this.getList(req.query as JamParameters.List, req.query as SEARCHQUERY, req.query as INCLUDE, req.user);\n\t}\n\n\tasync download(req: JamRequest<JamParameters.Download>): Promise<ApiBinaryResult> {\n\t\tconst item = await this.byID(req.query.id);\n\t\treturn this.downloadService.getObjDownload(item, req.query.format, req.user);\n\t}\n}\n","import {StateService} from '../state/state.service';\nimport {User} from '../user/user.model';\nimport {DBObject} from './base.model';\nimport {BaseStoreService} from './base.service';\nimport {BaseStore, SearchQuery} from './base.store';\n\nexport abstract class BaseListService<T extends DBObject, Q extends SearchQuery> extends BaseStoreService<T, Q> {\n\n\tprotected constructor(\n\t\tstore: BaseStore<T, Q>,\n\t\tpublic stateService: StateService\n\t) {\n\t\tsuper(store);\n\t}\n\n\tasync getFilteredIDs(ids: Array<string>, query: Q): Promise<Array<string>> {\n\t\tconst list = await this.store.searchIDs({...query, ids, amount: -1, offset: 0});\n\t\treturn list.sort((a, b) => {\n\t\t\treturn ids.indexOf(a) - ids.indexOf(b);\n\t\t});\n\t}\n\n\tasync getAvgHighestIDs(query: Q): Promise<Array<string>> {\n\t\tconst ids = await this.stateService.getAvgHighestDestIDs(this.store.type);\n\t\treturn this.getFilteredIDs(ids, query);\n\t}\n\n\tasync getHighestRatedIDs(query: Q, user: User): Promise<Array<string>> {\n\t\tconst ids = await this.stateService.getHighestRatedDestIDs(this.store.type, user.id);\n\t\treturn this.getFilteredIDs(ids, query);\n\t}\n\n\tasync getFrequentlyPlayedIDs(query: Q, user: User): Promise<Array<string>> {\n\t\tconst ids = await this.stateService.getFrequentlyPlayedDestIDs(this.store.type, user.id);\n\t\treturn this.getFilteredIDs(ids, query);\n\t}\n\n\tasync getFavedIDs(query: Q, user: User): Promise<Array<string>> {\n\t\tconst ids = await this.stateService.getFavedDestIDs(this.store.type, user.id);\n\t\treturn this.getFilteredIDs(ids, query);\n\t}\n\n\tasync getRecentlyPlayedIDs(query: Q, user: User): Promise<Array<string>> {\n\t\tconst ids = await this.stateService.getRecentlyPlayedDestIDs(this.store.type, user.id);\n\t\treturn this.getFilteredIDs(ids, query);\n\t}\n\n}\n","module.exports = require(\"moment\");","import crypto from 'crypto';\n\nexport function shuffle<T>(list: Array<T>): Array<T> {\n\tfor (let i = list.length - 1; i > 0; i--) {\n\t\tconst j = Math.floor(Math.random() * (i + 1));\n\t\t[list[i], list[j]] = [list[j], list[i]];\n\t}\n\treturn list;\n}\n\nexport function randomInt(min: number, max: number): number {\n\treturn Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function randomItem<T>(list: Array<T>): T {\n\tconst i = randomInt(0, list.length - 1);\n\treturn list[i];\n}\n\nexport function randomItems<T>(list: Array<T>, amount?: number): Array<T> {\n\tif (amount === undefined || amount < 0 || list.length <= amount) {\n\t\treturn shuffle<T>(list);\n\t}\n\tconst result: Array<T> = [];\n\tconst done: Array<number> = [];\n\twhile ((result.length < amount)) {\n\t\tconst i = randomInt(0, list.length - 1);\n\t\tif (!done.includes(i)) {\n\t\t\tresult.push(list[i]);\n\t\t\tdone.push(i);\n\t\t}\n\t}\n\treturn result;\n}\n\nexport function randomString(length: number): string {\n\treturn crypto.randomBytes(Math.ceil(length / 2))\n\t\t.toString('hex') /** convert to hexadecimal format */\n\t\t.slice(0, length);   /** return required number of characters */\n}\n","import express from 'express';\nimport JamOpenApi from '../../model/jam-openapi.json';\nimport {OpenAPIObject} from '../../model/openapi-spec';\nimport {checkOpenApiParameters} from '../../utils/openapi-parameters-check';\nimport {InvalidParamError} from './error';\nimport {ApiResponder} from './response';\n\nfunction extendOpenApi(): void {\n\tconst pathParameterPath = {\n\t\tget: {\n\t\t\tparameters: [\n\t\t\t\t{\n\t\t\t\t\tin: 'path',\n\t\t\t\t\tname: 'pathParameter',\n\t\t\t\t\tschema: {\n\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t},\n\t\t\t\t\trequired: true\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t};\n\tconst paths = (JamOpenApi.paths as any);\n\tpaths['image/{pathParameter}'] = pathParameterPath;\n\tpaths['download/{pathParameter}'] = pathParameterPath;\n\tpaths['waveform/{pathParameter}'] = pathParameterPath;\n\tpaths['waveform_svg/{pathParameter}'] = pathParameterPath;\n\tpaths['stream/{pathParameter}'] = pathParameterPath;\n}\n\nextendOpenApi();\n\nasync function check(name: string, req: express.Request): Promise<void> {\n\tawait checkOpenApiParameters(name, req, JamOpenApi as OpenAPIObject);\n}\n\nexport function apiCheck(name: string): express.RequestHandler {\n\tfunction CheckApiParametersHandler(req: express.Request, res: express.Response, next: express.NextFunction): void {\n\t\tcheck(name, req)\n\t\t\t.then(() => {\n\t\t\t\tnext();\n\t\t\t}).catch(e => {\n\t\t\t// console.log(e.message);\n\t\t\tApiResponder.error(req, res, InvalidParamError(e.message));\n\t\t});\n\t}\n\n\treturn CheckApiParametersHandler;\n}\n\nexport interface IDFormat {\n\tid: string;\n\tformat?: string;\n}\n\nexport async function validatePathParameterIDFormat(pathParameter: string, validFormats: Array<string>, defaultFormat: string | undefined): Promise<IDFormat> {\n\tconst p = (pathParameter || '').trim();\n\tif (!p || p.length === 0) {\n\t\treturn Promise.reject(InvalidParamError());\n\t}\n\tconst split = p.split('.');\n\tconst id = split[0];\n\tif (!id || id.length === 0) {\n\t\treturn Promise.reject(InvalidParamError());\n\t}\n\tconst format = split[1] !== undefined ? split[1] : defaultFormat;\n\tif (format !== undefined && !validFormats.includes(format)) {\n\t\treturn Promise.reject(InvalidParamError());\n\t}\n\treturn {id, format};\n}\n\n// tslint:disable-next-line:interface-name\nexport interface IDSizeFormat {\n\tid: string;\n\tsize?: number;\n\tformat?: string;\n}\n\nexport async function validatePathParameterIDSizeFormat(\n\tpathParameter: string, validFormats: Array<string>,\n\tdefaultFormat: string | undefined, minSize: number, maxSize: number): Promise<IDSizeFormat> {\n\tconst {id, format} = await validatePathParameterIDFormat(pathParameter, validFormats, defaultFormat);\n\tconst idsplit = id.split('-');\n\tconst iid = idsplit[0];\n\tif (!iid || iid.length === 0) {\n\t\treturn Promise.reject(InvalidParamError());\n\t}\n\tconst size = idsplit[1] !== undefined ? Number(idsplit[1]) : undefined;\n\tif (size !== undefined) {\n\t\tif (isNaN(size)) {\n\t\t\treturn Promise.reject(InvalidParamError('parameter is not a number'));\n\t\t}\n\t\tif (size < minSize || size > maxSize) {\n\t\t\treturn Promise.reject(InvalidParamError('parameter number not in allowed range'));\n\t\t}\n\t}\n\treturn {id: iid, format, size};\n}\n","import {AudioFormatType, FileTyp} from '../model/jam-types';\nimport {fileSuffix} from './fs-utils';\n\n// TODO: 'bmp' is not supported by sharp, preconvert with jimp?\nexport const SupportedReadImageFormat = ['png', 'jpeg', 'jpg', 'gif', 'tiff'];\nexport const SupportedWriteImageFormat = ['png', 'jpeg', 'jpg', 'tiff'];\n\nexport const SupportedAudioFormat: Array<AudioFormatType> = [\n\tAudioFormatType.mp3,\n\tAudioFormatType.flac,\n\tAudioFormatType.m4a,\n\tAudioFormatType.mp4,\n\tAudioFormatType.ogg,\n\tAudioFormatType.oga,\n\tAudioFormatType.webma,\n\tAudioFormatType.wav\n];\nexport const SupportedTranscodeAudioFormat: Array<AudioFormatType> = [\n\tAudioFormatType.mp3,\n\tAudioFormatType.flv,\n\tAudioFormatType.ogg,\n\tAudioFormatType.oga,\n\tAudioFormatType.flac,\n\tAudioFormatType.m4a\n];\n\nexport function getFileType(filename: string): FileTyp {\n\tconst suffix = fileSuffix(filename);\n\tif (SupportedReadImageFormat.includes(suffix)) {\n\t\treturn FileTyp.IMAGE;\n\t}\n\tif (SupportedAudioFormat.includes(suffix as AudioFormatType)) {\n\t\treturn FileTyp.AUDIO;\n\t}\n\tif (['tag'].includes(suffix)) {\n\t\treturn FileTyp.TAG;\n\t}\n\tif (['bak'].includes(suffix)) {\n\t\treturn FileTyp.BACKUP;\n\t}\n\treturn FileTyp.OTHER;\n}\n","import rateLimiter from 'limiter';\nimport request from 'request';\n\nexport class WebserviceClient {\n\tenabled = false;\n\tprivate readonly limiter: rateLimiter.RateLimiter;\n\tprivate readonly userAgent: string;\n\n\tconstructor(requestPerInterval: number, requestIntervalMS: number, userAgent: string) {\n\t\tthis.limiter = new rateLimiter.RateLimiter(requestPerInterval, requestIntervalMS);\n\t\tthis.userAgent = userAgent;\n\t}\n\n\tprotected async parseResult<T>(response: request.Response, body: any): Promise<T> {\n\t\tif (response.statusCode === 404) {\n\t\t\treturn Promise.reject(Error(`${response.statusCode} ${response.statusMessage || ''}`));\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(JSON.parse(body) as T);\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err);\n\t\t}\n\t}\n\n\tprotected async getJson<T>(url: string, parameters?: object | undefined): Promise<T> {\n\t\tif (!this.enabled) {\n\t\t\treturn Promise.reject(Error('External service is disabled'));\n\t\t}\n\t\tconst options: request.Options = {\n\t\t\turl,\n\t\t\theaders: {'User-Agent': this.userAgent},\n\t\t\tqs: parameters,\n\t\t\ttimeout: 20000\n\t\t};\n\t\tconst limiter = this.limiter;\n\t\treturn new Promise<T>((resolve, reject) => {\n\t\t\tlimiter.removeTokens(1, () => {\n\t\t\t\trequest(options, (err, response, body) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.parseResult<T>(response, body)\n\t\t\t\t\t\t\t.then(resolve).catch(reject);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n}\n","import PQueue from 'p-queue';\n\nexport async function processQueue<T>(concurrent: number, list: Array<T>, process: (item: T) => Promise<void>): Promise<void> {\n\tif (list.length === 0) {\n\t\treturn;\n\t}\n\tconst q = new PQueue({concurrency: 10});\n\t// console.log('start');\n\tfor (const item of list) {\n\t\t// console.log(folder.dir, 'add');\n\t\tq.add(async () => {\n\t\t\tawait process(item);\n\t\t}).then(() => {\n\t\t\t// console.log(folder.dir, 'added');\n\t\t});\n\t}\n\tawait q.onIdle();\n}\n","import crypto from 'crypto';\nimport {randomString} from './random';\n\nfunction generateSalt16(): string {\n\treturn randomString(16);\n}\n\nexport function hashSaltSHA512(s: string, salt: string): string {\n\t/** Hashing algorithm sha512 */\n\tconst hash = crypto.createHmac('sha512', salt);\n\thash.update(s);\n\treturn hash.digest('hex');\n}\n\nexport function hashAndSaltSHA512(s: string): { salt: string; hash: string } {\n\tconst salt = generateSalt16();\n\treturn {salt, hash: hashSaltSHA512(s, salt)};\n}\n\nexport function hashMD5(s: string): string {\n\treturn crypto.createHash('md5').update(s).digest('hex');\n}\n","import {JamRequest} from '../../api/jam/api';\nimport {InvalidParamError, NotFoundError} from '../../api/jam/error';\nimport {Jam} from '../../model/jam-rest-data';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {ApiBinaryResult} from '../../typings';\nimport {DownloadService} from '../download/download.service';\nimport {ImageService} from '../image/image.service';\nimport {formatState, formatStates} from '../state/state.format';\nimport {StateService} from '../state/state.service';\nimport {User} from '../user/user.model';\nimport {DBObject} from './base.model';\nimport {BaseStoreService} from './base.service';\nimport {SearchQuery} from './base.store';\nimport {ListResult} from './list-result';\n\nexport abstract class BaseController<OBJREQUEST extends JamParameters.ID | INCLUDE,\n\tOBJLISTREQUEST extends JamParameters.IDs | INCLUDE,\n\tINCLUDE,\n\tJAMQUERY extends SearchQuery,\n\tSEARCHQUERY extends JamParameters.SearchQuery | INCLUDE,\n\tDBOBJECT extends DBObject,\n\tRESULTOBJ extends { id: string }> {\n\n\tprotected constructor(\n\t\tpublic service: BaseStoreService<DBOBJECT, JAMQUERY>,\n\t\tprotected stateService: StateService,\n\t\tprotected imageService: ImageService,\n\t\tprotected downloadService: DownloadService\n\t) {\n\t}\n\n\tabstract async prepare(item: DBOBJECT, includes: INCLUDE, user: User): Promise<RESULTOBJ>;\n\n\tabstract translateQuery(query: SEARCHQUERY, user: User): Promise<JAMQUERY>;\n\n\tasync byID(id?: string): Promise<DBOBJECT> {\n\t\tif (!id) {\n\t\t\treturn Promise.reject(InvalidParamError());\n\t\t}\n\t\tconst obj = await this.service.store.byId(id);\n\t\tif (!obj) {\n\t\t\treturn Promise.reject(NotFoundError());\n\t\t}\n\t\treturn obj;\n\t}\n\n\tasync byIDs(ids: Array<string>): Promise<Array<DBOBJECT>> {\n\t\tif (!ids) {\n\t\t\treturn Promise.reject(InvalidParamError());\n\t\t}\n\t\treturn this.service.store.byIds(ids);\n\t}\n\n\tasync prepareList(list: Array<DBOBJECT>, includes: INCLUDE, user: User, sort?: (a: DBOBJECT, b: DBOBJECT) => number): Promise<Array<RESULTOBJ>> {\n\t\tconst items: Array<RESULTOBJ> = [];\n\t\tif (sort) {\n\t\t\tlist = list.sort(sort);\n\t\t}\n\t\tfor (const item of list) {\n\t\t\tconst r = await this.prepare(item, includes, user);\n\t\t\titems.push(r);\n\t\t}\n\t\treturn items;\n\t}\n\n\tasync prepareListByIDs(ids: Array<string>, includes: INCLUDE, user: User, sort?: (a: DBOBJECT, b: DBOBJECT) => number): Promise<Array<RESULTOBJ>> {\n\t\tconst list = await this.service.store.byIds(ids);\n\t\tlet result = await this.prepareList(list, includes, user, sort);\n\t\tif (!sort) {\n\t\t\tresult = result.sort((a, b) => ids.indexOf(a.id) - ids.indexOf(b.id));\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync prepareByID(id: string, includes: INCLUDE, user: User): Promise<RESULTOBJ> {\n\t\tconst o = await this.byID(id);\n\t\treturn this.prepare(o, includes, user);\n\t}\n\n\tasync prepareByQuery(query: JAMQUERY, includes: INCLUDE, user: User): Promise<ListResult<RESULTOBJ>> {\n\t\tconst list = await this.service.store.search(query);\n\t\tlist.items = this.service.defaultSort(list.items);\n\t\treturn {\n\t\t\ttotal: list.total,\n\t\t\tamount: list.amount,\n\t\t\toffset: list.offset,\n\t\t\titems: await this.prepareList(list.items, includes, user)\n\t\t};\n\t}\n\n\tasync id(req: JamRequest<OBJREQUEST>): Promise<RESULTOBJ> {\n\t\treturn this.prepareByID((req.query as JamParameters.ID).id, req.query as INCLUDE, req.user);\n\t}\n\n\tasync ids(req: JamRequest<OBJLISTREQUEST>): Promise<Array<RESULTOBJ>> {\n\t\tconst items = await this.byIDs((req.query as JamParameters.IDs).ids);\n\t\treturn this.prepareList(items, req.query as INCLUDE, req.user);\n\t}\n\n\tasync state(req: JamRequest<JamParameters.ID>): Promise<Jam.State> {\n\t\tconst item = await this.byID(req.query.id);\n\t\tconst state = await this.stateService.findOrCreate(item.id, req.user.id, this.service.store.type);\n\t\treturn formatState(state);\n\t}\n\n\tasync states(req: JamRequest<JamParameters.IDs>): Promise<Jam.States> {\n\t\tconst list = await this.byIDs(req.query.ids);\n\t\tconst states = await this.stateService.findOrCreateMany(list.map(item => item.id), req.user.id, this.service.store.type);\n\t\treturn formatStates(states);\n\t}\n\n\tasync favUpdate(req: JamRequest<JamParameters.Fav>): Promise<Jam.State> {\n\t\tconst item = await this.byID(req.query.id);\n\t\tconst state = await this.stateService.fav(item.id, this.service.store.type, req.user.id, req.query.remove ? req.query.remove : false);\n\t\treturn formatState(state);\n\t}\n\n\tasync rateUpdate(req: JamRequest<JamParameters.Rate>): Promise<Jam.State> {\n\t\tconst rating = req.query.rating || 0;\n\t\tif ((rating < 0) || (rating > 5)) {\n\t\t\treturn Promise.reject(InvalidParamError());\n\t\t}\n\t\tconst item = await this.byID(req.query.id);\n\t\tconst state = await this.stateService.rate(item.id, this.service.store.type, req.user.id, rating);\n\t\treturn formatState(state);\n\t}\n\n\tasync search(req: JamRequest<SEARCHQUERY>): Promise<ListResult<RESULTOBJ>> {\n\t\tconst list = await this.service.store.search(await this.translateQuery(req.query, req.user));\n\t\treturn {\n\t\t\ttotal: list.total,\n\t\t\tamount: list.amount,\n\t\t\toffset: list.offset,\n\t\t\titems: await this.prepareList(list.items, req.query as INCLUDE, req.user)\n\t\t};\n\t}\n\n\tasync image(req: JamRequest<JamParameters.Image>): Promise<ApiBinaryResult> {\n\t\tconst item = await this.byID(req.query.id);\n\t\treturn this.imageService.getObjImage(item, req.query.size, req.query.format);\n\t}\n\n}\n","import {Jam} from '../../model/jam-rest-data';\nimport {AlbumIndex, ArtistIndex, FolderIndex, SeriesIndex} from './index.model';\n\nexport function formatSeriesIndex(index: SeriesIndex): Jam.SeriesIndex {\n\treturn {\n\t\tlastModified: index.lastModified,\n\t\tgroups: index.groups.map(i => ({\n\t\t\tname: i.name,\n\t\t\tentries: i.entries.map(e => {\n\t\t\t\treturn {\n\t\t\t\t\tname: e.series.name,\n\t\t\t\t\ttrackCount: e.series.trackIDs.length,\n\t\t\t\t\talbumCount: e.series.albumIDs.length,\n\t\t\t\t\tseriesID: e.series.id\n\t\t\t\t};\n\t\t\t})\n\t\t}))\n\t};\n}\n\nexport function formatArtistIndex(index: ArtistIndex): Jam.ArtistIndex {\n\treturn {\n\t\tlastModified: index.lastModified,\n\t\tgroups: index.groups.map(i => ({\n\t\t\tname: i.name,\n\t\t\tentries: i.entries.map(e => {\n\t\t\t\treturn {\n\t\t\t\t\tname: e.artist.name,\n\t\t\t\t\ttrackCount: e.artist.trackIDs.length,\n\t\t\t\t\talbumCount: e.artist.albumIDs.length,\n\t\t\t\t\tartistID: e.artist.id\n\t\t\t\t};\n\t\t\t})\n\t\t}))\n\t};\n}\n\nexport function formatFolderIndex(index: FolderIndex): Jam.FolderIndex {\n\treturn {\n\t\tlastModified: index.lastModified,\n\t\tgroups: index.groups.map(i => ({\n\t\t\tname: i.name,\n\t\t\tentries: i.entries.map(e => {\n\t\t\t\treturn {\n\t\t\t\t\tname: e.name,\n\t\t\t\t\ttrackCount: e.trackCount,\n\t\t\t\t\tfolderID: e.folder.id\n\t\t\t\t};\n\t\t\t})\n\t\t}))\n\t};\n}\n\nexport function formatAlbumIndex(index: AlbumIndex): Jam.AlbumIndex {\n\treturn {\n\t\tlastModified: index.lastModified,\n\t\tgroups: index.groups.map(i => ({\n\t\t\tname: i.name,\n\t\t\tentries: i.entries.map(e => {\n\t\t\t\treturn {\n\t\t\t\t\tid: e.album.id,\n\t\t\t\t\tname: e.album.name,\n\t\t\t\t\tartist: e.album.artist || '',\n\t\t\t\t\tartistID: e.album.artistID,\n\t\t\t\t\ttrackCount: e.album.trackIDs.length\n\t\t\t\t};\n\t\t\t})\n\t\t}))\n\t};\n}\n","import express from 'express';\nimport {ApiBinaryResult, NodeError} from '../../typings';\nimport {ApiBaseResponder} from '../response';\n\nexport class ApiResponder {\n\n\tpublic static ok(req: express.Request, res: express.Response): void {\n\t\tApiBaseResponder.sendJSON(req, res, {});\n\t}\n\n\tpublic static data(req: express.Request, res: express.Response, data: any): void {\n\t\tApiBaseResponder.sendJSON(req, res, data);\n\t}\n\n\tpublic static error(req: express.Request, res: express.Response, err: NodeError): void {\n\t\tApiBaseResponder.sendError(req, res, err);\n\t}\n\n\tpublic static binary(req: express.Request, res: express.Response, data: ApiBinaryResult): void {\n\t\tApiBaseResponder.sendBinary(req, res, data);\n\t}\n}\n","module.exports = require(\"jamp3\");","module.exports = require(\"fs\");","export class DebouncePromises<T> {\n\tprivate pendingPromises = new Map<string, Array<(err: Error | null, result?: T) => void>>();\n\n\tprivate getPendingArray(id: string): Array<(err: Error | null, result?: T) => void> {\n\t\treturn this.pendingPromises.get(id) || [];\n\t}\n\n\tasync append(id: string): Promise<T> {\n\t\treturn new Promise<T>((resolve, reject) => {\n\t\t\tconst run = (err: Error | null, result?: T): void => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.pendingPromises.set(id, this.getPendingArray(id).concat([run]));\n\t\t});\n\t}\n\n\tsetPending(id: string): void {\n\t\tthis.pendingPromises.set(id, []);\n\t}\n\n\tisPending(id: string): boolean {\n\t\treturn !!this.pendingPromises.get(id);\n\t}\n\n\tresolve(id: string, result: T): void {\n\t\tconst pending = this.getPendingArray(id);\n\t\tthis.pendingPromises.delete(id);\n\t\tfor (const cb of pending) {\n\t\t\tcb(null, result);\n\t\t}\n\t}\n\n\treject(id: string, error: Error): void {\n\t\tconst pending = this.getPendingArray(id);\n\t\tthis.pendingPromises.delete(id);\n\t\tfor (const cb of pending) {\n\t\t\tcb(error);\n\t\t}\n\t}\n\n}\n","export function slugify(s: string): string {\n\treturn s.replace(/[[\\]. -]/g, '').toLowerCase();\n}\n","import {Jam} from '../../model/jam-rest-data';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {Track, TrackTag} from './track.model';\n\nexport function formatTrackTag(tag: TrackTag): Jam.TrackTag {\n\treturn {\n\t\ttrackNr: tag.track,\n\t\tdisc: tag.discTotal !== undefined && tag.discTotal > 1 ? tag.disc : undefined,\n\t\tyear: tag.year,\n\t\ttitle: tag.title,\n\t\tartist: tag.artist,\n\t\talbum: tag.album,\n\t\tgenre: tag.genre,\n\t\tmbRecordingID: tag.mbRecordingID,\n\t\tmbReleaseTrackID: tag.mbReleaseTrackID,\n\t\tmbReleaseGroupID: tag.mbReleaseGroupID,\n\t\tmbTrackID: tag.mbTrackID,\n\t\tmbArtistID: tag.mbArtistID,\n\t\tmbReleaseID: tag.mbReleaseID\n\t};\n}\n\nexport function formatTrack(track: Track, includes: JamParameters.IncludesTrack): Jam.Track {\n\tincludes = includes || {};\n\treturn {\n\t\tid: track.id,\n\t\tparentID: track.parentID,\n\t\tartistID: track.artistID,\n\t\tseriesID: track.seriesID,\n\t\talbumArtistID: track.albumArtistID,\n\t\talbumID: track.albumID,\n\t\tname: track.name,\n\t\tcreated: track.stat.created,\n\t\tduration: track.media.duration || -1,\n\t\tmedia: includes.trackMedia ? {\n\t\t\tbitRate: track.media.bitRate,\n\t\t\tformat: track.media.format || '',\n\t\t\tchannels: track.media.channels,\n\t\t\tsampleRate: track.media.sampleRate,\n\t\t\tsize: track.stat.size\n\t\t} : undefined,\n\t\ttag: includes.trackTag ? formatTrackTag(track.tag) : undefined\n\t};\n}\n","import path from 'path';\nimport {Jam} from '../../model/jam-rest-data';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {ArtworkImageType, cUnknownAlbum, cUnknownArtist, FolderType, FolderTypesAlbum} from '../../model/jam-types';\nimport {Artwork, Folder} from './folder.model';\n\nexport function formatFolderArtwork(artwork: Artwork): Jam.ArtworkImage {\n\treturn {\n\t\tid: artwork.id,\n\t\tname: artwork.name,\n\t\ttypes: artwork.types,\n\t\tformat: artwork.image ? artwork.image.format : undefined,\n\t\theight: artwork.image ? artwork.image.height : undefined,\n\t\twidth: artwork.image ? artwork.image.width : undefined,\n\t\tsize: artwork.stat.size\n\t};\n}\n\nexport function formatFolderArtworks(folder: Folder): Array<Jam.ArtworkImage> {\n\tif (!folder.tag.artworks) {\n\t\treturn [];\n\t}\n\treturn folder.tag.artworks.map(formatFolderArtwork);\n}\n\nfunction formatFolderTag(folder: Folder): Jam.FolderTag {\n\tconst isAlbum = FolderTypesAlbum.includes(folder.tag.type);\n\tconst isArtist = folder.tag.type === FolderType.artist;\n\treturn {\n\t\tartist: isAlbum || isArtist ? (folder.tag.artist || cUnknownArtist) : undefined,\n\t\tartistSort: isAlbum || isArtist ? folder.tag.artistSort : undefined,\n\t\talbum: isAlbum ? (folder.tag.album || cUnknownAlbum) : undefined,\n\t\talbumType: isAlbum ? folder.tag.albumType : undefined,\n\t\tgenres: folder.tag.genres,\n\t\tmbArtistID: isArtist || isAlbum ? folder.tag.mbArtistID : undefined,\n\t\tmbReleaseID: isAlbum ? folder.tag.mbReleaseID : undefined,\n\t\tmbReleaseGroupID: isAlbum ? folder.tag.mbReleaseGroupID : undefined,\n\t\tyear: isAlbum ? folder.tag.year : undefined\n\t};\n}\n\nexport function formatFolder(folder: Folder, includes: JamParameters.IncludesFolder): Jam.Folder {\n\tincludes = includes || {};\n\treturn {\n\t\tid: folder.id,\n\t\tlevel: folder.tag ? folder.tag.level : -1,\n\t\tparentID: folder.parentID,\n\t\tname: path.basename(folder.path),\n\t\tcreated: folder.stat.created,\n\t\ttrackCount: includes.folderCounts ? folder.tag.trackCount : undefined,\n\t\tfolderCount: includes.folderCounts ? folder.tag.folderCount : undefined,\n\t\ttype: ((folder.tag.type !== undefined) ? (FolderType[folder.tag.type] || 'unknown') : 'unknown') as Jam.FolderType,\n\t\ttag: includes.folderTag ? formatFolderTag(folder) : undefined,\n\t\tartworks: includes.folderArtworks ? formatFolderArtworks(folder) : undefined\n\t};\n}\n\nexport function artWorkImageNameToType(name: string): Array<ArtworkImageType> {\n\tconst lname = name.toLowerCase();\n\tconst types: Array<ArtworkImageType> = [];\n\tfor (const t in ArtworkImageType) {\n\t\tif (!Number(t) && lname.includes(t)) {\n\t\t\ttypes.push(t as ArtworkImageType);\n\t\t}\n\t}\n\tif ((!types.includes(ArtworkImageType.front)) && (lname.includes('cover') || lname.includes('folder'))) {\n\t\ttypes.push(ArtworkImageType.front);\n\t}\n\tif (types.length === 0) {\n\t\ttypes.push(ArtworkImageType.other);\n\t}\n\ttypes.sort((a, b) => a.localeCompare(b));\n\treturn types;\n}\n","export const JAMAPI_VERSION = '0.1.14';\nexport const JAMAPI_URL_VERSION = 'v1';\n","import {Jam} from '../../model/jam-rest-data';\nimport {User, UserRoles} from './user.model';\n\nfunction formatRoles(roles: UserRoles): Jam.Roles {\n\treturn {\n\t\tstream: roles.stream ? true : undefined,\n\t\tupload: roles.upload ? true : undefined,\n\t\tadmin: roles.admin ? true : undefined,\n\t\tpodcast: roles.podcast ? true : undefined\n\t};\n}\n\nexport function formatUser(user: User): Jam.User {\n\treturn {\n\t\tid: user.id,\n\t\tcreated: user.created,\n\t\tname: user.name,\n\t\temail: user.email,\n\t\troles: formatRoles(user.roles)\n\t};\n}\n\nexport function formatSessionUser(user: User): Jam.SessionUser {\n\treturn {\n\t\tid: user.id,\n\t\tcreated: user.created,\n\t\tname: user.name,\n\t\troles: formatRoles(user.roles)\n\t};\n}\n","import {ID3v2, ID3V24TagBuilder, IID3V2, ITagID} from 'jamp3';\nimport moment from 'moment';\nimport {TrackTag} from '../../engine/track/track.model';\nimport {ID3v2Frames} from '../../model/id3v2-frames';\nimport {Jam} from '../../model/jam-rest-data';\nimport {ImageModule} from '../image/image.module';\nimport {FlacInfo} from './formats/flac';\nimport {MetaDataBlockPicture} from './formats/flac/lib/block.picture';\nimport {BlockVorbiscomment} from './formats/flac/lib/block.vorbiscomment';\nimport {MetaWriteableDataBlock} from './formats/flac/lib/block.writeable';\n\nfunction prepareFrame(frame: ID3v2Frames.Frame): void {\n\tif (frame && frame.value && (frame as ID3v2Frames.Bin).value.bin) {\n\t\tconst binValue = frame.value as any;\n\t\tbinValue.bin = binValue.bin.toString('base64');\n\t}\n\tif (frame && frame.subframes) {\n\t\tframe.subframes.forEach(prepareFrame);\n\t}\n}\n\nexport function prepareResponseTag(tag: Jam.RawTag): void {\n\tObject.keys(tag.frames).forEach(key => {\n\t\tconst frames = tag.frames[key];\n\t\tif (frames) {\n\t\t\tframes.forEach(prepareFrame);\n\t\t}\n\t});\n}\n\nexport async function flacToRawTag(flacInfo: FlacInfo): Promise<Jam.RawTag | undefined> {\n\tif (!flacInfo || !flacInfo.comment || !flacInfo.comment.tag) {\n\t\treturn;\n\t}\n\tconst simple = flacInfo.comment.tag;\n\tconst builder = new ID3V24TagBuilder('utf8');\n\tbuilder\n\t\t.album(simple.ALBUM)\n\t\t.albumSort(simple.ALBUMSORT)\n\t\t.originalAlbum(simple.ORIGINALALBUM)\n\t\t.originalArtist(simple.ORIGINALARTIST)\n\t\t.originalDate(simple.ORIGINALDATE)\n\t\t.title(simple.TITLE)\n\t\t.titleSort(simple.TITLESORT)\n\t\t.work(simple.WORK)\n\t\t.artist(simple.ARTIST)\n\t\t.artistSort(simple.ARTISTSORT)\n\t\t.albumArtist(simple.ALBUMARTIST)\n\t\t.albumArtistSort(simple.ALBUMARTISTSORT)\n\t\t.artists(simple.ARTISTS)\n\t\t.isCompilation(simple.COMPILATION)\n\t\t.grouping(simple.GROUPING)\n\t\t.date(simple.DATE)\n\t\t.composer(simple.COMPOSER)\n\t\t.composerSort(simple.COMPOSER)\n\t\t.remixer(simple.REMIXER)\n\t\t.label(simple.LABEL)\n\t\t.subtitle(simple.SUBTITLE)\n\t\t.discSubtitle(simple.DISCSUBTITLE)\n\t\t.lyricist(simple.LYRICIST)\n\t\t.genre(simple.GENRE)\n\t\t.bpm(simple.BPM)\n\t\t.mood(simple.MOOD)\n\t\t.lyrics(simple.LYRICS)\n\t\t.mediaType(simple.MEDIA)\n\t\t.language(simple.LANGUAGE)\n\t\t.encoder(simple.ENCODEDBY || simple['ENCODED-BY'])\n\t\t.encoderSettings(simple.ENCODERSETTINGS)\n\t\t.initialKey(simple.KEY)\n\t\t.copyright(simple.COPYRIGHT)\n\t\t.isrc(simple.ISRC)\n\t\t.barcode(simple.BARCODE)\n\t\t.asin(simple.ASIN)\n\t\t.catalogNumber(simple.CATALOGNUMBER)\n\t\t.script(simple.SCRIPT)\n\t\t.license(simple.LICENSE)\n\t\t.website(simple.WEBSITE)\n\t\t.movement(simple.MOVEMENTNAME)\n\t\t.movementNr(simple.MOVEMENT, simple.MOVEMENTTOTAL)\n\t\t.writer(simple.WRITER)\n\t\t.track(simple.TRACKNUMBER, simple.TRACKTOTAL || simple.TOTALTRACKS)\n\t\t.disc(simple.DISCNUMBER, simple.DISCTOTAL || simple.TOTALDISCS)\n\t\t.musicianCredit('instrument', simple.PERFORMER)\n\t\t.involved('arranger', simple.ARRANGER)\n\t\t.involved('engineer', simple.ENGINEER)\n\t\t.involved('producer', simple.PRODUCER)\n\t\t.involved('DJ-mix', simple.DJMIXER)\n\t\t.involved('mix', simple.MIXER)\n\t\t.mbAlbumStatus(simple.RELEASESTATUS)\n\t\t.mbAlbumType(simple.RELEASETYPE)\n\t\t.mbAlbumReleaseCountry(simple.RELEASECOUNTRY)\n\t\t.mbTrackID(simple.MUSICBRAINZ_TRACKID)\n\t\t.mbReleaseTrackID(simple.MUSICBRAINZ_RELEASETRACKID)\n\t\t.mbAlbumID(simple.MUSICBRAINZ_ALBUMID)\n\t\t.mbOriginalAlbumID(simple.MUSICBRAINZ_ORIGINALALBUMID)\n\t\t.mbArtistID(simple.MUSICBRAINZ_ARTISTID)\n\t\t.mbOriginalArtistID(simple.MUSICBRAINZ_ORIGINALARTISTID)\n\t\t.mbAlbumArtistID(simple.MUSICBRAINZ_ALBUMARTISTID)\n\t\t.mbReleaseGroupID(simple.MUSICBRAINZ_RELEASEGROUPID)\n\t\t.mbWorkID(simple.MUSICBRAINZ_WORKID)\n\t\t.mbTRMID(simple.MUSICBRAINZ_TRMID)\n\t\t.mbDiscID(simple.MUSICBRAINZ_DISCID)\n\t\t.acoustidID(simple.ACOUSTID_ID)\n\t\t.acoustidFingerprint(simple.ACOUSTID_FINGERPRINT)\n\t\t.musicIPPUID(simple.MUSICIP_PUID)\n\t\t.custom('CATALOGUE', simple.CATALOGUE)\n\t\t.custom('VERSION', simple.VERSION)\n\t\t.custom('ACCURATERIPRESULT', simple.ACCURATERIPRESULT)\n\t\t.custom('UPC', simple.UPC)\n\t\t.custom('EAN', simple.EAN)\n\t\t.custom('UPN', simple.UPN)\n\t\t.custom('STYLE', simple.STYLE)\n\t\t.custom('LOCATION', simple.LOCATION)\n\t\t.custom('PERIOD', simple.PERIOD)\n\t\t.custom('SOLOISTS', simple.SOLOISTS)\n\t\t.custom('PARTNUMBER', simple.PARTNUMBER)\n\t\t.custom('LABELNO', simple.LABELNO)\n\t\t.custom('OPUS', simple.OPUS)\n\t\t.custom('PART', simple.PART)\n\t\t.custom('SOURCE', simple.SOURCE)\n\t\t.custom('SOURCEMEDIA', simple.SOURCEMEDIA)\n\t\t.custom('SHOWMOVEMENT', simple.SHOWMOVEMENT)\n\t\t.custom('ORIGINALYEAR', simple.ORIGINALYEAR)\n\t\t.custom('REPLAYGAIN_ALBUM_GAIN', simple.REPLAYGAIN_ALBUM_GAIN)\n\t\t.custom('REPLAYGAIN_ALBUM_PEAK', simple.REPLAYGAIN_ALBUM_PEAK)\n\t\t.custom('REPLAYGAIN_TRACK_GAIN', simple.REPLAYGAIN_TRACK_GAIN)\n\t\t.custom('REPLAYGAIN_TRACK_PEAK', simple.REPLAYGAIN_TRACK_PEAK)\n\t\t.comment('comment', simple.COMMENT)\n\t\t.comment('description', simple.DESCRIPTION)\n\t;\n\t// builder.popm('POPM', simple['RATING:user@email']);\n\t// builder.idtext('TXXX', 'MusicMagic Fingerprint', simple.FINGERPRINT=MusicMagic Fingerprint);\n\n\tconst pad = '000';\n\tlet nr = 1;\n\tlet id = `CHAPTER${pad.substring(0, pad.length - nr.toString().length)}${nr.toString()}`;\n\twhile (simple[id]) {\n\t\tconst chapterTime = moment(simple[id]).valueOf() || 0;\n\t\tconst chapterID = simple[`${id}ID`] || id;\n\t\tconst chapterName = simple[`${id}NAME`];\n\t\tconst chapterURL = simple[`${id}URL`];\n\t\tconst subframeBuilder = new ID3V24TagBuilder('utf8');\n\t\tsubframeBuilder.title(chapterName).website(chapterURL);\n\t\tbuilder.chapter(chapterID, chapterTime, chapterTime, 0, 0, subframeBuilder.buildFrames());\n\t\tnr++;\n\t\tid = `CHAPTER${pad.substring(0, pad.length - nr.toString().length)}${nr.toString()}`;\n\t}\n\n\tif (flacInfo.pictures) {\n\t\tfor (const pic of flacInfo.pictures) {\n\t\t\tbuilder.picture(pic.pictureType, pic.description, pic.mimeType, pic.pictureData);\n\t\t}\n\t}\n\tconst tag = {version: 4, frames: builder.rawBuilder.build()};\n\tprepareResponseTag(tag);\n\treturn tag;\n}\n\nexport async function id3v2ToRawTag(id3v2tag: IID3V2.Tag): Promise<Jam.RawTag | undefined> {\n\tconst tag: Jam.RawTag = {\n\t\tversion: id3v2tag.head ? id3v2tag.head.ver : 4,\n\t\tframes: {}\n\t};\n\tid3v2tag.frames.forEach(frame => {\n\t\tconst f = tag.frames[frame.id] || [];\n\t\tf.push({id: frame.id, value: frame.value});\n\t\ttag.frames[frame.id] = f;\n\t});\n\tprepareResponseTag(tag);\n\treturn tag;\n}\n\nexport async function id3v2ToFlacMetaData(tag: IID3V2.Tag, imageModule: ImageModule): Promise<Array<MetaWriteableDataBlock>> {\n\tconst DropFramesList = [\n\t\t'TSIZ',\n\t\t'APIC'\n\t];\n\tconst simple = ID3v2.simplify(tag, DropFramesList) as any;\n\tconst comments: Array<string> = [];\n\tObject.keys(simple).forEach(key => {\n\t\tcomments.push(`${key}=${simple[key].toString()}`);\n\t});\n\tconst result: Array<MetaWriteableDataBlock> = [BlockVorbiscomment.createVorbisCommentBlock('jamserve', comments)];\n\tconst pics = tag.frames.filter(frame => frame.id === 'APIC') as Array<{ id: string; value: IID3V2.FrameValue.Pic }>;\n\tfor (const pic of pics) {\n\t\tif (pic.value.bin && pic.value.mimeType) {\n\t\t\tconst imageInfo = await imageModule.getImageInfoBuffer(pic.value.bin);\n\t\t\tconst picBlock = MetaDataBlockPicture.createPictureBlock(pic.value.pictureType, pic.value.mimeType, pic.value.description,\n\t\t\t\timageInfo.width, imageInfo.height, imageInfo.colorDepth, imageInfo.colors, pic.value.bin);\n\t\t\tresult.push(picBlock);\n\t\t}\n\t}\n\treturn result;\n}\n\nexport function trackTagToRawTag(tag: TrackTag): Jam.RawTag {\n\tconst builder = new ID3V24TagBuilder('utf8');\n\tbuilder.artist(tag.artist)\n\t\t.album(tag.album)\n\t\t.title(tag.title)\n\t\t.genre(tag.genre)\n\t\t.track(tag.track, tag.trackTotal)\n\t\t.disc(tag.disc, tag.discTotal)\n\t\t.date(tag.year ? tag.year.toString() : undefined);\n\treturn {version: 4, frames: builder.rawBuilder.build()};\n}\n\nfunction rawFrameToID3v2(frame: ID3v2Frames.Frame): void {\n\tif (frame && frame.value && (frame as ID3v2Frames.Bin).value.bin) {\n\t\tconst bin = (frame.value as any).bin;\n\t\tif (typeof bin === 'string') {\n\t\t\t(frame.value as any).bin = Buffer.from(bin, 'base64');\n\t\t}\n\t}\n\tif (frame && frame.subframes) {\n\t\tframe.subframes.forEach(rawFrameToID3v2);\n\t}\n}\n\nexport function rawTagToID3v2(tag: Jam.RawTag): IID3V2.Tag {\n\tconst frames: Array<IID3V2.Frame> = [];\n\tObject.keys(tag.frames).map(id => {\n\t\tconst f = tag.frames[id] || [];\n\t\tf.forEach(frame => {\n\t\t\trawFrameToID3v2(frame);\n\t\t\tframes.push(frame);\n\t\t});\n\t\treturn;\n\t});\n\treturn {\n\t\tid: ITagID.ID3v2,\n\t\thead: {\n\t\t\tver: tag.version,\n\t\t\trev: 0,\n\t\t\tsize: 0,\n\t\t\tvalid: true\n\t\t},\n\t\tstart: 0,\n\t\tend: 0,\n\t\tframes\n\t};\n}\n","export class MetaDataBlock {\n\terror: any;\n\thasData = false;\n\tremoved = false;\n\n\tconstructor(public isLast: boolean, public type: number) {\n\t\tthis.error = null;\n\t\tthis.hasData = false;\n\t\tthis.removed = false;\n\t}\n\n\tremove(): void {\n\t\tthis.removed = true;\n\t}\n\n\tparse(buffer: Buffer): void {\n\t\t// nope\n\t}\n}\n","import {ThirdpartyToolsConfig} from '../../config/thirdparty.config';\nimport {TrackMedia, TrackTag} from '../../engine/track/track.model';\nimport {Jam} from '../../model/jam-rest-data';\nimport {AudioFormatType, TrackTagFormatType} from '../../model/jam-types';\nimport {fileSuffix} from '../../utils/fs-utils';\nimport {ImageModule} from '../image/image.module';\nimport {FORMAT} from './audio.format';\nimport {AcousticbrainzClient} from './clients/acousticbrainz-client';\nimport {AcoustidClient} from './clients/acoustid-client';\nimport {CoverArtArchiveClient} from './clients/coverartarchive-client';\nimport {LastFMClient} from './clients/lastfm-client';\nimport {LyricsOVHClient} from './clients/lyricsovh-client';\nimport {MusicbrainzClient} from './clients/musicbrainz-client';\nimport {WikipediaClient} from './clients/wikipedia-client';\nimport {AudioModuleFLAC} from './formats/flac.module';\nimport {AudioModuleMP3} from './formats/mp3.module';\nimport {probe} from './tools/ffprobe';\nimport {TranscoderModule} from './transcoder/transcoder.module';\nimport {WaveformModule} from './waveform/waveform.module';\n\nexport interface AudioScanResult {\n\tmedia?: TrackMedia;\n\ttag?: TrackTag;\n}\n\nexport const ID3TrackTagRawFormatTypes = [TrackTagFormatType.id3v20, TrackTagFormatType.id3v21, TrackTagFormatType.id3v22, TrackTagFormatType.id3v23, TrackTagFormatType.id3v24];\n\nexport class AudioModule {\n\tmusicbrainz: MusicbrainzClient;\n\tacoustid: AcoustidClient;\n\tlastFM: LastFMClient;\n\tlyricsOVH: LyricsOVHClient;\n\tacousticbrainz: AcousticbrainzClient;\n\tcoverArtArchive: CoverArtArchiveClient;\n\twikipedia: WikipediaClient;\n\tmp3: AudioModuleMP3;\n\tflac: AudioModuleFLAC;\n\ttranscoder: TranscoderModule;\n\twaveform: WaveformModule;\n\n\tconstructor(waveformCachePath: string, transcodeCachePath: string, tools: ThirdpartyToolsConfig, public imageModule: ImageModule) {\n\t\tthis.musicbrainz = new MusicbrainzClient({userAgent: tools.musicbrainz.userAgent, retryOn: true});\n\t\tthis.acousticbrainz = new AcousticbrainzClient({userAgent: tools.acousticbrainz.userAgent, retryOn: true});\n\t\tthis.lastFM = new LastFMClient({key: tools.lastfm.apiKey, userAgent: tools.lastfm.userAgent});\n\t\tthis.acoustid = new AcoustidClient({key: tools.acoustid.apiKey, userAgent: tools.acoustid.userAgent});\n\t\tthis.lyricsOVH = new LyricsOVHClient(tools.chartlyrics.userAgent);\n\t\tthis.wikipedia = new WikipediaClient(tools.wikipedia.userAgent);\n\t\tthis.coverArtArchive = new CoverArtArchiveClient({userAgent: tools.coverartarchive.userAgent, retryOn: true});\n\t\tthis.transcoder = new TranscoderModule(transcodeCachePath);\n\t\tthis.mp3 = new AudioModuleMP3();\n\t\tthis.flac = new AudioModuleFLAC(imageModule);\n\t\tthis.waveform = new WaveformModule(waveformCachePath);\n\t}\n\n\tsetSettings(externalServices: Jam.AdminSettingsExternal): void {\n\t\tconst enabled = externalServices && externalServices.enabled;\n\t\tthis.musicbrainz.enabled = enabled;\n\t\tthis.acoustid.enabled = enabled;\n\t\tthis.lastFM.enabled = enabled;\n\t\tthis.lyricsOVH.enabled = enabled;\n\t\tthis.acousticbrainz.enabled = enabled;\n\t\tthis.coverArtArchive.enabled = enabled;\n\t\tthis.wikipedia.enabled = enabled;\n\t}\n\n\tasync read(filename: string): Promise<AudioScanResult> {\n\t\tconst suffix = fileSuffix(filename);\n\t\tif (suffix === AudioFormatType.mp3) {\n\t\t\treturn this.mp3.read(filename);\n\t\t}\n\t\tif (suffix === AudioFormatType.flac) {\n\t\t\treturn this.flac.read(filename);\n\t\t}\n\t\tconst p = await probe(filename, []);\n\t\tif (!p) {\n\t\t\treturn {tag: {format: TrackTagFormatType.none}, media: {}};\n\t\t}\n\t\treturn {tag: FORMAT.packProbeJamServeTag(p), media: FORMAT.packProbeJamServeMedia(p, suffix as AudioFormatType)};\n\t}\n\n\tasync readRawTag(filename: string): Promise<Jam.RawTag | undefined> {\n\t\tconst suffix = fileSuffix(filename);\n\t\tif (suffix === AudioFormatType.mp3) {\n\t\t\treturn this.mp3.readRaw(filename);\n\t\t}\n\t\tif (suffix === AudioFormatType.flac) {\n\t\t\treturn this.flac.readRaw(filename);\n\t\t}\n\t}\n\n\tasync writeRawTag(filename: string, tag: Jam.RawTag): Promise<void> {\n\t\tconst suffix = fileSuffix(filename);\n\t\ttry {\n\t\t\tif (suffix === AudioFormatType.mp3) {\n\t\t\t\tawait this.mp3.write(filename, tag);\n\t\t\t} else if (suffix === AudioFormatType.flac) {\n\t\t\t\tawait this.flac.write(filename, tag);\n\t\t\t} else {\n\t\t\t\treturn Promise.reject(new Error(`Writing to format ${suffix} is currently not supported`));\n\t\t\t}\n\t\t} catch (e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n\n\tasync extractTagImage(filename: string): Promise<Buffer | undefined> {\n\t\tconst suffix = fileSuffix(filename);\n\t\tif (suffix === AudioFormatType.mp3) {\n\t\t\treturn this.mp3.extractTagImage(filename);\n\t\t}\n\t\tif (suffix === AudioFormatType.flac) {\n\t\t\treturn this.flac.extractTagImage(filename);\n\t\t}\n\t}\n\n\tasync clearCacheByIDs(ids: Array<string>): Promise<void> {\n\t\tawait this.transcoder.clearCacheByIDs(ids);\n\t\tawait this.waveform.clearCacheByIDs(ids);\n\t}\n\n}\n","import {ID3v1_GENRES, ID3v2, IID3V1, IID3V2, IMP3} from 'jamp3';\nimport {TrackMedia, TrackTag} from '../../engine/track/track.model';\nimport {AudioFormatType, TrackTagFormatType} from '../../model/jam-types';\nimport {cleanGenre} from '../../utils/genres';\nimport {ID3TrackTagRawFormatTypes} from './audio.module';\nimport {FlacComment, FlacMedia, FlacPicture} from './formats/flac';\nimport {ProbeResult} from './tools/ffprobe';\n\nexport class FORMAT {\n\tstatic packJamServeMedia(data?: IMP3.MPEG): TrackMedia {\n\t\tif (!data) {\n\t\t\treturn {};\n\t\t}\n\t\treturn {\n\t\t\tformat: AudioFormatType.mp3,\n\t\t\tduration: data.durationEstimate,\n\t\t\tbitRate: data.bitRate,\n\t\t\tsampleRate: data.sampleRate,\n\t\t\tchannels: data.channels,\n\t\t\tencoded: data.encoded,\n\t\t\tmode: data.mode,\n\t\t\tversion: `${data.version} ${data.layer}`\n\t\t};\n\t}\n\n\tstatic packProbeJamServeMedia(data: ProbeResult, format: AudioFormatType): TrackMedia {\n\t\tif (!data.streams) {\n\t\t\treturn {};\n\t\t}\n\t\tconst stream = data.streams.filter(s => s.codec_type === 'audio')[0];\n\t\tif (!stream) {\n\t\t\treturn {};\n\t\t}\n\t\treturn {\n\t\t\tformat,\n\t\t\tduration: Number(data.format.duration),\n\t\t\tbitRate: Number(data.format.bit_rate),\n\t\t\tsampleRate: Number(stream.sample_rate),\n\t\t\tchannels: stream.channels,\n\t\t\tmode: stream.channel_layout,\n\t\t\tversion: stream.codec_long_name\n\t\t};\n\t}\n\n\tstatic packFlacMediaInfoJamServeMedia(media?: FlacMedia): TrackMedia {\n\t\tif (!media) {\n\t\t\treturn {};\n\t\t}\n\t\treturn {\n\t\t\tformat: AudioFormatType.flac,\n\t\t\tduration: media.duration,\n\t\t\tsampleRate: media.sampleRate,\n\t\t\tencoded: 'VBR',\n\t\t\tchannels: media.channels\n\t\t};\n\t}\n\n\tstatic parseNum(s: string | undefined): number | undefined {\n\t\tif (s !== undefined) {\n\t\t\tconst n = Number(s.trim());\n\t\t\tif (isNaN(n)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn n;\n\t\t}\n\t}\n\n\tstatic parseYear(s: string | undefined): number | undefined {\n\t\tif (s !== undefined) {\n\t\t\ts = s.slice(0, 4).trim();\n\t\t\tif (s.length === 4) {\n\t\t\t\tconst n = Number(s);\n\t\t\t\tif (isNaN(n)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn n;\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic packProbeJamServeTag(data: ProbeResult): TrackTag {\n\t\tif (!data || !data.format || !data.format.tags) {\n\t\t\treturn {format: TrackTagFormatType.none};\n\t\t}\n\t\tconst simple: { [name: string]: string | undefined } = {};\n\t\tObject.keys(data.format.tags).forEach(key => {\n\t\t\tsimple[key.toUpperCase().replace(/ /g, '_')] = FORMAT.cleanText(data.format.tags[key]);\n\t\t});\n\t\treturn {\n\t\t\tformat: TrackTagFormatType.ffmpeg,\n\t\t\tartist: simple.ARTIST,\n\t\t\ttitle: simple.TITLE,\n\t\t\talbum: simple.ALBUM,\n\t\t\tyear: FORMAT.parseNum(simple.DATE),\n\t\t\ttrack: FORMAT.parseNum(simple.TRACK),\n\t\t\tdisc: FORMAT.parseNum(simple.DISC),\n\t\t\tlyrics: simple.LYRICS,\n\t\t\tseriesNr: simple.WORK,\n\t\t\tseries: simple.GROUPING,\n\t\t\tgenre: simple.GENRE ? cleanGenre(simple.GENRE) : undefined,\n\t\t\talbumArtist: simple.ALBUM_ARTIST,\n\t\t\talbumSort: simple.ALBUM_SORT || simple.ALBUM_SORT_ORDER,\n\t\t\talbumArtistSort: simple.ALBUM_ARTIST_SORT || simple.ALBUM_ARTIST_SORT_ORDER,\n\t\t\tartistSort: simple.ARTIST_SORT || simple.ARTIST_SORT_ORDER,\n\t\t\ttitleSort: simple.TITLE_SORT || simple.TITLE_SORT_ORDER,\n\t\t\tmbTrackID: simple.TRACKID,\n\t\t\tmbAlbumType: simple.ALBUMTYPE,\n\t\t\tmbAlbumArtistID: simple.ALBUMARTISTID,\n\t\t\tmbArtistID: simple.ARTISTID,\n\t\t\tmbReleaseID: simple.ALBUMID,\n\t\t\tmbReleaseTrackID: simple.RELEASETRACKID,\n\t\t\tmbReleaseGroupID: simple.RELEASEGROUPID,\n\t\t\tmbRecordingID: simple.RECORDINGID,\n\t\t\tmbAlbumStatus: simple.ALBUMSTATUS,\n\t\t\tmbReleaseCountry: simple.RELEASECOUNTRY\n\t\t};\n\t}\n\n\tstatic packID3v1JamServeTag(data?: IID3V1.Tag): TrackTag | undefined {\n\t\tif (!data) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst simple = data.value;\n\t\treturn {\n\t\t\tformat: TrackTagFormatType.id3v1,\n\t\t\tartist: FORMAT.cleanText(simple.artist),\n\t\t\ttitle: FORMAT.cleanText(simple.title),\n\t\t\talbum: FORMAT.cleanText(simple.album),\n\t\t\tyear: FORMAT.parseNum(simple.year),\n\t\t\ttrack: simple.track,\n\t\t\tgenre: (simple.genreIndex !== undefined && !!ID3v1_GENRES[simple.genreIndex]) ? ID3v1_GENRES[simple.genreIndex] : undefined\n\t\t};\n\t}\n\n\tstatic packID3v2JamServeTag(data?: IID3V2.Tag): TrackTag | undefined {\n\t\tif (!data) {\n\t\t\treturn undefined;\n\t\t}\n\t\t// const chapters: Array<TrackTagChapter> = data.frames.filter(frame => frame.id === 'CHAP').map(c => {\n\t\t// \tconst chapter = <Chapter>c;\n\t\t// \tconst chapterTag = simplifyTag({id: data.id, start: 0, end: 0, head: data.head, frames: c.subframes || []});\n\t\t// \treturn {\n\t\t// \t\tid: chapter.id,\n\t\t// \t\tstart: chapter.value.start,\n\t\t// \t\tend: chapter.value.end,\n\t\t// \t\ttitle: chapterTag.TITLE\n\t\t// \t};\n\t\t// });\n\t\tconst simple = ID3v2.simplify(data, ['CHAP', 'APIC']);\n\t\tconst pics = data.frames.filter(f => f.id === 'APIC');\n\t\tconst format = ID3TrackTagRawFormatTypes[data.head ? data.head.rev : -1] || TrackTagFormatType.none;\n\t\treturn {\n\t\t\tformat,\n\t\t\talbum: FORMAT.cleanText(simple.ALBUM),\n\t\t\talbumSort: FORMAT.cleanText(simple.ALBUMSORT),\n\t\t\talbumArtist: FORMAT.cleanText(simple.ALBUMARTIST),\n\t\t\talbumArtistSort: FORMAT.cleanText(simple.ALBUMARTISTSORT),\n\t\t\tartist: FORMAT.cleanText(simple.ARTIST),\n\t\t\tartistSort: FORMAT.cleanText(simple.ARTISTSORT),\n\t\t\ttitle: FORMAT.cleanText(simple.TITLE),\n\t\t\ttitleSort: FORMAT.cleanText(simple.TITLESORT),\n\t\t\tgenre: simple.GENRE ? cleanGenre(simple.GENRE) : undefined,\n\t\t\tdisc: FORMAT.parseNum(simple.DISCNUMBER),\n\t\t\tdiscTotal: FORMAT.parseNum(simple.DISCTOTAL),\n\t\t\ttrack: FORMAT.parseNum(simple.TRACKNUMBER),\n\t\t\ttrackTotal: FORMAT.parseNum(simple.TRACKTOTAL),\n\t\t\tlyrics: simple.LYRICS,\n\t\t\tseriesNr: simple.WORK,\n\t\t\tseries: simple.GROUPING,\n\t\t\tyear: FORMAT.parseYear(simple.ORIGINALDATE) || FORMAT.parseYear(simple.DATE) || FORMAT.parseYear(simple.RELEASETIME),\n\t\t\tmbTrackID: simple.MUSICBRAINZ_TRACKID,\n\t\t\tmbAlbumType: simple.RELEASETYPE,\n\t\t\tmbAlbumArtistID: simple.MUSICBRAINZ_ALBUMARTISTID,\n\t\t\tmbArtistID: simple.MUSICBRAINZ_ARTISTID,\n\t\t\tmbReleaseID: simple.MUSICBRAINZ_ALBUMID,\n\t\t\tmbReleaseTrackID: simple.MUSICBRAINZ_RELEASETRACKID,\n\t\t\tmbReleaseGroupID: simple.MUSICBRAINZ_RELEASEGROUPID,\n\t\t\tmbRecordingID: simple.MUSICBRAINZ_RELEASETRACKID,\n\t\t\tmbAlbumStatus: simple.RELEASESTATUS,\n\t\t\tmbReleaseCountry: simple.RELEASECOUNTRY,\n\t\t\tnrTagImages: pics.length\n\t\t\t// chapters: chapters.length > 0 ? chapters : undefined\n\t\t};\n\t}\n\n\tprivate static cleanText(s: string | undefined): string | undefined {\n\t\treturn s !== undefined ? s.replace(/ {2}/g, ' ').trim() : undefined;\n\t}\n\n\tstatic packFlacVorbisCommentJamServeTag(comment?: FlacComment, pictures?: Array<FlacPicture>): TrackTag | undefined {\n\t\tif (!comment || !comment.tag) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst simple: { [key: string]: string | undefined } = comment.tag;\n\t\treturn {\n\t\t\tformat: TrackTagFormatType.vorbis,\n\t\t\talbum: simple.ALBUM,\n\t\t\talbumSort: simple.ALBUMSORT,\n\t\t\talbumArtist: simple.ALBUMARTIST,\n\t\t\talbumArtistSort: simple.ALBUMARTISTSORT,\n\t\t\tartist: simple.ARTIST,\n\t\t\tartistSort: simple.ARTISTSORT,\n\t\t\tgenre: simple.GENRE ? cleanGenre(simple.GENRE) : undefined,\n\t\t\tdisc: FORMAT.parseNum(simple.DISCNUMBER),\n\t\t\tdiscTotal: FORMAT.parseNum(simple.DISCTOTAL) || FORMAT.parseNum(simple.TOTALDISCS),\n\t\t\ttitle: simple.TITLE,\n\t\t\ttitleSort: simple.TITLESORT,\n\t\t\ttrack: FORMAT.parseNum(simple.TRACKNUMBER) || FORMAT.parseNum(simple.TRACK),\n\t\t\ttrackTotal: FORMAT.parseNum(simple.TRACKTOTAL) || FORMAT.parseNum(simple.TOTALTRACKS),\n\t\t\tyear: FORMAT.parseYear(simple.ORIGINALYEAR) || FORMAT.parseYear(simple.ORIGINALDATE) || FORMAT.parseYear(simple.DATE),\n\t\t\tlyrics: simple.LYRICS,\n\t\t\tseriesNr: simple.WORK,\n\t\t\tseries: simple.GROUPING,\n\t\t\tmbTrackID: simple.MUSICBRAINZ_TRACKID,\n\t\t\tmbAlbumType: simple.RELEASETYPE,\n\t\t\tmbAlbumArtistID: simple.MUSICBRAINZ_ALBUMARTISTID,\n\t\t\tmbArtistID: simple.MUSICBRAINZ_ARTISTID,\n\t\t\tmbReleaseID: simple.MUSICBRAINZ_ALBUMID,\n\t\t\tmbReleaseTrackID: simple.MUSICBRAINZ_RELEASETRACKID,\n\t\t\tmbReleaseGroupID: simple.MUSICBRAINZ_RELEASEGROUPID,\n\t\t\tmbRecordingID: simple.MUSICBRAINZ_RELEASETRACKID,\n\t\t\tmbAlbumStatus: simple.RELEASESTATUS,\n\t\t\tmbReleaseCountry: simple.RELEASECOUNTRY,\n\t\t\tnrTagImages: pictures ? pictures.length : undefined\n\t\t};\n\n\t}\n\n}\n","import {logger} from './logger';\nimport {WebserviceClient} from './webservice-client';\n\nconst log = logger('WebserviceJSONClient');\n\nexport interface JSONRequest {\n\tpath: string;\n\tquery: { [name: string]: string | undefined };\n\tretry: number;\n}\n\nexport interface JSONOptions {\n\thost?: string;\n\tport?: number;\n\tbasePath?: string;\n\tuserAgent: string;\n\tretryOn?: boolean;\n\tretryDelay?: number;\n\tretryCount?: number;\n}\n\nexport class WebserviceJSONClient<T extends JSONRequest, R> extends WebserviceClient {\n\toptions: JSONOptions;\n\n\tconstructor(requestPerInterval: number, requestIntervalMS: number, userAgent: string, options: JSONOptions) {\n\t\tsuper(requestPerInterval, requestIntervalMS, userAgent);\n\t\tconst defaultOptions = {\n\t\t\tport: 80,\n\t\t\tbasePath: '',\n\t\t\tuserAgent: '',\n\t\t\tlimit: 25,\n\t\t\tretryOn: false,\n\t\t\tretryDelay: 3000,\n\t\t\tretryCount: 3\n\t\t};\n\t\tthis.options = {...defaultOptions, ...options};\n\t}\n\n\tprotected reqToHost(req: T): string {\n\t\tconst port = this.options.port !== 80 ? `:${this.options.port}` : '';\n\t\treturn `${this.options.host}${port}`;\n\t}\n\n\tprotected reqToUrl(req: T): string {\n\t\tconst q = Object.keys(req.query)\n\t\t\t.filter(key => (req.query[key] !== undefined && req.query[key] !== null))\n\t\t\t.map(key => `${key}=${req.query[key]}`);\n\t\tconst params = q.length > 0 ? `?${q.join('&')}` : '';\n\t\treturn `${this.reqToHost(req)}${req.path}${params}`;\n\t}\n\n\tprotected async retry(error: Error, req: T): Promise<any> {\n\t\tif (this.options.retryOn && req.retry < (this.options.retryCount || 0)) {\n\t\t\treq.retry++;\n\t\t\tlog.info(`rate limit hit, retrying in ${this.options.retryDelay}ms`);\n\t\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.get(req).then(resolve).catch(reject);\n\t\t\t\t}, this.options.retryDelay);\n\t\t\t});\n\t\t}\n\t\treturn Promise.reject(error);\n\t}\n\n\tprotected async processError(e: any, req: T): Promise<R> {\n\t\tconst statusCode = e.statusCode;\n\t\tif (statusCode === 502 || statusCode === 503) {\n\t\t\treturn this.retry(e, req);\n\t\t}\n\t\tlog.error(e);\n\t\treturn Promise.reject(e);\n\t}\n\n\tprotected isRateLimitError(body: any): boolean {\n\t\treturn (body && body.error && body.error.includes('allowable rate limit'));\n\t}\n\n\tprotected async get(req: T): Promise<R> {\n\t\tconst url = this.reqToUrl(req);\n\n\t\tlog.info('requesting', url, JSON.stringify(req));\n\t\ttry {\n\t\t\tconst data = await this.getJson<any>(url, undefined);\n\t\t\tif (this.isRateLimitError(data)) {\n\t\t\t\treturn this.retry(Error(data.error), req);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (e) {\n\t\t\treturn this.processError(e, req);\n\t\t}\n\t}\n}\n","module.exports = require(\"request\");","import {spawn} from 'child_process';\nimport {getBinPath} from './which';\n\n// export async function spawnToolStream(binName: string, envName: string, args: Array<string>, onData: (buffer: Buffer) => void): Promise<string> {\n// \tconst bin = await getBinPath(binName, envName);\n// \tif (!bin || bin.length === 0) {\n// \t\treturn Promise.reject(Error('Tool binary not found ' + binName));\n// \t}\n// \treturn new Promise<string>((resolve, reject) => {\n// \t\tconst child = spawn(bin, args);\n// \t\tlet stderr = '';\n// \t\tchild.stdout.on('data', (data: Buffer) => {\n// \t\t\tonData(data);\n// \t\t});\n// \t\tchild.stderr.on('data', (data: Buffer) => {\n// \t\t\tstderr += data.toString();\n// \t\t});\n// \t\tchild.on('close', (code: number) => {\n// \t\t\tresolve(stderr);\n// \t\t});\n// \t});\n// }\n\nexport async function spawnTool(binName: string, envName: string, args: Array<string>): Promise<{ result: string; errMsg: string }> {\n\tconst bin = await getBinPath(binName, envName);\n\tif (!bin || bin.length === 0) {\n\t\treturn Promise.reject(Error(`Tool binary not found ${binName}`));\n\t}\n\treturn new Promise<{ result: string; errMsg: string }>((resolve, reject) => {\n\t\tconst child = spawn(bin, args);\n\t\tif (!child.stdout || !child.stderr) {\n\t\t\treturn reject(Error('Unsupported std out'));\n\t\t}\n\t\tlet result = '';\n\t\tlet errMsg = '';\n\t\tchild.stdout.on('data', (data: Buffer) => {\n\t\t\tresult += data.toString();\n\t\t});\n\t\tchild.stderr.on('data', (data: Buffer) => {\n\t\t\terrMsg += data.toString();\n\t\t});\n\t\tchild.on('close', (code: number) => {\n\t\t\tresolve({result, errMsg});\n\t\t});\n\t});\n}\n\nexport async function spawnToolJson<T>(binName: string, envName: string, args: Array<string>): Promise<T> {\n\tconst data = await spawnTool(binName, envName, args);\n\treturn JSON.parse(data.result);\n}\n","import fse from 'fs-extra';\nimport path from 'path';\nimport {ApiBinaryResult} from '../typings';\nimport {DebouncePromises} from './debounce-promises';\n\nexport class IDFolderCache<T> {\n\tprivate cacheDebounce = new DebouncePromises<ApiBinaryResult>();\n\n\tconstructor(public dataPath: string, public filePrefix: string, private resolveParams: (params: T) => string) {\n\n\t}\n\n\tprefixCacheFilename(id: string): string {\n\t\treturn `${this.filePrefix}-${id}`;\n\t}\n\n\tcacheFilename(id: string, params: T): string {\n\t\treturn `${this.prefixCacheFilename(id)}${this.resolveParams(params)}`;\n\t}\n\n\tasync removeByIDs(ids: Array<string>): Promise<void> {\n\t\tconst searches = ids.filter(id => id.length > 0).map(id => this.prefixCacheFilename(id));\n\t\tif (searches.length > 0) {\n\t\t\tlet list = await fse.readdir(this.dataPath);\n\t\t\tlist = list.filter(name => {\n\t\t\t\treturn searches.findIndex(s => name.startsWith(s)) >= 0;\n\t\t\t});\n\t\t\tfor (const filename of list) {\n\t\t\t\tawait fse.unlink(path.resolve(this.dataPath, filename));\n\t\t\t}\n\t\t}\n\t}\n\n\tasync getExisting(id: string, params: T): Promise<ApiBinaryResult | undefined> {\n\t\tconst cacheID = this.cacheFilename(id, params);\n\t\tif (this.cacheDebounce.isPending(cacheID)) {\n\t\t\treturn this.cacheDebounce.append(cacheID);\n\t\t}\n\t\tconst cachefile = path.join(this.dataPath, cacheID);\n\t\tconst exists = await fse.pathExists(cachefile);\n\t\tif (exists) {\n\t\t\treturn {file: {filename: cachefile, name: cacheID}};\n\t\t}\n\t}\n\n\tasync get(id: string, params: T, build: (cacheFilename: string) => Promise<void>): Promise<ApiBinaryResult> {\n\t\tconst cacheID = this.cacheFilename(id, params);\n\t\tif (this.cacheDebounce.isPending(cacheID)) {\n\t\t\treturn this.cacheDebounce.append(cacheID);\n\t\t}\n\t\tthis.cacheDebounce.setPending(cacheID);\n\t\ttry {\n\t\t\tconst cachefile = path.join(this.dataPath, cacheID);\n\t\t\tconst exists = await fse.pathExists(cachefile);\n\t\t\tif (!exists) {\n\t\t\t\tawait build(cachefile);\n\t\t\t}\n\t\t\tconst result: ApiBinaryResult = {file: {filename: cachefile, name: cacheID}};\n\t\t\tthis.cacheDebounce.resolve(cacheID, result);\n\t\t\treturn result;\n\t\t} catch (e) {\n\t\t\tthis.cacheDebounce.reject(cacheID, e);\n\t\t\treturn Promise.reject(e);\n\t\t}\n\n\t}\n\n}\n","module.exports = require(\"express\");","module.exports = require(\"crypto\");","import express from 'express';\nimport path from 'path';\nimport {ApiBinaryResult, NodeError} from '../typings';\n\nexport class ApiBaseResponder {\n\n\tstatic sendJSONP(req: express.Request, res: express.Response, callback: string, data: any): void {\n\t\tres.writeHead(200, {'Content-Type': 'application/javascript'});\n\t\tres.end(`${callback}(${JSON.stringify(data)});`);\n\t}\n\n\tstatic sendJSON(req: express.Request, res: express.Response, data: any): void {\n\t\tres.status(200).json(data);\n\t}\n\n\tstatic sendXML(req: express.Request, res: express.Response, data: string): void {\n\t\tres.set('Content-Type', 'application/xml');\n\t\tres.status(200).send(data);\n\t}\n\n\tstatic sendError(req: express.Request, res: express.Response, err: NodeError): void {\n\t\tconst msg = (typeof err === 'string' ? err : (err.message || 'Guru Meditation')).toString();\n\t\tconst code = (typeof err.failCode === 'number' ? err.failCode : 500);\n\t\tApiBaseResponder.sendErrorMsg(req, res, code || 500, msg);\n\t}\n\n\tstatic sendErrorMsg(req: express.Request, res: express.Response, code: number, msg: string): void {\n\t\tres.status(code).json({error: msg});\n\t}\n\n\tstatic sendBinary(req: express.Request, res: express.Response, data: ApiBinaryResult): void {\n\t\tif (data.json) {\n\t\t\tApiBaseResponder.sendJSON(req, res, data.json);\n\t\t} else if (data.pipe) {\n\t\t\tdata.pipe.pipe(res);\n\t\t} else if (data.buffer) {\n\t\t\tres.set('Content-Type', data.buffer.contentType);\n\t\t\tres.set('Content-Length', data.buffer.buffer.length.toString());\n// \t\t\tres.set('Cache-Control', 'public, max-age=' + config.max_age);\n\t\t\tres.status(200).send(data.buffer.buffer);\n\t\t} else if (data.file) {\n\t\t\tres.sendFile(data.file.filename, {filename: data.file.name || path.basename(data.file.filename)});\n\t\t}\n\t}\n}\n","import {Jam} from '../../model/jam-rest-data';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {PodcastStatus} from '../../model/jam-types';\nimport {formatTrackTag} from '../track/track.format';\nimport {Episode, PodcastEpisodeChapter} from './episode.model';\n\nexport function formatChapters(chapters: Array<PodcastEpisodeChapter>): Array<Jam.PodcastEpisodeChapter> {\n\treturn chapters.map(chap => {\n\t\treturn {\n\t\t\tstart: chap.start,\n\t\t\ttitle: chap.title\n\t\t};\n\t});\n}\n\nexport function formatEpisode(episode: Episode, includes: JamParameters.IncludesTrack, status: PodcastStatus): Jam.PodcastEpisode {\n\treturn {\n\t\tid: episode.id,\n\t\tparentID: '',\n\t\tcreated: episode.stat ? episode.stat.created : 0,\n\t\tpodcastID: episode.podcastID,\n\t\tpodcast: episode.podcast,\n\t\tstatus: status as Jam.PodcastEpisodeStatusType,\n\t\terrorMessage: episode.error,\n\t\tname: episode.name,\n\t\tduration: episode.media ? (episode.media.duration || -1) : (episode.duration ? episode.duration : -1),\n\t\tdate: episode.date,\n\t\tsummary: episode.summary,\n\t\tguid: episode.guid,\n\t\tauthor: episode.author,\n\t\tlink: episode.link,\n\t\tmedia: includes.trackMedia && episode.media ? {\n\t\t\tbitRate: episode.media.bitRate || -1,\n\t\t\tformat: episode.media.format || '',\n\t\t\tchannels: episode.media.channels || -1,\n\t\t\tsampleRate: episode.media.sampleRate || -1,\n\t\t\tsize: (episode.stat ? episode.stat.size : -1) || -1\n\t\t} : undefined,\n\t\ttag: includes.trackTag && episode.tag ? formatTrackTag(episode.tag) : undefined,\n\t\tchapters: episode.chapters && episode.chapters.length > 0 ? formatChapters(episode.chapters) : undefined\n\t};\n}\n","import path from 'path';\nimport {ArtworkImageType, FolderType} from '../../model/jam-types';\nimport {ImageModule} from '../../modules/image/image.module';\nimport {ApiBinaryResult} from '../../typings';\nimport {BaseListService} from '../base/dbobject-list.service';\nimport {StateService} from '../state/state.service';\nimport {TrackStore} from '../track/track.store';\nimport {Artwork, Folder} from './folder.model';\nimport {FolderStore, SearchQueryFolder} from './folder.store';\n\nexport async function getFolderDisplayImage(folder: Folder): Promise<Artwork | undefined> {\n\tif (!folder.tag || !folder.tag.artworks) {\n\t\treturn;\n\t}\n\tif (folder.tag.type === FolderType.artist) {\n\t\treturn folder.tag.artworks.find(a => a.types.includes(ArtworkImageType.artist));\n\t}\n\treturn folder.tag.artworks.find(a => a.types.includes(ArtworkImageType.front));\n}\n\nexport class FolderService extends BaseListService<Folder, SearchQueryFolder> {\n\n\tconstructor(public folderStore: FolderStore, private trackStore: TrackStore, stateService: StateService, public imageModule: ImageModule) {\n\t\tsuper(folderStore, stateService);\n\t}\n\n\tdefaultSort(items: Array<Folder>): Array<Folder> {\n\t\treturn items.sort((a, b) => (a.tag && a.tag.title ? a.tag.title : path.basename(a.path)).localeCompare((b.tag && b.tag.title ? b.tag.title : path.basename(b.path))));\n\t}\n\n\tasync collectFolderPath(folderId: string | undefined, cachedFolders?: Array<Folder>): Promise<Array<Folder>> {\n\t\tconst result: Array<Folder> = [];\n\t\tconst store = this.folderStore;\n\n\t\tasync function collect(id?: string): Promise<void> {\n\t\t\tif (!id) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet folder: Folder | undefined;\n\t\t\tif (cachedFolders) {\n\t\t\t\tfolder = cachedFolders.find(f => f.id === id);\n\t\t\t}\n\t\t\tif (!folder) {\n\t\t\t\tfolder = await store.byId(id);\n\t\t\t\tif (cachedFolders && folder) {\n\t\t\t\t\tcachedFolders.push(folder);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (folder) {\n\t\t\t\tresult.unshift(folder);\n\t\t\t\tawait collect(folder.parentID);\n\t\t\t}\n\t\t}\n\n\t\tawait collect(folderId);\n\t\treturn result;\n\t}\n\n\tasync getImage(folder: Folder, size?: number, format?: string): Promise<ApiBinaryResult | undefined> {\n\t\tconst artwork = await getFolderDisplayImage(folder);\n\t\tif (artwork) {\n\t\t\treturn this.getArtworkImage(folder, artwork, size, format);\n\t\t}\n\t}\n\n\tasync getArtworkImage(folder: Folder, artwork: Artwork, size?: number, format?: string): Promise<ApiBinaryResult> {\n\t\treturn this.imageModule.get(artwork.id, path.join(folder.path, artwork.name), size, format);\n\t}\n\n}\n","import {MetaWriteableDataBlock} from './block.writeable';\n\nexport class MetaDataBlockPicture extends MetaWriteableDataBlock {\n\tpictureType = 0;\n\tmimeType = '';\n\tdescription = '';\n\twidth = 0;\n\theight = 0;\n\tbitsPerPixel = 0;\n\tcolors = 0;\n\tpictureData?: Buffer;\n\n\tconstructor(isLast: boolean) {\n\t\tsuper(isLast, 6);\n\t}\n\n\tpublic static createPictureBlock(pictureType: number, mimeType: string, description: string, width: number, height: number, bitsPerPixel: number, colors: number, pictureData: Buffer): MetaDataBlockPicture {\n\t\tconst mdb = new MetaDataBlockPicture(false);\n\t\tmdb.pictureType = pictureType;\n\t\tmdb.mimeType = mimeType;\n\t\tmdb.description = description;\n\t\tmdb.width = width;\n\t\tmdb.height = height;\n\t\tmdb.bitsPerPixel = bitsPerPixel;\n\t\tmdb.colors = colors;\n\t\tmdb.pictureData = pictureData;\n\t\tmdb.hasData = true;\n\t\treturn mdb;\n\t}\n\n\tparse(buffer: Buffer): void {\n\t\ttry {\n\n\t\t\tlet pos = 0;\n\n\t\t\tthis.pictureType = buffer.readUInt32BE(pos);\n\t\t\tpos += 4;\n\n\t\t\tconst mimeTypeLength = buffer.readUInt32BE(pos);\n\t\t\tthis.mimeType = buffer.toString('utf8', pos + 4, pos + 4 + mimeTypeLength);\n\t\t\tpos += mimeTypeLength + 4;\n\n\t\t\tconst descriptionLength = buffer.readUInt32BE(pos);\n\t\t\tthis.description = buffer.toString('utf8', pos + 4, pos + 4 + descriptionLength);\n\t\t\tpos += descriptionLength + 4;\n\n\t\t\tthis.width = buffer.readUInt32BE(pos);\n\t\t\tthis.height = buffer.readUInt32BE(pos + 4);\n\t\t\tthis.bitsPerPixel = buffer.readUInt32BE(pos + 8);\n\t\t\tthis.colors = buffer.readUInt32BE(pos + 12);\n\t\t\tpos += 16;\n\n\t\t\tconst pictureDataLength = buffer.readUInt32BE(pos);\n\t\t\tthis.pictureData = Buffer.alloc(pictureDataLength);\n\t\t\tbuffer.copy(this.pictureData, 0, pos + 4, pictureDataLength);\n\n\t\t\tthis.hasData = true;\n\n\t\t} catch (e) {\n\t\t\tthis.error = e;\n\t\t\tthis.hasData = false;\n\t\t}\n\t}\n\n\tpublish(): Buffer {\n\t\tlet pos = 0;\n\t\tconst size = this.getSize();\n\t\tconst buffer = Buffer.alloc(size + 4);\n\n\t\tif (this.pictureData) {\n\t\t\tlet header = size;\n\t\t\theader |= (this.type << 24);\n\t\t\theader |= (this.isLast ? 0x80000000 : 0);\n\t\t\tbuffer.writeUInt32BE(header >>> 0, pos);\n\t\t\tpos += 4;\n\n\t\t\tbuffer.writeUInt32BE(this.pictureType, pos);\n\t\t\tpos += 4;\n\n\t\t\tconst mimeTypeLen = Buffer.byteLength(this.mimeType);\n\t\t\tbuffer.writeUInt32BE(mimeTypeLen, pos);\n\t\t\tbuffer.write(this.mimeType, pos + 4);\n\t\t\tpos += mimeTypeLen + 4;\n\n\t\t\tconst descriptionLen = Buffer.byteLength(this.description);\n\t\t\tbuffer.writeUInt32BE(descriptionLen, pos);\n\t\t\tbuffer.write(this.description, pos + 4);\n\t\t\tpos += descriptionLen + 4;\n\n\t\t\tbuffer.writeUInt32BE(this.width, pos);\n\t\t\tbuffer.writeUInt32BE(this.height, pos + 4);\n\t\t\tbuffer.writeUInt32BE(this.bitsPerPixel, pos + 8);\n\t\t\tbuffer.writeUInt32BE(this.colors, pos + 12);\n\t\t\tpos += 16;\n\n\t\t\tbuffer.writeUInt32BE(this.pictureData.length, pos);\n\t\t\tthis.pictureData.copy(buffer, pos + 4);\n\t\t}\n\t\treturn buffer;\n\t}\n\n\tgetSize(): number {\n\t\treturn Buffer.byteLength(this.mimeType) + 4 +\n\t\t\tBuffer.byteLength(this.description) + 4 +\n\t\t\t+16\n\t\t\t+ (this.pictureData ? this.pictureData.length : 0) + 4;\n\t}\n}\n","import {MetaDataBlock} from './block';\n\nexport abstract class MetaWriteableDataBlock extends MetaDataBlock {\n\tabstract publish(): Buffer;\n}\n","import {MetaWriteableDataBlock} from './block.writeable';\n\nexport class BlockVorbiscomment extends MetaWriteableDataBlock {\n\tvendor = '';\n\tcomments: Array<string> = [];\n\n\tconstructor(isLast: boolean) {\n\t\tsuper(isLast, 4);\n\t}\n\n\tpublic static createVorbisCommentBlock(vendor: string, comments: Array<string>): BlockVorbiscomment {\n\t\tconst mdb = new BlockVorbiscomment(false);\n\t\tmdb.vendor = vendor;\n\t\tmdb.comments = comments;\n\t\tmdb.hasData = true;\n\t\treturn mdb;\n\t}\n\n\tparse(buffer: Buffer): void {\n\t\ttry {\n\t\t\tlet pos = 0;\n\t\t\tconst vendorLen = buffer.readUInt32LE(pos);\n\t\t\tthis.vendor = buffer.toString('utf8', pos + 4, pos + vendorLen + 4);\n\t\t\tpos += vendorLen + 4;\n\t\t\tlet commentCount = buffer.readUInt32LE(pos);\n\t\t\tpos += 4;\n\t\t\twhile (commentCount-- > 0) {\n\t\t\t\tconst commentLen = buffer.readUInt32LE(pos);\n\t\t\t\tconst comment = buffer.toString('utf8', pos + 4, pos + commentLen + 4);\n\t\t\t\tthis.comments.push(comment);\n\t\t\t\tpos += commentLen + 4;\n\t\t\t}\n\t\t\tthis.hasData = true;\n\t\t} catch (e) {\n\t\t\tthis.error = e;\n\t\t\tthis.hasData = false;\n\t\t}\n\t}\n\n\tpublish(): Buffer {\n\t\tlet pos = 0;\n\t\tconst size = this.getSize();\n\t\tconst buffer = Buffer.alloc(size + 4);\n\n\t\tlet header = size;\n\t\theader |= (this.type << 24);\n\t\theader |= (this.isLast ? 0x80000000 : 0);\n\t\tbuffer.writeUInt32BE(header >>> 0, pos);\n\t\tpos += 4;\n\n\t\tconst vendorLen = Buffer.byteLength(this.vendor);\n\t\tbuffer.writeUInt32LE(vendorLen, pos);\n\t\tbuffer.write(this.vendor, pos + 4);\n\t\tpos += vendorLen + 4;\n\n\t\tconst commentCount = this.comments.length;\n\t\tbuffer.writeUInt32LE(commentCount, pos);\n\t\tpos += 4;\n\n\t\tfor (let i = 0; i < commentCount; i++) {\n\t\t\tconst comment = this.comments[i];\n\t\t\tconst commentLen = Buffer.byteLength(comment);\n\t\t\tbuffer.writeUInt32LE(commentLen, pos);\n\t\t\tbuffer.write(comment, pos + 4);\n\t\t\tpos += commentLen + 4;\n\t\t}\n\n\t\treturn buffer;\n\t}\n\n\tgetSize(): number {\n\t\tlet size = Buffer.byteLength(this.vendor) + 8;\n\t\tfor (const c of this.comments) {\n\t\t\tsize += Buffer.byteLength(c) + 4;\n\t\t}\n\t\treturn size;\n\t}\n}\n","module.exports = require(\"stream\");","import express from 'express';\nimport ffmpeg from 'fluent-ffmpeg';\nimport {AudioFormatType} from '../../../model/jam-types';\nimport {StreamData} from '../../../typings';\nimport {SupportedTranscodeAudioFormat} from '../../../utils/filetype';\nimport {logger} from '../../../utils/logger';\n\nconst log = logger('transcoder.stream');\n\nexport abstract class TranscoderStream implements StreamData {\n\tstatic needsTranscoding(mediaFormat: string, format: string, maxBitRate: number): boolean {\n\t\treturn (format !== mediaFormat) || (maxBitRate > 0);\n\t}\n\n\tstatic validTranscoding(format: AudioFormatType): boolean {\n\t\treturn SupportedTranscodeAudioFormat.includes(format);\n\t}\n\n\tstatic async getAvailableFormats(): Promise<Array<{ format: string; name: string }>> {\n\t\treturn new Promise<Array<{ format: string; name: string }>>((resolve, reject) => {\n\t\t\tffmpeg().getAvailableFormats((err, formats) => {\n\t\t\t\tif (err || !formats) {\n\t\t\t\t\treturn reject(err);\n\t\t\t\t}\n\t\t\t\tresolve(Object.keys(formats).filter(key => formats[key].canDemux).map(key => {\n\t\t\t\t\treturn {format: key, name: formats[key].description};\n\t\t\t\t}));\n\t\t\t});\n\t\t});\n\t}\n\n\tstatic getTranscodeProc(source: string, format: string, maxBitRate: number): ffmpeg.FfmpegCommand {\n\t\tconst proc = ffmpeg({source})\n\t\t\t.withNoVideo();\n\t\tswitch (format) {\n\t\t\tcase AudioFormatType.flv:\n\t\t\t\treturn proc.toFormat(format).addOptions(['-ar 44100', `-maxrate ${maxBitRate || 128}k`]);\n\t\t\tcase AudioFormatType.ogg:\n\t\t\tcase AudioFormatType.oga:\n\t\t\t\treturn proc.toFormat(format)\n\t\t\t\t\t.withAudioCodec('libvorbis')\n\t\t\t\t\t.addOptions([`-maxrate ${maxBitRate || 128}k`]);\n\t\t\tcase AudioFormatType.mp3:\n\t\t\t\treturn proc\n\t\t\t\t\t.toFormat(format)\n\t\t\t\t\t.withAudioBitrate(`${maxBitRate || 128}k`)\n\t\t\t\t\t.withAudioCodec('libmp3lame');\n\t\t\tcase  AudioFormatType.m4a:\n\t\t\t\treturn proc\n\t\t\t\t\t.toFormat('mp4')\n\t\t\t\t\t.withAudioBitrate(`${maxBitRate || 128}k`);\n\t\t\tdefault:\n\t\t\t\treturn proc\n\t\t\t\t\t.toFormat(format)\n\t\t\t\t\t.withAudioBitrate(`${maxBitRate || 128}k`);\n\t\t}\n\t}\n\n\tstatic async transcodeToFile(source: string, destination: string, format: string, maxBitRate: number): Promise<void> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst proc = TranscoderStream.getTranscodeProc(source, format, maxBitRate);\n\t\t\tproc\n\t\t\t\t.on('start', cmd => {\n\t\t\t\t\tlog.debug(`ffmpeg started with ${cmd}`);\n\t\t\t\t})\n\t\t\t\t.on('end', () => {\n\t\t\t\t\tresolve();\n\t\t\t\t})\n\t\t\t\t.on('error', (err: Error) => {\n\t\t\t\t\treject(err);\n\t\t\t\t})\n\t\t\t\t.save(destination);\n\t\t});\n\t}\n\n\tabstract pipe(stream: express.Response): void;\n}\n","module.exports = require(\"fluent-ffmpeg\");","import moment from 'moment';\n\nexport function getMaxAge(maxAgeSpec: { value: number; unit: string }): number {\n\tlet maxAge = 0;\n\tif (maxAgeSpec.value > 0) {\n\t\tmaxAge = moment.duration(maxAgeSpec.value, maxAgeSpec.unit as moment.unitOfTime.Base).asMilliseconds();\n\t}\n\treturn maxAge;\n}\n","module.exports = require(\"express-session\");","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 53;","// THIS FILE IS GENERATED, DO NOT EDIT MANUALLY\n\nconst typeBool = {type: 'boolean'};\n\nconst typeInt = {type: 'long'};\n\nconst typeString = {type: 'text', fields: {keyword: {type: 'keyword'}}};\n\nconst typeKey = {type: 'keyword'};\n\nconst typeRoot = {\n\tproperties: {\n\t\tname: typeString,\n\t\tpath: typeKey,\n\t\tcreated: typeInt,\n\t\tstrategy: typeKey,\n\t\tid: typeKey,\n\t\ttype: typeInt\n\t}\n};\n\nconst typeUserRoles = {\n\tproperties: {\n\t\tstream: typeBool,\n\t\tupload: typeBool,\n\t\tadmin: typeBool,\n\t\tpodcast: typeBool\n\t}\n};\n\nconst typeUser = {\n\tproperties: {\n\t\tname: typeString,\n\t\tsalt: typeKey,\n\t\thash: typeKey,\n\t\temail: typeKey,\n\t\tcreated: typeInt,\n\t\tscrobblingEnabled: typeBool,\n\t\tmaxBitRate: typeInt,\n\t\tallowedFolder: typeKey,\n\t\troles: typeUserRoles,\n\t\tid: typeKey,\n\t\ttype: typeInt\n\t}\n};\n\nconst typeArtworkImage = {\n\tproperties: {\n\t\twidth: typeInt,\n\t\theight: typeInt,\n\t\tformat: typeKey\n\t}\n};\n\nconst typeArtwork = {\n\tproperties: {\n\t\tid: typeKey,\n\t\tname: typeString,\n\t\ttypes: typeKey,\n\t\timage: typeArtworkImage\n\t}\n};\n\nconst typeFolderTag = {\n\tproperties: {\n\t\tlevel: typeInt,\n\t\ttrackCount: typeInt,\n\t\tfolderCount: typeInt,\n\t\ttype: typeKey,\n\t\tgenres: typeKey,\n\t\talbum: typeKey,\n\t\tartist: typeKey,\n\t\tartistSort: typeKey,\n\t\talbumType: typeKey,\n\t\talbumTrackCount: typeInt,\n\t\ttitle: typeString,\n\t\tyear: typeInt,\n\t\tmbReleaseID: typeKey,\n\t\tmbReleaseGroupID: typeKey,\n\t\tmbAlbumType: typeKey,\n\t\tmbArtistID: typeKey,\n\t\tartworks: typeArtwork\n\t}\n};\n\nconst typeFolder = {\n\tproperties: {\n\t\trootID: typeKey,\n\t\tpath: typeKey,\n\t\tparentID: typeKey,\n\t\ttag: typeFolderTag,\n\t\tid: typeKey,\n\t\ttype: typeInt\n\t}\n};\n\nconst typePlayQueue = {\n\tproperties: {\n\t\tuserID: typeKey,\n\t\ttrackIDs: typeKey,\n\t\tcurrentID: typeKey,\n\t\tposition: typeInt,\n\t\tchanged: typeInt,\n\t\tchangedBy: typeKey,\n\t\tid: typeKey,\n\t\ttype: typeInt\n\t}\n};\n\nconst typeTrackTagChapter = {\n\tproperties: {\n\t\tstart: typeInt,\n\t\tend: typeInt,\n\t\ttitle: typeString\n\t}\n};\n\nconst typeTrackTag = {\n\tproperties: {\n\t\tformat: typeKey,\n\t\talbum: typeKey,\n\t\talbumSort: typeKey,\n\t\talbumArtist: typeKey,\n\t\talbumArtistSort: typeKey,\n\t\tartist: typeKey,\n\t\tartistSort: typeKey,\n\t\tgenre: typeKey,\n\t\tdisc: typeInt,\n\t\tdiscTotal: typeInt,\n\t\ttitle: typeString,\n\t\ttitleSort: typeKey,\n\t\ttrack: typeInt,\n\t\ttrackTotal: typeInt,\n\t\tyear: typeInt,\n\t\tnrTagImages: typeInt,\n\t\tmbTrackID: typeKey,\n\t\tmbAlbumType: typeKey,\n\t\tmbAlbumArtistID: typeKey,\n\t\tmbArtistID: typeKey,\n\t\tmbReleaseID: typeKey,\n\t\tmbReleaseTrackID: typeKey,\n\t\tmbReleaseGroupID: typeKey,\n\t\tmbRecordingID: typeKey,\n\t\tmbAlbumStatus: typeKey,\n\t\tmbReleaseCountry: typeKey,\n\t\tseries: typeKey,\n\t\tseriesNr: typeKey,\n\t\tlyrics: typeKey,\n\t\tchapters: typeTrackTagChapter\n\t}\n};\n\nconst typeTrackMedia = {\n\tproperties: {\n\t\tduration: typeInt,\n\t\tbitRate: typeInt,\n\t\tformat: typeKey,\n\t\tsampleRate: typeInt,\n\t\tchannels: typeInt,\n\t\tencoded: typeKey,\n\t\tmode: typeKey,\n\t\tversion: typeKey\n\t}\n};\n\nconst typeTrack = {\n\tproperties: {\n\t\trootID: typeKey,\n\t\tparentID: typeKey,\n\t\tname: typeString,\n\t\tpath: typeKey,\n\t\tseriesID: typeKey,\n\t\talbumID: typeKey,\n\t\tartistID: typeKey,\n\t\talbumArtistID: typeKey,\n\t\ttag: typeTrackTag,\n\t\tmedia: typeTrackMedia,\n\t\tid: typeKey,\n\t\ttype: typeInt\n\t}\n};\n\nconst typeAlbum = {\n\tproperties: {\n\t\tslug: typeKey,\n\t\tname: typeString,\n\t\tgenres: typeKey,\n\t\trootIDs: typeKey,\n\t\ttrackIDs: typeKey,\n\t\tfolderIDs: typeKey,\n\t\talbumType: typeKey,\n\t\tseries: typeKey,\n\t\tseriesID: typeKey,\n\t\tseriesNr: typeKey,\n\t\tartistID: typeKey,\n\t\tartist: typeKey,\n\t\tyear: typeInt,\n\t\tduration: typeInt,\n\t\tcreated: typeInt,\n\t\tmbArtistID: typeKey,\n\t\tmbReleaseID: typeKey,\n\t\tid: typeKey,\n\t\ttype: typeInt\n\t}\n};\n\nconst typeArtist = {\n\tproperties: {\n\t\tslug: typeKey,\n\t\tname: typeString,\n\t\tnameSort: typeKey,\n\t\trootIDs: typeKey,\n\t\ttrackIDs: typeKey,\n\t\tfolderIDs: typeKey,\n\t\talbumIDs: typeKey,\n\t\tseriesIDs: typeKey,\n\t\talbumTypes: typeKey,\n\t\tmbArtistID: typeKey,\n\t\tgenres: typeKey,\n\t\tcreated: typeInt,\n\t\tid: typeKey,\n\t\ttype: typeInt\n\t}\n};\n\nconst typeRadio = {\n\tproperties: {\n\t\tname: typeString,\n\t\turl: typeKey,\n\t\thomepage: typeKey,\n\t\tdisabled: typeBool,\n\t\tcreated: typeInt,\n\t\tchanged: typeInt,\n\t\tid: typeKey,\n\t\ttype: typeInt\n\t}\n};\n\nconst typeState = {\n\tproperties: {\n\t\tuserID: typeKey,\n\t\tdestID: typeKey,\n\t\tdestType: typeInt,\n\t\tplayed: typeInt,\n\t\tlastplayed: typeInt,\n\t\tfaved: typeInt,\n\t\trated: typeInt,\n\t\tid: typeKey,\n\t\ttype: typeInt\n\t}\n};\n\nconst typePlaylist = {\n\tproperties: {\n\t\tname: typeString,\n\t\tuserID: typeKey,\n\t\tcomment: typeKey,\n\t\tcoverArt: typeKey,\n\t\tchanged: typeInt,\n\t\tcreated: typeInt,\n\t\tallowedUser: typeKey,\n\t\tisPublic: typeBool,\n\t\tduration: typeInt,\n\t\ttrackIDs: typeKey,\n\t\tid: typeKey,\n\t\ttype: typeInt\n\t}\n};\n\nconst typePodcastTag = {\n\tproperties: {\n\t\ttitle: typeString,\n\t\tlink: typeKey,\n\t\tauthor: typeKey,\n\t\tdescription: typeKey,\n\t\tgenerator: typeKey,\n\t\timage: typeKey,\n\t\tcategories: typeKey\n\t}\n};\n\nconst typePodcast = {\n\tproperties: {\n\t\turl: typeKey,\n\t\tcreated: typeInt,\n\t\tlastCheck: typeInt,\n\t\tstatus: typeKey,\n\t\timage: typeKey,\n\t\terrorMessage: typeKey,\n\t\ttag: typePodcastTag,\n\t\tid: typeKey,\n\t\ttype: typeInt\n\t}\n};\n\nconst typePodcastEpisodeChapter = {\n\tproperties: {\n\t\tstart: typeInt,\n\t\ttitle: typeString\n\t}\n};\n\nconst typePodcastEpisodeEnclosure = {\n\tproperties: {\n\t\turl: typeKey,\n\t\ttype: typeKey,\n\t\tlength: typeInt\n\t}\n};\n\nconst typeEpisode = {\n\tproperties: {\n\t\tpodcastID: typeKey,\n\t\tpodcast: typeKey,\n\t\tstatus: typeKey,\n\t\terror: typeKey,\n\t\tpath: typeKey,\n\t\tlink: typeKey,\n\t\tsummary: typeKey,\n\t\tdate: typeInt,\n\t\tduration: typeInt,\n\t\tname: typeString,\n\t\tguid: typeKey,\n\t\tauthor: typeKey,\n\t\tchapters: typePodcastEpisodeChapter,\n\t\tenclosures: typePodcastEpisodeEnclosure,\n\t\ttag: typeTrackTag,\n\t\tmedia: typeTrackMedia,\n\t\tid: typeKey,\n\t\ttype: typeInt\n\t}\n};\n\nconst typeBookmark = {\n\tproperties: {\n\t\tdestID: typeKey,\n\t\tuserID: typeKey,\n\t\tcomment: typeKey,\n\t\tcreated: typeInt,\n\t\tchanged: typeInt,\n\t\tposition: typeInt,\n\t\tid: typeKey,\n\t\ttype: typeInt\n\t}\n};\n\nconst typeMetaData = {\n\tproperties: {\n\t\tdate: typeInt,\n\t\tname: typeString,\n\t\tdataType: typeInt,\n\t\tid: typeKey,\n\t\ttype: typeInt\n\t}\n};\n\nconst typeSettings = {\n\tproperties: {\n\t\tsection: typeKey,\n\t\tversion: typeKey,\n\t\tid: typeKey,\n\t\ttype: typeInt\n\t}\n};\n\nconst typeSession = {\n\tproperties: {\n\t\tuserID: typeKey,\n\t\tclient: typeKey,\n\t\tagent: typeKey,\n\t\texpires: typeInt,\n\t\tmode: typeKey,\n\t\tsessionID: typeKey,\n\t\tcookie: typeKey,\n\t\tjwth: typeKey,\n\t\tid: typeKey,\n\t\ttype: typeInt\n\t}\n};\n\nexport const mapping: any = {\n\troot: typeRoot,\n\tuser: typeUser,\n\tfolder: typeFolder,\n\tplayqueue: typePlayQueue,\n\ttrack: typeTrack,\n\talbum: typeAlbum,\n\tartist: typeArtist,\n\tradio: typeRadio,\n\tstate: typeState,\n\tplaylist: typePlaylist,\n\tpodcast: typePodcast,\n\tepisode: typeEpisode,\n\tbookmark: typeBookmark,\n\tmetadata: typeMetaData,\n\tsettings: typeSettings,\n\tsession: typeSession\n};\n","import * as pack from '../package.json';\n\nexport const JAMSERVE_VERSION = pack.version;\n","module.exports = require(\"sharp\");","import fs from 'fs';\nimport http from 'http';\nimport request from 'request';\nimport {fileDeleteIfExists} from './fs-utils';\n\nexport async function downloadFile(url: string, filename: string): Promise<void> {\n\treturn new Promise<void>((resolve, reject) => {\n\t\trequest.get(url)\n\t\t\t.on('error', (err: Error) => {\n\t\t\t\treject(err);\n\t\t\t})\n\t\t\t.on('complete', (res: { statusCode: number }) => {\n\t\t\t\tif (res.statusCode !== 200) {\n\t\t\t\t\tfileDeleteIfExists(filename).then(() => {\n\t\t\t\t\t\treject(new Error(http.STATUS_CODES[res.statusCode]));\n\t\t\t\t\t}).catch(e => {\n\t\t\t\t\t\treject(new Error(http.STATUS_CODES[res.statusCode]));\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.pipe(fs.createWriteStream(filename));\n\t});\n}\n","import archiver from 'archiver';\nimport express from 'express';\nimport {StreamData} from '../typings';\nimport {replaceFileSystemChars} from './fs-utils';\nimport {logger} from './logger';\n\nconst log = logger('BaseCompressStream');\n\nexport abstract class BaseCompressStream implements StreamData {\n\tpublic filename: string;\n\tpublic streaming = true;\n\tpublic format: string;\n\n\tprotected constructor(filename: string, format?: string) {\n\t\tthis.filename = replaceFileSystemChars(filename, '_').replace(/ /g, '_');\n\t\tthis.format = format || 'zip';\n\t\tif (!BaseCompressStream.isSupportedFormat(this.format)) {\n\t\t\tthrow new Error('Unsupported Download Format');\n\t\t}\n\t}\n\n\tstatic isSupportedFormat(format: string): boolean {\n\t\treturn ['zip', 'tar'].includes(format);\n\t}\n\n\tpipe(stream: express.Response): void {\n\t\t// log.verbose('Start streaming');\n\t\tconst format = 'zip';\n\t\tconst archive = archiver(this.format as archiver.Format, {zlib: {level: 0}});\n\t\tarchive.on('error', err => {\n\t\t\t// log.error('archiver err ' + err);\n\t\t\tthrow err;\n\t\t});\n\t\tstream.contentType('zip');\n\t\tstream.setHeader('Content-Disposition', `attachment; filename=\"${this.filename || 'download'}.${format}\"`);\n\t\t// stream.setHeader('Content-Length', stat.size); do NOT report wrong size!\n\t\tstream.on('finish', () => {\n\t\t\t// log.verbose('streamed ' + archive.pointer() + ' total bytes');\n\t\t\tthis.streaming = false;\n\t\t});\n\t\tarchive.pipe(stream);\n\t\tthis.run(archive);\n\t\tarchive.finalize().catch(e => log.error(e));\n\t}\n\n\tprotected abstract run(archive: archiver.Archiver): void;\n}\n","import {DBObjectType} from '../../db/db.types';\nimport {BaseListService} from '../base/dbobject-list.service';\nimport {StateService} from '../state/state.service';\nimport {Track} from '../track/track.model';\nimport {TrackStore} from '../track/track.store';\nimport {Playlist} from './playlist.model';\nimport {PlaylistStore, SearchQueryPlaylist} from './playlist.store';\n\nexport async function updatePlayListTracks(trackStore: TrackStore, playlist: Playlist): Promise<void> {\n\tconst tracks = await trackStore.byIds(playlist.trackIDs);\n\tconst trackHash: { [id: string]: Track } = {};\n\ttracks.forEach(track => {\n\t\ttrackHash[track.id] = track;\n\t});\n\tplaylist.trackIDs = playlist.trackIDs.filter(id => !!trackHash[id]);\n\tplaylist.duration = 0;\n\tplaylist.trackIDs.forEach(id => {\n\t\tconst track = trackHash[id];\n\t\tplaylist.duration += (track.media.duration || 0);\n\t});\n}\n\nexport class PlaylistService extends BaseListService<Playlist, SearchQueryPlaylist> {\n\n\tconstructor(public playlistStore: PlaylistStore, private trackStore: TrackStore, stateService: StateService) {\n\t\tsuper(playlistStore, stateService);\n\t}\n\n\tdefaultSort(items: Array<Playlist>): Array<Playlist> {\n\t\treturn items.sort((a, b) => a.name.localeCompare(b.name));\n\t}\n\n\tasync create(name: string, comment: string | undefined, isPublic: boolean, userID: string, trackIDs: Array<string>): Promise<Playlist> {\n\t\tconst now = Date.now();\n\t\tconst playlist: Playlist = {\n\t\t\tid: '',\n\t\t\ttype: DBObjectType.playlist,\n\t\t\tname,\n\t\t\tcomment,\n\t\t\tisPublic,\n\t\t\tuserID,\n\t\t\tcreated: now,\n\t\t\tchanged: now,\n\t\t\ttrackIDs,\n\t\t\tduration: 0\n\t\t};\n\t\tawait updatePlayListTracks(this.trackStore, playlist);\n\t\tplaylist.id = await this.playlistStore.add(playlist);\n\t\treturn playlist;\n\t}\n\n\tasync update(playlist: Playlist): Promise<void> {\n\t\tawait updatePlayListTracks(this.trackStore, playlist);\n\t\tawait this.playlistStore.replace(playlist);\n\t}\n\n\tasync remove(playlist: Playlist): Promise<void> {\n\t\tawait this.playlistStore.remove(playlist.id);\n\t}\n}\n","import {hashMD5} from './hash';\n\nexport function generateArtworkId(folderID: string, filename: string, size: number): string {\n\treturn `${folderID}-${hashMD5(`${filename}${size}${filename}`)}`;\n}\n","export function extractAlbumName(name: string): string {\n\tconst result = name\n\t\t.replace(/\\(((\\d\\d\\d\\d)|(\\d* ?cds)|(cd ?\\d*)|(disc ?\\d*)|(disc ?\\d*:.*)|(bonus.*)|(.*edition)|(.*retail)|(\\d* of \\d*)|(eps?|bootleg|deluxe|promo|single|lp|limited edition|retro|ost|uvs|demp|demos|remastered|remix|live|remixes|vinyl|collection|maxi|bonus disc))\\)/gi, '')\n\t\t.replace(/\\[((\\d\\d\\d\\d)|(\\d* ?cds)|(cd ?\\d*)|(disc ?\\d*)|(disc ?\\d*:.*)|(bonus.*)|(.*edition)|(.*retail)|(\\d* of \\d*)|(eps?|bootleg|deluxe|promo|single|lp|limited edition|retro|ost|uvs|demp|demos|remastered|remix|live|remixes|vinyl|collection|maxi|bonus disc))\\]/gi, '')\n\t\t.replace(/-? cd\\d*/gi, '')\n\t\t.trim();\n\tif (result.length === 0) {\n\t\treturn name.trim();\n\t}\n\treturn result;\n}\n","import {slugify} from '../../../utils/slug';\n\nexport interface MetaStatValue<T> {\n\tcount: number;\n\tval: T;\n}\n\nexport interface MetaStatString extends MetaStatValue<string> {\n}\n\nexport interface MetaStatNumber extends MetaStatValue<number> {\n}\n\nexport class MetaStatBuilder {\n\tstats: {\n\t\t[name: string]: { [key: string]: { count: number; val: string } };\n\t} = {};\n\n\tprivate static convert2Numlist(o: { [key: string]: { count: number; val: string } }): Array<MetaStatNumber> {\n\t\treturn Object.keys(o).map(key => {\n\t\t\treturn {count: o[key].count, val: Number(o[key].val)};\n\t\t}).sort((a, b) => {\n\t\t\treturn a.count - b.count;\n\t\t});\n\t}\n\n\tprivate static convert2list(o: { [key: string]: { count: number; val: string } }): Array<MetaStatString> {\n\t\treturn Object.keys(o).map(key => {\n\t\t\treturn o[key];\n\t\t}).sort((a, b) => {\n\t\t\treturn a.count - b.count;\n\t\t});\n\t}\n\n\tprivate static getMostUsedTagValue<T>(list: Array<MetaStatValue<T>>, multi?: T): T | undefined {\n\t\tif (list.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (list.length === 1) {\n\t\t\treturn list[0].val;\n\t\t}\n\t\tlist = list.sort((a, b) => b.count - a.count);\n\t\tif (list[0].count - list[1].count > 4) {\n\t\t\treturn list[0].val;\n\t\t}\n\t\tif (list.length > 3 && multi !== undefined) {\n\t\t\treturn multi;\n\t\t}\n\t\tconst cleaned = list.filter(o => {\n\t\t\treturn o.count > 1;\n\t\t});\n\t\tif (cleaned.length > 1 && multi !== undefined) {\n\t\t\treturn multi;\n\t\t}\n\t\tif (cleaned.length > 0) {\n\t\t\treturn cleaned[0].val;\n\t\t}\n\t\tif (multi !== undefined) {\n\t\t\treturn multi;\n\t\t}\n\t\treturn list[0].val;\n\t}\n\n\tstatID(name: string, val?: string): void {\n\t\tif (val && val.trim().length > 0) {\n\t\t\tconst slug = val.split(' ')[0].trim();\n\t\t\tthis.stats[name] = this.stats[name] || {};\n\t\t\tthis.stats[name][slug] = this.stats[name][val] || {count: 0, val: slug};\n\t\t\tthis.stats[name][slug].count += 1;\n\t\t}\n\t}\n\n\tstatNumber(name: string, val?: number): void {\n\t\tif (val !== undefined) {\n\t\t\tconst slug = val.toString();\n\t\t\tthis.stats[name] = this.stats[name] || {};\n\t\t\tthis.stats[name][slug] = this.stats[name][slug] || {count: 0, val};\n\t\t\tthis.stats[name][slug].count += 1;\n\t\t}\n\t}\n\n\tstatSlugValue(name: string, val?: string): void {\n\t\tif (val && val.trim().length > 0) {\n\t\t\tconst slug = slugify(val);\n\t\t\tthis.stats[name] = this.stats[name] || {};\n\t\t\tthis.stats[name][slug] = this.stats[name][slug] || {count: 0, val: val.trim()};\n\t\t\tthis.stats[name][slug].count += 1;\n\t\t}\n\t}\n\n\tstatTrackCount(name: string, trackTotal?: number, disc?: number): void {\n\t\tif (trackTotal !== undefined) {\n\t\t\tconst slug = `${(disc !== undefined ? disc : 1)}-${trackTotal}`;\n\t\t\tthis.stats[name] = this.stats[name] || {};\n\t\t\tthis.stats[name][slug] = this.stats[name][slug] || {count: 0, val: trackTotal};\n\t\t\tthis.stats[name][slug].count += 1;\n\t\t}\n\t}\n\n\tasList(name: string): Array<MetaStatString> {\n\t\treturn MetaStatBuilder.convert2list(this.stats[name] || {});\n\t}\n\n\tasStringList(name: string): Array<string> {\n\t\treturn MetaStatBuilder.convert2list(this.stats[name] || {})\n\t\t\t.sort((a, b) => a.count - b.count)\n\t\t\t.map(entry => entry.val);\n\t}\n\n\tasNumberList(name: string): Array<MetaStatNumber> {\n\t\treturn MetaStatBuilder.convert2Numlist(this.stats[name] || {});\n\t}\n\n\tmostUsed(name: string, multi?: string): undefined | string {\n\t\tconst list = this.asList(name);\n\t\treturn MetaStatBuilder.getMostUsedTagValue<string>(list, multi);\n\t}\n\n\tmostUsedNumber(name: string): undefined | number {\n\t\tconst list = this.asNumberList(name);\n\t\treturn MetaStatBuilder.getMostUsedTagValue<number>(list);\n\t}\n\n}\n","import program from 'commander';\nimport {Server} from './api/server';\nimport {loadConfig} from './config/config';\nimport {Database} from './db/db.model';\nimport {DBElastic} from './db/elasticsearch/db-elastic';\nimport {ElasticsearchConfig} from './db/elasticsearch/db-elastic.types';\nimport {DBNedb} from './db/nedb/db-nedb';\nimport {Engine} from './engine/engine';\nimport {Store} from './engine/store/store';\nimport {configureLogger, logger} from './utils/logger';\nimport {JAMSERVE_VERSION} from './version';\n\nprogram\n\t.version(JAMSERVE_VERSION, '-v, --version')\n\t.usage('[options]')\n\t.option('-r, --reset', 'reset the db')\n\t.option('-c, --config <folder>', 'config file folder')\n\t.parse(process.argv);\n\nconst config = loadConfig(program.config);\n\nconfigureLogger(config.log.level);\nconst log = logger('JamServe');\n\nconst db: Database =\n\t(config.database.use === 'elasticsearch') ?\n\t\tnew DBElastic(config.database.options.elasticsearch as ElasticsearchConfig) :\n\t\tnew DBNedb(config.getDataPath(['nedb']));\nconst store = new Store(db);\nconst engine = new Engine(config, store, JAMSERVE_VERSION);\nconst server = new Server(engine);\n\nasync function run(): Promise<void> {\n\ttry {\n\t\tlog.info(`Jamserve ${engine.version} starting`);\n\t\tawait engine.start();\n\t\tawait server.start();\n\t\tconst version = await engine.settingsService.settingsVersion();\n\t\tconst forceRescan = !!version && version !== engine.version;\n\t\tif (forceRescan) {\n\t\t\tlog.info(`Updating from version ${version || '-'}`);\n\t\t}\n\t\tif (forceRescan || engine.settingsService.settings.library.scanAtStart) {\n\t\t\tengine.ioService.refresh(forceRescan).then(() => {\n\t\t\t\treturn forceRescan ? engine.settingsService.saveSettings() : undefined;\n\t\t\t}).catch(e => {\n\t\t\t\tconsole.error('Error on startup scanning', e);\n\t\t\t});\n\t\t}\n\t} catch (e) {\n\t\tconsole.error('Error on startup', e);\n\t\treturn;\n\t}\n}\n\nasync function stop(): Promise<void> {\n\ttry {\n\t\tawait server.stop();\n\t\tawait engine.stop();\n\t\tprocess.exit();\n\t} catch (e) {\n\t\tconsole.error('Error on server stop', e);\n\t\tprocess.exit(1);\n\t}\n}\n\nasync function runClearDB(): Promise<void> {\n\tlog.info(`Jamserve ${engine.version} cleaning DB`);\n\tawait engine.store.open();\n\tawait engine.store.reset();\n\tlog.info(`Jamserve ${engine.version} removing cache files`);\n\tawait engine.clearLocalFiles();\n\tawait engine.store.close();\n}\n\nif (program.reset) {\n\trunClearDB().then(() => {\n\t\tconsole.log('done.');\n\t}).catch(e => {\n\t\tconsole.error(e);\n\t});\n} else {\n\n\tprocess.on('SIGTERM', () => {\n\t\tstop().catch(e => {\n\t\t\tconsole.error(e);\n\t\t});\n\t});\n\n\trun().catch(e => {\n\t\tconsole.error(e);\n\t});\n}\n","module.exports = require(\"commander\");","import bodyParser from 'body-parser';\nimport express from 'express';\n// import rateLimit from 'express-rate-limit';\nimport helmet from 'helmet';\nimport * as http from 'http';\nimport path from 'path';\nimport {Engine} from '../engine/engine';\nimport {logger} from '../utils/logger';\nimport {initJamRouter} from './jam/router';\nimport {JAMAPI_URL_VERSION} from './jam/version';\n\nconst log = logger('Server');\n\nexport interface EngineRequest extends express.Request {\n\tengine: Engine;\n}\n\nexport class Server {\n\tapp: express.Application;\n\tengine: Engine;\n\tserver: http.Server | undefined;\n\n\tconstructor(engine: Engine) {\n\t\tthis.engine = engine;\n\t\tconst app: express.Application = express();\n\t\tapp.use(bodyParser.urlencoded({extended: true, limit: '10mb'}));\n\t\tapp.use(bodyParser.json({limit: '10mb'}));\n\t\tapp.use(bodyParser.json({type: 'application/vnd.api+json', limit: '10mb'}));\n\n\t\tapp.use(helmet());\n\n\t\tif (engine.config.server.session.cookie.proxy) {\n\t\t\tapp.enable('trust proxy'); // trust first proxy\n\t\t}\n\n\t\tfunction EngineMiddleWare(req: express.Request, res: express.Response, next: express.NextFunction): void {\n\t\t\t(req as EngineRequest).engine = engine;\n\t\t\tnext();\n\t\t}\n\n\t\t/*\n\t\tTODO: rateLimit limits normal use, since it's counting and blocking 200 requests\n\t\tconst limiter = rateLimit({\n\t\t\twindowMs: engine.config.server.limit.api.window * 1000,\n\t\t\tmax: engine.config.server.limit.api.max,\n\t\t\tskipSuccessfulRequests: true,\n\t\t\tmessage: 'Too many request fails from this IP, please try again after an hour'\n\t\t});\n\t\tapp.use(limiter);\n\t\t */\n\n\t\tapp.use(EngineMiddleWare);\n\t\tapp.use(`/jam/${JAMAPI_URL_VERSION}`, initJamRouter(engine));\n\n\t\t// frontend (jamberry config file)\n\t\tconst configFile = path.resolve('./config/jamberry.config.js');\n\t\tapp.get('/assets/config/config.js', (req, res) => {\n\t\t\tres.sendFile(configFile);\n\t\t});\n\t\t// frontend (any)\n\t\tapp.get('/*', express.static(path.resolve(engine.config.paths.frontend)));\n\t\tconst indexFile = path.resolve(engine.config.paths.frontend, 'index.html');\n\t\tapp.get('/*', (req: express.Request, res: express.Response) => {\n\t\t\tres.sendFile(indexFile);\n\t\t});\n\n\t\tthis.app = app;\n\t}\n\n\tgetURL(): string {\n\t\treturn `http://${this.engine.config.server.listen === '127.0.0.1' ? 'localhost' : this.engine.config.server.listen}:${this.engine.config.server.port}`;\n\t}\n\n\tasync start(): Promise<void> {\n\t\tthis.server = this.app.listen(this.engine.config.server.port, this.engine.config.server.listen);\n\t\tthis.server.setTimeout(4 * 60000); // 4 minutes\n\t\tlog.info(`listening at ${this.getURL()}`);\n\t}\n\n\tasync stop(): Promise<void> {\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\t\tif (this.server) {\n\t\t\t\t\tthis.server.close(err => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t// this.server.unref();\n\t\t\t\t} else {\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n\n}\n","module.exports = require(\"body-parser\");","module.exports = require(\"helmet\");","module.exports = require(\"winston\");","import express from 'express';\nimport rateLimit from 'express-rate-limit';\nimport path from 'path';\nimport {Engine} from '../../engine/engine';\nimport {logger} from '../../utils/logger';\nimport {JamApi} from './api';\nimport {apiCheck} from './check';\nimport {registerAuthenticatedCors, registerPublicCORS} from './cors';\nimport {NotFoundError} from './error';\nimport {registerAuthentication, UserRequest} from './login';\nimport {CallSessionLoginHandler, CallSessionLogoutHandler, registerPassPort} from './passport';\nimport {ApiResponder} from './response';\nimport {checkRoles} from './roles';\nimport {JamApiRole, Register, registerAccessControlApi, RegisterCallback, registerPublicApi} from './routes';\nimport {registerSession} from './session';\nimport {jamUpload} from './upload';\n\nconst log = logger('Jam.Api');\n\nfunction registerLog(router: express.Router, engine: Engine): void {\n\trouter.use((req, res, next) => {\n\t\t// log all requests\n\t\tlog.info(req.originalUrl);\n\t\tnext();\n\t});\n}\n\nfunction register404Error(router: express.Router, engine: Engine): void {\n\trouter.use((req, res) => {\n\t\tApiResponder.error(req, res, NotFoundError('jam api cmd not found'));\n\t});\n}\n\nfunction registerLogin(router: express.Router, api: JamApi): void {\n\tconst LoginLimiter = rateLimit({\n\t\twindowMs: api.engine.config.server.limit.login.window * 1000,\n\t\tskipSuccessfulRequests: true,\n\t\tmax: api.engine.config.server.limit.login.max,\n\t\tmessage: 'Too many login fails from this IP, please try again later'\n\t});\n\trouter.post('/login', LoginLimiter, apiCheck('/login'), CallSessionLoginHandler as express.RequestHandler);\n}\n\nfunction registerApiPublic(router: express.Router, api: JamApi): void {\n\tregisterLogin(router, api);\n\tconst register: Register = {\n\t\tget(name: string, execute: RegisterCallback, roles?: Array<JamApiRole>, apiCheckName?: string): void {\n\t\t\trouter.get<any>(name, apiCheck(apiCheckName || name), async (req, res) => {\n\t\t\t\ttry {\n\t\t\t\t\tawait execute(req as UserRequest, res);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tlog.error(e);\n\t\t\t\t\tApiResponder.error(req, res, e);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tpost(name: string, execute: RegisterCallback, roles?: Array<JamApiRole>, apiCheckName?: string): void {\n\t\t\t// dummy, there is no public post\n\t\t},\n\t\tupload(name: string, field: string, execute: RegisterCallback, roles?: Array<JamApiRole>, apiCheckName?: string): void {\n\t\t\t// dummy, there is no public upload\n\t\t}\n\t};\n\tregisterPublicApi(register, api);\n}\n\nfunction registerApiAuthenticated(router: express.Router, api: JamApi): void {\n\n\trouter.post('/logout', CallSessionLogoutHandler as express.RequestHandler);\n\trouter.use('/docs', express.static(path.resolve('./static/docs/api/')));\n\n\tconst upload = jamUpload(api.engine.config.getDataPath(['cache', 'uploads']));\n\tconst register: Register = {\n\t\tget(name: string, execute: RegisterCallback, roles?: Array<JamApiRole>, apiCheckName?: string): void {\n\t\t\trouter.get<any>(name, apiCheck(apiCheckName || name), async (req, res) => {\n\t\t\t\ttry {\n\t\t\t\t\tawait checkRoles((req as UserRequest).user, roles);\n\t\t\t\t\tawait execute(req as UserRequest, res);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tlog.debug(e);\n\t\t\t\t\tApiResponder.error(req, res, e);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tpost(name: string, execute: RegisterCallback, roles?: Array<JamApiRole>, apiCheckName?: string): void {\n\t\t\trouter.post(name, apiCheck(apiCheckName || name), async (req, res) => {\n\t\t\t\ttry {\n\t\t\t\t\tawait checkRoles((req as UserRequest).user, roles);\n\t\t\t\t\tawait execute(req as UserRequest, res);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tlog.debug(e);\n\t\t\t\t\tApiResponder.error(req, res, e);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tupload(name: string, field: string, execute: RegisterCallback, roles?: Array<JamApiRole>, apiCheckName?: string): void {\n\t\t\trouter.post(name, upload.handler(field), apiCheck(apiCheckName || name), async (req, res) => {\n\t\t\t\ttry {\n\t\t\t\t\tawait checkRoles((req as UserRequest).user, roles);\n\t\t\t\t\tawait execute(req as UserRequest, res);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tlog.debug(e);\n\t\t\t\t\tApiResponder.error(req, res, e);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\tregisterAccessControlApi(register, api);\n}\n\nexport function initJamRouter(engine: Engine): express.Router {\n\tconst api = new JamApi(engine);\n\tconst router = express.Router();\n\n\tregisterLog(router, engine);\n\tregisterSession(router, engine);\n\tregisterPassPort(router, engine);\n\n\tregisterPublicCORS(router, engine);\n\tregisterApiPublic(router, api);\n\n\tregisterAuthentication(router, engine); // ensure a valid logged in req.user exists for all requests from here on\n\tregisterAuthenticatedCors(router, engine);\n\tregisterApiAuthenticated(router, api);\n\n\tregister404Error(router, engine);\n\treturn router;\n}\n","module.exports = require(\"express-rate-limit\");","import {AlbumController} from '../../engine/album/album.controller';\nimport {ArtistController} from '../../engine/artist/artist.controller';\nimport {AutocompleteController} from '../../engine/autocomplete/autocomplete.controller';\nimport {BookmarkController} from '../../engine/bookmark/bookmark.controller';\nimport {ChatController} from '../../engine/chat/chat.controller';\nimport {DownloadController} from '../../engine/download/download.controller';\nimport {Engine} from '../../engine/engine';\nimport {EpisodeController} from '../../engine/episode/episode.controller';\nimport {FolderController} from '../../engine/folder/folder.controller';\nimport {GenreController} from '../../engine/genre/genre.controller';\nimport {ImageController} from '../../engine/image/image.controller';\nimport {MetadataController} from '../../engine/metadata/metadata.controller';\nimport {NowPlayingController} from '../../engine/nowplaying/nowplaying.controller';\nimport {PlaylistController} from '../../engine/playlist/playlist.controller';\nimport {PlayQueueController} from '../../engine/playqueue/playqueue.controller';\nimport {PodcastController} from '../../engine/podcast/podcast.controller';\nimport {RadioController} from '../../engine/radio/radio.controller';\nimport {RootController} from '../../engine/root/root.controller';\nimport {SeriesController} from '../../engine/series/series.controller';\nimport {SessionController} from '../../engine/session/session.controller';\nimport {SettingsController} from '../../engine/settings/settings.controller';\nimport {StatsController} from '../../engine/stats/stats.controller';\nimport {StreamController} from '../../engine/stream/stream.controller';\nimport {TrackController} from '../../engine/track/track.controller';\nimport {UserController} from '../../engine/user/user.controller';\nimport {User} from '../../engine/user/user.model';\nimport {WaveformController} from '../../engine/waveform/waveform.controller';\n\nexport interface JamRequest<T> {\n\tquery: T;\n\tuser: User;\n\tclient?: string;\n\tfile?: string;\n\tfileType?: string;\n}\n\nexport class JamApi {\n\talbumController: AlbumController;\n\tartistController: ArtistController;\n\tautocompleteController: AutocompleteController;\n\tbookmarkController: BookmarkController;\n\tchatController: ChatController;\n\tdownloadController: DownloadController;\n\tepisodeController: EpisodeController;\n\tfolderController: FolderController;\n\tgenreController: GenreController;\n\timageController: ImageController;\n\tmetadataController: MetadataController;\n\tnowPlayingController: NowPlayingController;\n\tplaylistController: PlaylistController;\n\tplayqueueController: PlayQueueController;\n\tpodcastController: PodcastController;\n\tradioController: RadioController;\n\trootController: RootController;\n\tseriesController: SeriesController;\n\tsessionController: SessionController;\n\tsettingsController: SettingsController;\n\tstatsController: StatsController;\n\tstreamController: StreamController;\n\ttrackController: TrackController;\n\tuserController: UserController;\n\twaveformController: WaveformController;\n\n\tconstructor(public engine: Engine) {\n\t\tthis.settingsController = new SettingsController(this.engine.settingsService);\n\t\tthis.streamController = new StreamController(this.engine.streamService, this.engine.nowPlayingService, this.engine.store);\n\t\tthis.chatController = new ChatController(this.engine.chatService);\n\t\tthis.genreController = new GenreController(engine.genreService);\n\t\tthis.statsController = new StatsController(engine.statsService);\n\t\tthis.nowPlayingController = new NowPlayingController(engine.nowPlayingService);\n\t\tthis.imageController = new ImageController(this.engine.store, this.engine.imageService);\n\t\tthis.downloadController = new DownloadController(this.engine.store, this.engine.downloadService);\n\t\tthis.waveformController = new WaveformController(this.engine.store, this.engine.waveformService);\n\t\tthis.autocompleteController = new AutocompleteController(this.engine.store);\n\t\tthis.radioController = new RadioController(this.engine.radioService,\n\t\t\tthis.engine.stateService, this.engine.imageService, this.engine.downloadService);\n\t\tthis.rootController = new RootController(this.engine.rootService, this.engine.ioService,\n\t\t\tthis.engine.stateService, this.engine.imageService, this.engine.downloadService);\n\t\tthis.trackController = new TrackController(this.engine.trackService, this.engine.folderService, this.engine.audioModule, this.engine.bookmarkService, this.engine.metaDataService, this.streamController, this.engine.ioService, this.engine.rootService,\n\t\t\tthis.engine.stateService, this.engine.imageService, this.engine.downloadService);\n\t\tthis.episodeController = new EpisodeController(this.engine.episodeService, this.streamController,\n\t\t\tthis.engine.stateService, this.engine.imageService, this.engine.downloadService);\n\t\tthis.podcastController = new PodcastController(this.engine.podcastService, this.episodeController,\n\t\t\tthis.engine.stateService, this.engine.imageService, this.engine.downloadService);\n\t\tthis.albumController = new AlbumController(this.engine.albumService, this.trackController, this.engine.metaDataService, this.engine.indexService,\n\t\t\tthis.engine.stateService, this.engine.imageService, this.engine.downloadService);\n\t\tthis.seriesController = new SeriesController(this.engine.seriesService, this.trackController, this.albumController,\n\t\t\tthis.engine.metaDataService, this.engine.indexService,\n\t\t\tthis.engine.stateService, this.engine.imageService, this.engine.downloadService);\n\t\tthis.artistController = new ArtistController(this.engine.artistService, this.trackController, this.seriesController, this.albumController,\n\t\t\tthis.engine.metaDataService, this.engine.indexService,\n\t\t\tthis.engine.stateService, this.engine.imageService, this.engine.downloadService);\n\t\tthis.folderController = new FolderController(this.engine.folderService, this.trackController, this.engine.metaDataService, this.engine.indexService,\n\t\t\tthis.engine.rootService, this.engine.stateService, this.engine.imageService, this.engine.downloadService, this.engine.ioService);\n\t\tthis.sessionController = new SessionController(this.engine.sessionService, this.engine.config);\n\t\tthis.userController = new UserController(this.engine.userService,\n\t\t\tthis.engine.stateService, this.engine.imageService, this.engine.downloadService, this.engine.sessionService);\n\t\tthis.playlistController = new PlaylistController(this.engine.playlistService, this.trackController,\n\t\t\tthis.engine.stateService, this.engine.imageService, this.engine.downloadService);\n\t\tthis.bookmarkController = new BookmarkController(this.engine.bookmarkService, this.trackController);\n\t\tthis.playqueueController = new PlayQueueController(this.engine.playQueueService, this.trackController);\n\t\tthis.metadataController = new MetadataController(this.engine.metaDataService, this.trackController);\n\t}\n\n}\n","import {JamRequest} from '../../api/jam/api';\nimport {DBObjectType} from '../../db/db.types';\nimport {Jam} from '../../model/jam-rest-data';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {paginate} from '../../utils/paginate';\nimport {BaseListController} from '../base/dbobject-list.controller';\nimport {ListResult} from '../base/list-result';\nimport {DownloadService} from '../download/download.service';\nimport {ImageService} from '../image/image.service';\nimport {formatAlbumIndex} from '../index/index.format';\nimport {IndexService} from '../index/index.service';\nimport {MetaDataService} from '../metadata/metadata.service';\nimport {formatState} from '../state/state.format';\nimport {StateService} from '../state/state.service';\nimport {TrackController} from '../track/track.controller';\nimport {Track} from '../track/track.model';\nimport {User} from '../user/user.model';\nimport {formatAlbum} from './album.format';\nimport {Album} from './album.model';\nimport {AlbumService} from './album.service';\nimport {SearchQueryAlbum} from './album.store';\n\nexport class AlbumController extends BaseListController<JamParameters.Album,\n\tJamParameters.Albums,\n\tJamParameters.IncludesAlbum,\n\tSearchQueryAlbum,\n\tJamParameters.AlbumSearch,\n\tAlbum,\n\tJam.Album,\n\tJamParameters.AlbumList> {\n\n\tconstructor(\n\t\tpublic albumService: AlbumService,\n\t\tprivate trackController: TrackController,\n\t\tprivate metaDataService: MetaDataService,\n\t\tprotected indexService: IndexService,\n\t\tprotected stateService: StateService,\n\t\tprotected imageService: ImageService,\n\t\tprotected downloadService: DownloadService\n\t) {\n\t\tsuper(albumService, stateService, imageService, downloadService);\n\t}\n\n\tsortAlbumTracks(a: Track, b: Track): number {\n\t\tif (a.tag.discTotal !== undefined && a.tag.disc !== undefined && b.tag.discTotal !== undefined && b.tag.disc !== undefined) {\n\t\t\tconst res = a.tag.disc - b.tag.disc;\n\t\t\tif (res !== 0) {\n\t\t\t\treturn res;\n\t\t\t}\n\t\t}\n\t\tif (a.tag.track !== undefined && b.tag.track !== undefined) {\n\t\t\tconst res = a.tag.track - b.tag.track;\n\t\t\tif (res !== 0) {\n\t\t\t\treturn res;\n\t\t\t}\n\t\t}\n\t\treturn a.name.localeCompare(b.name);\n\t}\n\n\tasync prepare(album: Album, includes: JamParameters.IncludesAlbum, user: User): Promise<Jam.Album> {\n\t\tconst result = formatAlbum(album, includes);\n\t\tif (includes.albumState) {\n\t\t\tconst state = await this.stateService.findOrCreate(album.id, user.id, DBObjectType.album);\n\t\t\tresult.state = formatState(state);\n\t\t}\n\t\tif (includes.albumInfo) {\n\t\t\tresult.info = await this.metaDataService.extInfo.byAlbum(album);\n\t\t}\n\t\tif (includes.albumTracks) {\n\t\t\tresult.tracks = await this.trackController.prepareListByIDs(album.trackIDs, includes, user, (a, b) => this.sortAlbumTracks(a, b));\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync translateQuery(query: JamParameters.AlbumSearch, user: User): Promise<SearchQueryAlbum> {\n\t\treturn {\n\t\t\tquery: query.query,\n\t\t\tid: query.id,\n\t\t\tids: query.ids,\n\t\t\tname: query.name,\n\t\t\trootID: query.rootID,\n\t\t\trootIDs: query.rootIDs,\n\t\t\tartist: query.artist,\n\t\t\tartistID: query.artistID,\n\t\t\ttrackID: query.trackID,\n\t\t\tmbReleaseID: query.mbReleaseID,\n\t\t\tmbArtistID: query.mbArtistID,\n\t\t\talbumType: query.albumType,\n\t\t\talbumTypes: query.albumTypes,\n\t\t\tgenre: query.genre,\n\t\t\tnewerThan: query.newerThan,\n\t\t\tfromYear: query.fromYear,\n\t\t\ttoYear: query.toYear,\n\t\t\toffset: query.offset,\n\t\t\tamount: query.amount,\n\t\t\tsorts: query.sortField ? [{field: query.sortField, descending: !!query.sortDescending}] : undefined\n\t\t};\n\t}\n\n\tasync similarTracks(req: JamRequest<JamParameters.SimilarTracks>): Promise<ListResult<Jam.Track>> {\n\t\tconst album = await this.byID(req.query.id);\n\t\ttry {\n\t\t\tconst tracks = await this.metaDataService.similarTracks.byAlbum(album);\n\t\t\tconst list = paginate(tracks, req.query.amount, req.query.offset);\n\t\t\treturn {\n\t\t\t\ttotal: list.total,\n\t\t\t\tamount: list.amount,\n\t\t\t\toffset: list.offset,\n\t\t\t\titems: await this.trackController.prepareList(list.items, req.query, req.user)\n\t\t\t};\n\t\t} catch (e) {\n\t\t\treturn {total: 0, amount: req.query.amount, offset: req.query.offset, items: []};\n\t\t}\n\t}\n\n\tasync tracks(req: JamRequest<JamParameters.Tracks>): Promise<ListResult<Jam.Track>> {\n\t\tconst albums = await this.byIDs(req.query.ids);\n\t\tlet trackIDs: Array<string> = [];\n\t\talbums.forEach(album => {\n\t\t\ttrackIDs = trackIDs.concat(album.trackIDs);\n\t\t});\n\t\treturn {items: await this.trackController.prepareListByIDs(trackIDs, req.query, req.user, (a, b) => this.sortAlbumTracks(a, b))};\n\t}\n\n\tasync info(req: JamRequest<JamParameters.ID>): Promise<Jam.Info> {\n\t\tconst album = await this.byID(req.query.id);\n\t\treturn {info: await this.metaDataService.extInfo.byAlbum(album)};\n\t}\n\n\tasync index(req: JamRequest<JamParameters.AlbumSearch>): Promise<Jam.AlbumIndex> {\n\t\treturn formatAlbumIndex(await this.indexService.getAlbumIndex(await this.translateQuery(req.query, req.user)));\n\t}\n\n}\n","import {Jam} from '../../model/jam-rest-data';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {Album} from './album.model';\n\nexport function formatAlbum(album: Album, includes: JamParameters.IncludesAlbum): Jam.Album {\n\treturn {\n\t\tid: album.id,\n\t\tname: album.name,\n\t\talbumType: album.albumType,\n\t\tcreated: album.created,\n\t\tartist: album.artist,\n\t\tartistID: album.artistID,\n\t\tseries: album.series,\n\t\tseriesID: album.seriesID,\n\t\tseriesNr: album.seriesNr,\n\t\ttrackCount: album.trackIDs.length,\n\t\tgenres: album.genres,\n\t\tyear: album.year,\n\t\tduration: album.duration,\n\t\tmbArtistID: album.mbArtistID,\n\t\tmbReleaseID: album.mbReleaseID,\n\t\ttrackIDs: includes.albumTrackIDs ? album.trackIDs : undefined\n\t};\n}\n","import {JamRequest} from '../../api/jam/api';\nimport {DBObjectType} from '../../db/db.types';\nimport {Jam} from '../../model/jam-rest-data';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {paginate} from '../../utils/paginate';\nimport {AlbumController} from '../album/album.controller';\nimport {Album} from '../album/album.model';\nimport {BaseListController} from '../base/dbobject-list.controller';\nimport {ListResult} from '../base/list-result';\nimport {DownloadService} from '../download/download.service';\nimport {ImageService} from '../image/image.service';\nimport {formatArtistIndex} from '../index/index.format';\nimport {IndexService} from '../index/index.service';\nimport {MetaDataService} from '../metadata/metadata.service';\nimport {SeriesController} from '../series/series.controller';\nimport {formatState} from '../state/state.format';\nimport {StateService} from '../state/state.service';\nimport {TrackController} from '../track/track.controller';\nimport {Track} from '../track/track.model';\nimport {User} from '../user/user.model';\nimport {formatArtist} from './artist.format';\nimport {Artist} from './artist.model';\nimport {ArtistService} from './artist.service';\nimport {SearchQueryArtist} from './artist.store';\n\nexport class ArtistController extends BaseListController<JamParameters.Artist,\n\tJamParameters.Artists,\n\tJamParameters.IncludesArtist,\n\tSearchQueryArtist,\n\tJamParameters.ArtistSearch,\n\tArtist,\n\tJam.Artist,\n\tJamParameters.ArtistList> {\n\n\tconstructor(\n\t\tpublic artistService: ArtistService,\n\t\tprivate trackController: TrackController,\n\t\tprivate seriesController: SeriesController,\n\t\tprivate albumController: AlbumController,\n\t\tprivate metaDataService: MetaDataService,\n\t\tprivate indexService: IndexService,\n\t\tprotected stateService: StateService,\n\t\tprotected imageService: ImageService,\n\t\tprotected downloadService: DownloadService\n\t) {\n\t\tsuper(artistService, stateService, imageService, downloadService);\n\t}\n\n\tstatic sortGrouping(a: string, b: string): number {\n\t\tconst aNr = Number(a);\n\t\tconst bNr = Number(b);\n\t\tif (isNaN(aNr) || isNaN(bNr)) {\n\t\t\treturn (a || '').localeCompare(b || '');\n\t\t}\n\t\treturn aNr - bNr;\n\t}\n\n\tstatic sortArtistAlbums(a: Album, b: Album): number {\n\t\tlet res = a.albumType.localeCompare(b.albumType);\n\t\tif (res === 0) {\n\t\t\tif (a.seriesNr && b.seriesNr) {\n\t\t\t\tres = ArtistController.sortGrouping(a.seriesNr, b.seriesNr);\n\t\t\t} else if (a.seriesNr || b.seriesNr) {\n\t\t\t\tres = a.seriesNr ? 1 : -1;\n\t\t\t}\n\t\t}\n\t\tif (res === 0) {\n\t\t\tres = (b.year || 0) - (a.year || 0);\n\t\t}\n\t\tif (res === 0) {\n\t\t\tres = a.name.localeCompare(b.name);\n\t\t}\n\t\treturn res;\n\t}\n\n\tstatic sortArtistTracks(a: Track, b: Track): number {\n\t\tlet res = a.parentID.localeCompare(b.parentID);\n\t\tif (res === 0) {\n\t\t\tres = (b.tag.disc || 0) - (a.tag.disc || 0);\n\t\t}\n\t\tif (res === 0) {\n\t\t\tres = (b.tag.track || 0) - (a.tag.track || 0);\n\t\t}\n\t\treturn res;\n\t}\n\n\tasync prepare(artist: Artist, includes: JamParameters.IncludesArtist, user: User): Promise<Jam.Artist> {\n\t\tconst result = formatArtist(artist, includes);\n\t\tif (includes.artistState) {\n\t\t\tconst state = await this.stateService.findOrCreate(artist.id, user.id, DBObjectType.artist);\n\t\t\tresult.state = formatState(state);\n\t\t}\n\t\tif (includes.artistInfo) {\n\t\t\ttry {\n\t\t\t\tresult.info = await this.metaDataService.extInfo.byArtist(artist);\n\t\t\t} catch (e) {\n\t\t\t\tresult.info = undefined;\n\t\t\t}\n\t\t}\n\t\tif (includes.artistSimilar) {\n\t\t\ttry {\n\t\t\t\tresult.similar = await this.prepareList(await this.metaDataService.similarArtists.byArtist(artist), {}, user);\n\t\t\t} catch (e) {\n\t\t\t\tresult.similar = undefined;\n\t\t\t}\n\t\t}\n\t\tif (includes.artistTracks) {\n\t\t\tresult.tracks = await this.trackController.prepareListByIDs(artist.trackIDs, includes, user, ArtistController.sortArtistTracks);\n\t\t}\n\t\tif (includes.artistAlbums) {\n\t\t\tresult.albums = await this.albumController.prepareListByIDs(artist.albumIDs, includes, user, ArtistController.sortArtistAlbums);\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync translateQuery(query: JamParameters.ArtistSearch, user: User): Promise<SearchQueryArtist> {\n\t\treturn {\n\t\t\tquery: query.query,\n\t\t\tid: query.id,\n\t\t\tids: query.ids,\n\t\t\tname: query.name,\n\t\t\trootID: query.rootID,\n\t\t\trootIDs: query.rootIDs,\n\t\t\talbumID: query.albumID,\n\t\t\tmbArtistID: query.mbArtistID,\n\t\t\talbumType: query.albumType,\n\t\t\talbumTypes: query.albumTypes,\n\t\t\tnewerThan: query.newerThan,\n\t\t\tgenre: query.genre,\n\t\t\t// fromYear: query.fromYear,\n\t\t\t// toYear: query.toYear,\n\t\t\toffset: query.offset,\n\t\t\tamount: query.amount,\n\t\t\tsorts: query.sortField ? [{field: query.sortField, descending: !!query.sortDescending}] : undefined\n\t\t};\n\t}\n\n\tasync similar(req: JamRequest<JamParameters.SimilarArtists>): Promise<ListResult<Jam.Artist>> {\n\t\tconst artist = await this.byID(req.query.id);\n\t\ttry {\n\t\t\tconst artists = await this.metaDataService.similarArtists.byArtist(artist);\n\t\t\tconst list = paginate(artists, req.query.amount, req.query.offset);\n\t\t\treturn {\n\t\t\t\ttotal: list.total,\n\t\t\t\tamount: list.amount,\n\t\t\t\toffset: list.offset,\n\t\t\t\titems: await this.prepareList(list.items, req.query, req.user)\n\t\t\t};\n\t\t} catch (e) {\n\t\t\treturn {items: []};\n\t\t}\n\t}\n\n\tasync similarTracks(req: JamRequest<JamParameters.SimilarTracks>): Promise<ListResult<Jam.Track>> {\n\t\tconst artist = await this.byID(req.query.id);\n\t\ttry {\n\t\t\tconst tracks = await this.metaDataService.similarTracks.byArtist(artist);\n\t\t\tconst list = paginate(tracks, req.query.amount, req.query.offset);\n\t\t\treturn {\n\t\t\t\ttotal: list.total,\n\t\t\t\tamount: list.amount,\n\t\t\t\toffset: list.offset,\n\t\t\t\titems: await this.trackController.prepareList(list.items, req.query, req.user)\n\t\t\t};\n\t\t} catch (e) {\n\t\t\treturn {items: []};\n\t\t}\n\t}\n\n\tasync index(req: JamRequest<JamParameters.ArtistSearchQuery>): Promise<Jam.ArtistIndex> {\n\t\treturn formatArtistIndex(await this.indexService.getArtistIndex(await this.translateQuery(req.query, req.user)));\n\t}\n\n\tasync tracks(req: JamRequest<JamParameters.ArtistTracks>): Promise<ListResult<Jam.Track>> {\n\t\tconst artists = await this.byIDs(req.query.ids);\n\t\tlet trackIDs: Array<string> = [];\n\t\tartists.forEach(artist => {\n\t\t\ttrackIDs = trackIDs.concat(artist.trackIDs);\n\t\t});\n\t\tconst list = paginate(trackIDs, req.query.amount, req.query.offset);\n\t\treturn {\n\t\t\ttotal: list.total,\n\t\t\tamount: list.amount,\n\t\t\toffset: list.offset,\n\t\t\titems: await this.trackController.prepareListByIDs(list.items, req.query, req.user, ArtistController.sortArtistTracks)\n\t\t};\n\t}\n\n\tasync albums(req: JamRequest<JamParameters.ArtistAlbums>): Promise<ListResult<Jam.Album>> {\n\t\tconst artists = await this.byIDs(req.query.ids);\n\t\tlet albumIDs: Array<string> = [];\n\t\tartists.forEach(artist => {\n\t\t\talbumIDs = albumIDs.concat(artist.albumIDs);\n\t\t});\n\t\tconst list = paginate(albumIDs, req.query.amount, req.query.offset);\n\t\treturn {\n\t\t\ttotal: list.total,\n\t\t\tamount: list.amount,\n\t\t\toffset: list.offset,\n\t\t\titems: await this.albumController.prepareListByIDs(list.items, req.query, req.user, ArtistController.sortArtistAlbums)\n\t\t};\n\t}\n\n\tasync info(req: JamRequest<JamParameters.ID>): Promise<Jam.Info> {\n\t\tconst artist = await this.byID(req.query.id);\n\t\treturn {info: await this.metaDataService.extInfo.byArtist(artist)};\n\t}\n\n\tasync series(req: JamRequest<JamParameters.ArtistSeries>): Promise<ListResult<Jam.Series>> {\n\t\tconst artists = await this.byIDs(req.query.ids);\n\t\tlet seriesIDs: Array<string> = [];\n\t\tartists.forEach(artist => {\n\t\t\tseriesIDs = seriesIDs.concat(artist.seriesIDs);\n\t\t});\n\t\tconst list = paginate(seriesIDs, req.query.amount, req.query.offset);\n\t\treturn {\n\t\t\ttotal: list.total,\n\t\t\tamount: list.amount,\n\t\t\toffset: list.offset,\n\t\t\titems: await this.seriesController.prepareListByIDs(list.items, req.query, req.user)\n\t\t};\n\t}\n}\n","import {Jam} from '../../model/jam-rest-data';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {Artist} from './artist.model';\n\nexport function formatArtist(artist: Artist, includes: JamParameters.IncludesArtist): Jam.Artist {\n\treturn {\n\t\tid: artist.id,\n\t\tname: artist.name,\n\t\tgenres: artist.genres,\n\t\talbumTypes: artist.albumTypes,\n\t\tmbArtistID: artist.mbArtistID,\n\t\ttrackIDs: includes.artistTrackIDs ? artist.trackIDs : undefined,\n\t\talbumIDs: includes.artistAlbumIDs ? artist.albumIDs : undefined,\n\t\tseriesIDs: includes.artistSeries ? artist.seriesIDs : undefined,\n\t\talbumCount: artist.albumIDs.length,\n\t\tseriesCount: artist.seriesIDs ? artist.seriesIDs.length : 0,\n\t\ttrackCount: artist.trackIDs.length,\n\t\tcreated: artist.created\n\t};\n}\n","import {JamRequest} from '../../api/jam/api';\nimport {Jam} from '../../model/jam-rest-data';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {Store} from '../store/store';\n\nexport class AutocompleteController {\n\n\tconstructor(private store: Store) {\n\n\t}\n\n\tasync autocomplete(req: JamRequest<JamParameters.AutoComplete>): Promise<Jam.AutoComplete> {\n\t\treturn this.autocompleteQuery(req.query);\n\t}\n\n\tasync autocompleteQuery(query: JamParameters.AutoComplete): Promise<Jam.AutoComplete> {\n\t\tconst result: Jam.AutoComplete = {};\n\t\tif (query.track !== undefined && query.track > 0) {\n\t\t\tconst list = await this.store.trackStore.search({query: query.query, amount: query.track});\n\t\t\tresult.tracks = list.items.map(o => {\n\t\t\t\treturn {id: o.id, name: o.tag.title || ''};\n\t\t\t});\n\t\t}\n\t\tif (query.album !== undefined && query.album > 0) {\n\t\t\tconst list = await this.store.albumStore.search({query: query.query, amount: query.album});\n\t\t\tresult.albums = list.items.map(o => {\n\t\t\t\treturn {id: o.id, name: o.name};\n\t\t\t});\n\t\t}\n\t\tif (query.artist !== undefined && query.artist > 0) {\n\t\t\tconst list = await this.store.artistStore.search({query: query.query, amount: query.artist});\n\t\t\tresult.artists = list.items.map(o => {\n\t\t\t\treturn {id: o.id, name: o.name};\n\t\t\t});\n\t\t}\n\t\tif (query.folder !== undefined && query.folder > 0) {\n\t\t\tconst list = await this.store.artistStore.search({query: query.query, amount: query.folder});\n\t\t\tresult.folders = list.items.map(o => {\n\t\t\t\treturn {id: o.id, name: o.name};\n\t\t\t});\n\t\t}\n\t\tif (query.playlist !== undefined && query.playlist > 0) {\n\t\t\tconst list = await this.store.playlistStore.search({query: query.query, amount: query.playlist});\n\t\t\tresult.playlists = list.items.map(o => {\n\t\t\t\treturn {id: o.id, name: o.name};\n\t\t\t});\n\t\t}\n\t\tif (query.podcast !== undefined && query.podcast > 0) {\n\t\t\tconst list = await this.store.podcastStore.search({query: query.query, amount: query.podcast});\n\t\t\tresult.podcasts = list.items.map(o => {\n\t\t\t\treturn {id: o.id, name: o.tag ? o.tag.title : ''};\n\t\t\t});\n\t\t}\n\t\tif (query.episode !== undefined && query.episode > 0) {\n\t\t\tconst list = await this.store.episodeStore.search({query: query.query, amount: query.episode});\n\t\t\tresult.episodes = list.items.map(o => {\n\t\t\t\treturn {id: o.id, name: o.name};\n\t\t\t});\n\t\t}\n\t\tif (query.series !== undefined && query.series > 0) {\n\t\t\tconst list = await this.store.seriesStore.search({query: query.query, amount: query.series});\n\t\t\tresult.series = list.items.map(o => {\n\t\t\t\treturn {id: o.id, name: o.name};\n\t\t\t});\n\t\t}\n\t\treturn result;\n\t}\n}\n","import {JamRequest} from '../../api/jam/api';\n// import {SearchQueryBookmark} from './bookmark.store';\nimport {InvalidParamError, NotFoundError} from '../../api/jam/error';\nimport {Jam} from '../../model/jam-rest-data';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {ListResult} from '../base/list-result';\nimport {TrackController} from '../track/track.controller';\nimport {User} from '../user/user.model';\nimport {formatBookmark} from './bookmark.format';\nimport {Bookmark} from './bookmark.model';\nimport {BookmarkService} from './bookmark.service';\n\nexport class BookmarkController {\n\n\tconstructor(public bookmarkService: BookmarkService, private trackController: TrackController) {\n\t}\n\n\t// translateQuery(query: JamParameters.BookmarkSearch, user: User): SearchQueryBookmark {\n\t// \treturn {\n\t// \t\tquery: query.query,\n\t// \t\tuserID: query.userID,\n\t// \t\tdestID: query.trackID,\n\t// \t\toffset: query.offset,\n\t// \t\tamount: query.amount,\n\t// \t\tsorts: query.sortField ? [{field: query.sortField, descending: !!query.sortDescending}] : undefined\n\t// \t};\n\t// }\n\n\tasync prepare(bookmark: Bookmark, includes: JamParameters.IncludesBookmark, user: User): Promise<Jam.Bookmark> {\n\t\tconst result = formatBookmark(bookmark);\n\t\tif (includes.bookmarkTrack) {\n\t\t\tresult.track = await this.trackController.prepareByID(bookmark.destID, includes, user);\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync prepareList(list: ListResult<Bookmark>, includes: JamParameters.IncludesBookmark, user: User): Promise<Jam.BookmarkList> {\n\t\tconst items = list.items.map(formatBookmark);\n\t\tif (includes.bookmarkTrack) {\n\t\t\tconst ids: Array<string> = [];\n\t\t\tfor (const item of list.items) {\n\t\t\t\tif (!ids.includes(item.destID)) {\n\t\t\t\t\tids.push(item.destID);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst tracks = await this.trackController.prepareListByIDs(ids, includes, user);\n\t\t\titems.forEach(bookmark => {\n\t\t\t\tbookmark.track = tracks.find(t => t.id === bookmark.trackID);\n\t\t\t});\n\t\t}\n\t\treturn {total: list.total, offset: list.offset, amount: list.amount, items};\n\t}\n\n\tasync id(req: JamRequest<JamParameters.Bookmark>): Promise<Jam.Bookmark> {\n\t\tif (!req.query.id) {\n\t\t\treturn Promise.reject(InvalidParamError());\n\t\t}\n\t\tconst bookmark = await this.bookmarkService.byID(req.query.id, req.user.id);\n\t\tif (!bookmark) {\n\t\t\treturn Promise.reject(NotFoundError());\n\t\t}\n\t\treturn this.prepare(bookmark, req.query, req.user);\n\t}\n\n\tasync ids(req: JamRequest<JamParameters.Bookmarks>): Promise<Jam.BookmarkList> {\n\t\tif (!req.query.ids || req.query.ids.length === 0) {\n\t\t\treturn Promise.reject(InvalidParamError());\n\t\t}\n\t\treturn this.prepareList(\n\t\t\tawait this.bookmarkService.byIDs(req.query.ids, req.user.id, req.query.amount, req.query.offset),\n\t\t\treq.query, req.user\n\t\t);\n\t}\n\n\tasync create(req: JamRequest<JamParameters.BookmarkCreate>): Promise<Jam.Bookmark> {\n\t\tconst track = await this.trackController.byID(req.query.trackID);\n\t\tconst bookmark = await this.bookmarkService.create(track.id, req.user.id, req.query.position || 0, req.query.comment);\n\t\treturn this.prepare(bookmark, {}, req.user);\n\t}\n\n\tasync delete(req: JamRequest<JamParameters.BookmarkDelete>): Promise<void> {\n\t\tawait this.bookmarkService.remove(req.query.id, req.user.id);\n\t}\n\n\tasync byTrackDelete(req: JamRequest<JamParameters.BookmarkTrackDelete>): Promise<void> {\n\t\tawait this.bookmarkService.removeByTrack(req.query.trackID, req.user.id);\n\t}\n\n\tasync list(req: JamRequest<JamParameters.BookmarkList>): Promise<ListResult<Jam.Bookmark>> {\n\t\treturn this.prepareList(\n\t\t\tawait this.bookmarkService.byUser(req.user.id, req.query.amount, req.query.offset),\n\t\t\treq.query, req.user);\n\t}\n\n\tasync byTrackList(req: JamRequest<JamParameters.BookmarkListByTrack>): Promise<ListResult<Jam.Bookmark>> {\n\t\treturn this.prepareList(\n\t\t\tawait this.bookmarkService.byTrack(req.query.trackID, req.user.id),\n\t\t\t{}, req.user);\n\t}\n\n}\n","import {Jam} from '../../model/jam-rest-data';\nimport {Bookmark} from './bookmark.model';\n\nexport function formatBookmark(bookmark: Bookmark): Jam.Bookmark {\n\treturn {\n\t\tid: bookmark.id,\n\t\ttrackID: bookmark.destID,\n\t\tcomment: bookmark.comment,\n\t\tcreated: bookmark.created,\n\t\tchanged: bookmark.changed,\n\t\tposition: bookmark.position\n\t};\n}\n","import {JamRequest} from '../../api/jam/api';\nimport {NotFoundError, UnauthError} from '../../api/jam/error';\nimport {Jam} from '../../model/jam-rest-data';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {formatChatMessage} from './chat.format';\nimport {ChatService} from './chat.service';\n\nexport class ChatController {\n\n\tconstructor(private chatService: ChatService) {\n\t}\n\n\tasync list(req: JamRequest<JamParameters.Chat>): Promise<Array<Jam.ChatMessage>> {\n\t\tconst messages = await this.chatService.get(req.query.since);\n\t\treturn messages.map(formatChatMessage);\n\t}\n\n\tasync create(req: JamRequest<JamParameters.ChatNew>): Promise<void> {\n\t\tawait this.chatService.add(req.query.message, req.user);\n\t}\n\n\tasync delete(req: JamRequest<JamParameters.ChatDelete>): Promise<void> {\n\t\tconst message = await this.chatService.find(req.query.time);\n\t\tif (!message) {\n\t\t\treturn Promise.reject(NotFoundError());\n\t\t}\n\t\tif (message.userID !== req.user.id) {\n\t\t\treturn Promise.reject(UnauthError());\n\t\t}\n\t\tawait this.chatService.remove(message);\n\t}\n\n}\n","import {Jam} from '../../model/jam-rest-data';\nimport {ChatMessage} from './chat.model';\n\nexport function formatChatMessage(message: ChatMessage): Jam.ChatMessage {\n\treturn {\n\t\tusername: message.username,\n\t\tuserID: message.userID,\n\t\ttime: message.time,\n\t\tmessage: message.message\n\t};\n}\n","import {JamRequest} from '../../api/jam/api';\nimport {validatePathParameterIDFormat} from '../../api/jam/check';\nimport {InvalidParamError, NotFoundError} from '../../api/jam/error';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {DefaultDownloadFormat, DownloadFormats} from '../../model/jam-types';\nimport {ApiBinaryResult} from '../../typings';\nimport {Store} from '../store/store';\nimport {DownloadService} from './download.service';\n\nexport class DownloadController {\n\n\tconstructor(\n\t\tprivate store: Store,\n\t\tprivate downloadService: DownloadService\n\t) {\n\t}\n\n\tasync downloadByPathParameter(req: JamRequest<{ pathParameter: string }>): Promise<ApiBinaryResult> {\n\t\tconst {id, format} = await validatePathParameterIDFormat(req.query.pathParameter, DownloadFormats, DefaultDownloadFormat);\n\t\treturn this.download({query: {id, format: format as JamParameters.DownloadFormatType}, user: req.user});\n\t}\n\n\tasync download(req: JamRequest<JamParameters.Download>): Promise<ApiBinaryResult> {\n\t\tconst id = req.query.id;\n\t\tif (!id || id.length === 0) {\n\t\t\treturn Promise.reject(InvalidParamError());\n\t\t}\n\t\tconst obj = await this.store.findInStores(id, this.store.downloadStores());\n\t\tif (obj) {\n\t\t\tconst result = await this.downloadService.getObjDownload(obj, req.query.format, req.user);\n\t\t\tif (result) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn Promise.reject(NotFoundError());\n\t}\n}\n","import express from 'express';\nimport {ComponentsObject, OpenAPIObject, OperationObject, ParameterObject, RequestBodyObject, SchemaObject} from '../model/openapi-spec';\nimport {logger} from './logger';\nimport {jsonValidator, JSONValidator, validateJSON} from './validate-json';\n\nconst log = logger('CheckApiParameters');\n\nclass Validator {\n\n\tstatic validateBooleanParameter(query: any, param: { name: string; required?: boolean }, value: any): string | undefined {\n\t\tif (['true', 'yes', '1'].includes(value.toString())) {\n\t\t\tquery[param.name] = true;\n\t\t\tvalue = true;\n\t\t} else if (['false', 'no', '0'].includes(value.toString())) {\n\t\t\tquery[param.name] = false;\n\t\t\tvalue = false;\n\t\t} else {\n\t\t\treturn `Invalid boolean parameter ${param.name}`;\n\t\t}\n\t\tquery[param.name] = value;\n\t}\n\n\tstatic validateNumberParameter(query: any, param: { name: string; required?: boolean }, value: any, schema: SchemaObject): string | undefined {\n\t\tconst s = value.toString().trim();\n\t\tif (s.length === 0) {\n\t\t\treturn `Empty number parameter ${param.name}`;\n\t\t}\n\t\tconst num = Number(s);\n\t\tif (isNaN(num)) {\n\t\t\treturn `Invalid number parameter ${param.name}`;\n\t\t}\n\t\tquery[param.name] = num;\n\t\tif (schema.type === 'integer' && !Number.isInteger(num)) {\n\t\t\treturn `Invalid integer parameter ${param.name}`;\n\t\t}\n\t\tif (schema.minimum !== undefined && schema.minimum > num) {\n\t\t\treturn `Invalid number parameter ${param.name}; minimum is ${schema.minimum}`;\n\t\t}\n\t\tif (schema.maximum !== undefined && schema.maximum < num) {\n\t\t\treturn `Invalid number parameter ${param.name}; maximum is ${schema.maximum}`;\n\t\t}\n\t}\n\n\tstatic validateStringParameter(query: any, param: { name: string; required?: boolean }, value: any, schema: SchemaObject): string | undefined {\n\t\tif (typeof value !== 'string') {\n\t\t\treturn `Invalid string parameter ${param.name}`;\n\t\t}\n\t\tconst s = value.trim();\n\t\tquery[param.name] = s;\n\t\tif (s.length === 0) {\n\t\t\treturn `Empty string parameter ${param.name}`;\n\t\t}\n\t\tif (schema.enum) {\n\t\t\tif (!schema.enum.includes(s)) {\n\t\t\t\treturn `Invalid enum string parameter ${param.name}: ${s}`;\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic validateArrayParameter(query: any, param: { name: string; required?: boolean }, value: any, schema: SchemaObject): string | undefined {\n\t\tconst items = (schema.items || {type: 'unknown'}) as SchemaObject;\n\t\tconst listValues = ((Array.isArray(value) ? value : [value]) || []);\n\t\tif (param.required && listValues.length === 0) {\n\t\t\treturn `Missing required parameter ${param.name}`;\n\t\t}\n\t\tquery[param.name] = listValues;\n\t\tfor (const listValue of listValues) {\n\t\t\tconst result = Validator.validOAParameterValueBySchema({}, {name: param.name, required: true}, listValue, items);\n\t\t\tif (result) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic validateAnyOfParameter(query: any, param: { name: string; required?: boolean }, value: any, schema: SchemaObject): string | undefined {\n\t\tconst results: Array<string> = [];\n\t\tfor (const entry of (schema.anyOf || [])) {\n\t\t\tconst res = Validator.validOAParameterValueBySchema(query, param, value, entry);\n\t\t\tif (!res) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresults.push(res);\n\t\t}\n\t\treturn results.join('/');\n\t}\n\n\tstatic validOAParameterValueBySchema(query: any, param: { name: string; required?: boolean }, value: any, schema: SchemaObject): string | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\tif (schema && schema.default !== undefined) {\n\t\t\t\tquery[param.name] = schema.default;\n\t\t\t\tvalue = schema.default;\n\t\t\t}\n\t\t}\n\t\t// check required?\n\t\tif (value === undefined || value === null) {\n\t\t\tif (param.required) {\n\t\t\t\treturn `Missing required parameter ${param.name}`;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tif (schema.anyOf) {\n\t\t\treturn Validator.validateAnyOfParameter(query, param, value, schema);\n\t\t}\n\t\t// sanitize & check string parameter type\n\t\tswitch (schema.type) {\n\t\t\tcase 'boolean':\n\t\t\t\treturn Validator.validateBooleanParameter(query, param, value);\n\t\t\tcase 'string':\n\t\t\t\treturn Validator.validateStringParameter(query, param, value, schema);\n\t\t\tcase 'array':\n\t\t\t\treturn Validator.validateArrayParameter(query, param, value, schema);\n\t\t\tcase 'float':\n\t\t\tcase 'long':\n\t\t\tcase 'double':\n\t\t\tcase 'number':\n\t\t\tcase 'integer':\n\t\t\t\treturn Validator.validateNumberParameter(query, param, value, schema);\n\t\t\tdefault:\n\t\t\t\tlog.debug(`Unknown schema type ${JSON.stringify(schema)}`);\n\t\t}\n\t}\n\n\tstatic validOAParameter(query: any, param: ParameterObject, components: ComponentsObject): string | undefined {\n\t\tif (!query) {\n\t\t\treturn `Missing parameter collection ${param.name}`;\n\t\t}\n\t\tlet schema = param.schema;\n\t\tif (schema && schema.$ref) {\n\t\t\tconst name = schema.$ref.split('/').pop();\n\t\t\tif (!components.schemas) {\n\t\t\t\tthrow new Error('Invalid Internal Server Data');\n\t\t\t}\n\t\t\tschema = components.schemas[name];\n\t\t}\n\t\treturn Validator.validOAParameterValueBySchema(query, param, query[param.name], schema as SchemaObject);\n\t}\n\n\tstatic createJSONValidator(def: SchemaObject, components: ComponentsObject): JSONValidator {\n\t\tconst specialSchema = {...def};\n\t\tspecialSchema.components = components;\n\t\treturn jsonValidator(specialSchema);\n\t}\n\n\tstatic async checkAORequestBody(cmd: OperationObject, body: any, components: ComponentsObject): Promise<void> {\n\t\tif (!cmd.requestBody || !(cmd.requestBody as RequestBodyObject).content || !(cmd.requestBody as RequestBodyObject).content['application/json']) {\n\t\t\treturn;\n\t\t}\n\t\tif (!body) {\n\t\t\treturn Promise.reject(Error('Missing Request Body'));\n\t\t}\n\t\tconst content = (cmd.requestBody as RequestBodyObject).content['application/json'];\n\t\tif (!content) {\n\t\t\treturn Promise.reject(Error('Unimplemented POST json schema'));\n\t\t}\n\t\tconst schema = content.schema;\n\t\tif (!schema) {\n\t\t\treturn Promise.reject(Error('Unimplemented POST schema'));\n\t\t}\n\t\tif (!content.validator) {\n\t\t\tcontent.validator = Validator.createJSONValidator(schema, components);\n\t\t}\n\t\tconst result = await validateJSON(body, content.validator);\n\t\tif (result.errors.length > 0) {\n\t\t\t// console.error(schema, body, result.errors);\n\t\t\treturn Promise.reject(Error(JSON.stringify(result.errors)));\n\t\t}\n\t}\n\n\tstatic async checkAOParameters(cmd: OperationObject, req: express.Request, components: ComponentsObject): Promise<void> {\n\t\tif (!cmd.parameters) {\n\t\t\treturn;\n\t\t}\n\t\tlet error: string | undefined;\n\t\tcmd.parameters.find(param => {\n\t\t\tparam = param as ParameterObject;\n\t\t\tif (param.in === 'query') {\n\t\t\t\terror = Validator.validOAParameter(req.query, param, components);\n\t\t\t} else if (param.in === 'path') {\n\t\t\t\terror = Validator.validOAParameter(req.params, param, components);\n\t\t\t} else if (param.in === 'header') {\n\t\t\t\terror = Validator.validOAParameter(req.headers, param, components);\n\t\t\t} else if (param.in === 'cookie') {\n\t\t\t\terror = Validator.validOAParameter(req.cookies, param, components);\n\t\t\t} else {\n\t\t\t\tlog.info('Invalid/Unknown parameter spec', param);\n\t\t\t}\n\t\t\treturn !!error;\n\t\t});\n\t\tif (error) {\n\t\t\treturn Promise.reject(Error(error));\n\t\t}\n\t}\n\n}\n\nexport async function checkOpenApiParameters(name: string, req: express.Request, openapi: OpenAPIObject, forceMethod?: string): Promise<void> {\n\tconst cmdPath = openapi.paths[name];\n\tif (!cmdPath) {\n\t\tlog.info('cmd not found to validate', name);\n\t\treturn;\n\t}\n\tconst method = forceMethod || req.method.toLowerCase();\n\tconst cmd = cmdPath[method];\n\tif (!cmd) {\n\t\tlog.info(`cmd method ${req.method} not found to validate`, req.path);\n\t\treturn;\n\t}\n\tif (method === 'get') {\n\t\tawait Validator.checkAOParameters(cmd, req, openapi.components as ComponentsObject);\n\t} else {\n\t\tawait Validator.checkAORequestBody(cmd, req.body, openapi.components as ComponentsObject);\n\t}\n}\n","import ajv from 'ajv';\n\nconst jsonvalidator = new ajv(); // options can be passed, e.g. {allErrors: true}\n\nexport type JSONValidator = ajv.ValidateFunction;\n\nexport function jsonValidator(schema: any): JSONValidator {\n\treturn jsonvalidator.compile(schema);\n}\n\nexport async function validateJSON(data: any, schemaValidator: JSONValidator): Promise<{ errors: Array<ajv.ErrorObject> }> {\n\tconst result = schemaValidator(data);\n\tconst valid = typeof result === 'boolean' ? result : await (result as Promise<boolean>);\n\tif (valid) {\n\t\treturn {errors: []};\n\t}\n\tif (schemaValidator.errors) {\n\t\treturn {errors: schemaValidator.errors};\n\t}\n\treturn {\n\t\terrors: [{\n\t\t\tkeyword: 'unknown',\n\t\t\tdataPath: 'unknown',\n\t\t\tschemaPath: 'unknown',\n\t\t\tparams: []\n\t\t}]\n\t};\n}\n","module.exports = require(\"ajv\");","import {JamRequest} from '../../api/jam/api';\nimport {DBObjectType} from '../../db/db.types';\nimport {Jam} from '../../model/jam-rest-data';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {PodcastStatus} from '../../model/jam-types';\nimport {ApiBinaryResult} from '../../typings';\nimport {logger} from '../../utils/logger';\nimport {BaseListController} from '../base/dbobject-list.controller';\nimport {DownloadService} from '../download/download.service';\nimport {ImageService} from '../image/image.service';\nimport {formatState} from '../state/state.format';\nimport {StateService} from '../state/state.service';\nimport {StreamController} from '../stream/stream.controller';\nimport {User} from '../user/user.model';\nimport {formatEpisode} from './episode.format';\nimport {Episode} from './episode.model';\nimport {EpisodeService} from './episode.service';\nimport {SearchQueryEpisode} from './episode.store';\n\nconst log = logger('EpisodeController');\n\nexport class EpisodeController extends BaseListController<JamParameters.Episode,\n\tJamParameters.Episodes,\n\tJamParameters.IncludesEpisode,\n\tSearchQueryEpisode,\n\tJamParameters.EpisodeSearch,\n\tEpisode,\n\tJam.PodcastEpisode,\n\tJamParameters.PodcastEpisodeList> {\n\n\tconstructor(\n\t\tprivate episodeService: EpisodeService,\n\t\tprivate streamController: StreamController,\n\t\tprotected stateService: StateService,\n\t\tprotected imageService: ImageService,\n\t\tprotected downloadService: DownloadService\n\t) {\n\t\tsuper(episodeService, stateService, imageService, downloadService);\n\t}\n\n\tasync prepare(episode: Episode, includes: JamParameters.IncludesEpisode, user: User): Promise<Jam.PodcastEpisode> {\n\t\tconst result = formatEpisode(episode, includes,\n\t\t\tthis.episodeService.isDownloading(episode.id) ? PodcastStatus.downloading : episode.status\n\t\t);\n\t\tif (includes.trackState) {\n\t\t\tconst state = await this.stateService.findOrCreate(episode.id, user.id, DBObjectType.episode);\n\t\t\tresult.state = formatState(state);\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync translateQuery(query: JamParameters.EpisodeSearch, user: User): Promise<SearchQueryEpisode> {\n\t\treturn {\n\t\t\tquery: query.query,\n\t\t\tname: query.name,\n\t\t\tid: query.id,\n\t\t\tids: query.ids,\n\t\t\tpodcastID: query.podcastID,\n\t\t\tstatus: query.status,\n\t\t\toffset: query.offset,\n\t\t\tamount: query.amount,\n\t\t\tsorts: query.sortField ? [{field: query.sortField, descending: !!query.sortDescending}] : [{field: 'date', descending: true}]\n\t\t};\n\t}\n\n\tasync retrieve(req: JamRequest<JamParameters.ID>): Promise<void> {\n\t\tconst episode = await this.byID(req.query.id);\n\t\tif (!episode.path) {\n\t\t\tthis.episodeService.downloadEpisode(episode).catch(e => log.error(e)); // do not wait\n\t\t}\n\t}\n\n\tasync stream(req: JamRequest<JamParameters.Stream>): Promise<ApiBinaryResult> {\n\t\tconst episode = await this.byID(req.query.id);\n\t\treturn this.streamController.streamEpisode(episode, req.query.format, req.query.maxBitRate, req.user);\n\t}\n\n\tasync status(req: JamRequest<JamParameters.ID>): Promise<Jam.PodcastEpisodeStatus> {\n\t\tconst episode = await this.byID(req.query.id);\n\t\treturn {\n\t\t\tstatus: this.episodeService.isDownloading(episode.id) ? PodcastStatus.downloading : episode.status\n\t\t};\n\t}\n\n}\n","import path from 'path';\nimport {JamRequest} from '../../api/jam/api';\nimport {InvalidParamError, NotFoundError} from '../../api/jam/error';\nimport {DBObjectType} from '../../db/db.types';\nimport {Jam} from '../../model/jam-rest-data';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {ArtworkImageType, FolderType, FolderTypesAlbum} from '../../model/jam-types';\nimport {ApiBinaryResult} from '../../typings';\nimport {paginate} from '../../utils/paginate';\nimport {BaseListController} from '../base/dbobject-list.controller';\nimport {ListResult} from '../base/list-result';\nimport {DownloadService} from '../download/download.service';\nimport {FolderRulesChecker} from '../health/folder.rule';\nimport {ImageService} from '../image/image.service';\nimport {formatFolderIndex} from '../index/index.format';\nimport {IndexService} from '../index/index.service';\nimport {IoService} from '../io/io.service';\nimport {MetaDataService} from '../metadata/metadata.service';\nimport {Root} from '../root/root.model';\nimport {RootService} from '../root/root.service';\nimport {formatState} from '../state/state.format';\nimport {StateService} from '../state/state.service';\nimport {TrackController} from '../track/track.controller';\nimport {SearchQueryTrack} from '../track/track.store';\nimport {User} from '../user/user.model';\nimport {formatFolder, formatFolderArtworks} from './folder.format';\nimport {Artwork, Folder} from './folder.model';\nimport {FolderService} from './folder.service';\nimport {SearchQueryFolder} from './folder.store';\n\nexport class FolderController extends BaseListController<JamParameters.Folder, JamParameters.Folders,\n\tJamParameters.IncludesFolderChildren, SearchQueryFolder,\n\tJamParameters.FolderSearch, Folder, Jam.Folder,\n\tJamParameters.FolderList> {\n\tchecker = new FolderRulesChecker();\n\n\tconstructor(\n\t\tpublic folderService: FolderService,\n\t\tprivate trackController: TrackController,\n\t\tprivate metadataService: MetaDataService,\n\t\tprivate indexService: IndexService,\n\t\tprotected rootService: RootService,\n\t\tprotected stateService: StateService,\n\t\tprotected imageService: ImageService,\n\t\tprotected downloadService: DownloadService,\n\t\tprotected ioService: IoService\n\t) {\n\t\tsuper(folderService, stateService, imageService, downloadService);\n\t}\n\n\tasync prepare(folder: Folder, includes: JamParameters.IncludesFolderChildren, user: User): Promise<Jam.Folder> {\n\t\tconst result = formatFolder(folder, includes);\n\t\tif (includes.folderChildren || includes.folderTracks) {\n\t\t\tresult.tracks = (await this.trackController.prepareByQuery({parentID: folder.id}, includes, user)).items;\n\t\t}\n\t\tif (includes.folderChildren || includes.folderSubfolders) {\n\t\t\tconst folders = await this.folderService.folderStore.search({parentID: folder.id, sorts: [{field: 'title', descending: false}]});\n\t\t\t// TODO: introduce children includes?\n\t\t\tresult.folders = await this.prepareList(folders.items,\n\t\t\t\t{folderState: includes.folderState, folderCounts: includes.folderCounts, folderTag: includes.folderTag}\n\t\t\t\t, user);\n\t\t}\n\t\tif (includes.folderState) {\n\t\t\tconst state = await this.stateService.findOrCreate(folder.id, user.id, DBObjectType.folder);\n\t\t\tresult.state = formatState(state);\n\t\t}\n\t\tif (includes.folderInfo) {\n\t\t\tif (folder.tag.type === FolderType.artist) {\n\t\t\t\tresult.info = await this.metadataService.extInfo.byFolderArtist(folder);\n\t\t\t} else if (FolderTypesAlbum.includes(folder.tag.type)) {\n\t\t\t\tresult.info = await this.metadataService.extInfo.byFolderAlbum(folder);\n\t\t\t}\n\t\t}\n\t\tif (includes.folderSimilar) {\n\t\t\tif (folder.tag.type === FolderType.artist) {\n\t\t\t\t// TODO: introduce children includes?\n\t\t\t\tresult.similar = await this.prepareList(await this.metadataService.similarArtists.byFolder(folder),\n\t\t\t\t\t{folderState: includes.folderState, folderCounts: includes.folderCounts, folderTag: includes.folderTag}\n\t\t\t\t\t, user);\n\t\t\t}\n\t\t}\n\t\tif (includes.folderParents) {\n\t\t\tconst parents = await this.folderService.collectFolderPath(folder.parentID);\n\t\t\tresult.parents = parents.map(parent => {\n\t\t\t\treturn {\n\t\t\t\t\tid: parent.id,\n\t\t\t\t\tname: path.basename(parent.path)\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync translateQuery(query: JamParameters.FolderSearch, user: User): Promise<SearchQueryFolder> {\n\t\tlet inPath: string | undefined;\n\t\tif (query.childOfID) {\n\t\t\tconst folder = await this.folderService.folderStore.byId(query.childOfID);\n\t\t\tif (folder) {\n\t\t\t\tinPath = folder.path;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tquery: query.query,\n\t\t\tid: query.id,\n\t\t\tids: query.ids,\n\t\t\trootID: query.rootID,\n\t\t\trootIDs: query.rootIDs,\n\t\t\tparentID: query.parentID,\n\t\t\tinPath,\n\t\t\tartist: query.artist,\n\t\t\ttitle: query.title,\n\t\t\talbum: query.album,\n\t\t\tgenre: query.genre,\n\t\t\tlevel: query.level,\n\t\t\tnewerThan: query.newerThan,\n\t\t\tfromYear: query.fromYear,\n\t\t\ttoYear: query.toYear,\n\t\t\toffset: query.offset,\n\t\t\tamount: query.amount,\n\t\t\ttype: query.type ? (query.type as FolderType) : undefined,\n\t\t\tsorts: query.sortField ? [{field: query.sortField, descending: !!query.sortDescending}] : undefined\n\t\t};\n\t}\n\n\t/* more folder api */\n\n\tasync subfolders(req: JamRequest<JamParameters.FolderSubFolders>): Promise<ListResult<Jam.Folder>> {\n\t\tconst list = await this.folderService.folderStore.search({parentID: req.query.id, amount: req.query.amount, offset: req.query.offset});\n\t\treturn {\n\t\t\ttotal: list.total,\n\t\t\tamount: list.amount,\n\t\t\toffset: list.offset,\n\t\t\titems: await this.prepareList(list.items, req.query, req.user)\n\t\t};\n\t}\n\n\tasync tracks(req: JamRequest<JamParameters.FolderTracks>): Promise<ListResult<Jam.Track>> {\n\t\tconst folders = await this.byIDs(req.query.ids);\n\t\tconst trackQuery: SearchQueryTrack = req.query.recursive ? {inPaths: folders.map(folder => folder.path)} : {parentIDs: folders.map(folder => folder.id)};\n\t\treturn this.trackController.prepareByQuery(trackQuery, req.query, req.user);\n\t}\n\n\tasync children(req: JamRequest<JamParameters.FolderChildren>): Promise<Jam.FolderChildren> {\n\t\tconst folders = await this.folderService.folderStore.search({parentID: req.query.id});\n\t\tconst resultTracks = await this.trackController.prepareByQuery({parentID: req.query.id}, req.query, req.user);\n\t\tconst resultFolders = await this.prepareList(folders.items, req.query, req.user);\n\t\treturn {folders: resultFolders, tracks: resultTracks.items};\n\t}\n\n\tasync nameUpdate(req: JamRequest<JamParameters.FolderEditName>): Promise<Jam.AdminChangeQueueInfo> {\n\t\tconst folder = await this.byID(req.query.id);\n\t\treturn this.ioService.renameFolder(folder.id, req.query.name, folder.rootID);\n\t}\n\n\tasync artistInfo(req: JamRequest<JamParameters.ID>): Promise<Jam.Info> {\n\t\tconst folder = await this.byID(req.query.id);\n\t\treturn {info: await this.metadataService.extInfo.byFolderArtist(folder)};\n\t}\n\n\tasync artistSimilar(req: JamRequest<JamParameters.SimilarFolders>): Promise<ListResult<Jam.Folder>> {\n\t\tconst folder = await this.byID(req.query.id);\n\t\tconst folders = await this.metadataService.similarArtists.byFolder(folder);\n\t\tconst list = paginate(folders, req.query.amount, req.query.offset);\n\t\treturn {\n\t\t\ttotal: list.total,\n\t\t\tamount: list.amount,\n\t\t\toffset: list.offset,\n\t\t\titems: await this.prepareList(list.items, req.query, req.user)\n\t\t};\n\t}\n\n\tasync albumInfo(req: JamRequest<JamParameters.ID>): Promise<Jam.Info> {\n\t\tconst folder = await this.byID(req.query.id);\n\t\treturn {info: await this.metadataService.extInfo.byFolderAlbum(folder)};\n\t}\n\n\tasync artistSimilarTracks(req: JamRequest<JamParameters.SimilarTracks>): Promise<ListResult<Jam.Track>> {\n\t\tconst folder = await this.byID(req.query.id);\n\t\tconst tracks = await this.metadataService.similarTracks.byFolder(folder);\n\t\tconst list = paginate(tracks, req.query.amount, req.query.offset);\n\t\treturn {\n\t\t\ttotal: list.total,\n\t\t\tamount: list.amount,\n\t\t\toffset: list.offset,\n\t\t\titems: await this.trackController.prepareList(list.items, req.query, req.user)\n\t\t};\n\t}\n\n\tasync index(req: JamRequest<JamParameters.FolderSearch>): Promise<Jam.FolderIndex> {\n\t\treturn formatFolderIndex(await this.indexService.getFolderIndex(await this.translateQuery(req.query, req.user)));\n\t}\n\n\tasync artworks(req: JamRequest<JamParameters.ID>): Promise<Array<Jam.ArtworkImage>> {\n\t\tconst folder = await this.byID(req.query.id);\n\t\treturn formatFolderArtworks(folder);\n\t}\n\n\tprivate async artworkByID(id: string): Promise<{ artwork: Artwork; folder: Folder }> {\n\t\tconst folderID = id.split('-')[0];\n\t\tconst folder = await this.byID(folderID);\n\t\tconst artwork = (folder.tag.artworks || []).find(art => art.id === id);\n\t\tif (!artwork) {\n\t\t\treturn Promise.reject(NotFoundError());\n\t\t}\n\t\treturn {folder, artwork};\n\t}\n\n\tasync artworkImage(req: JamRequest<JamParameters.Image>): Promise<ApiBinaryResult> {\n\t\tconst {folder, artwork} = await this.artworkByID(req.query.id);\n\t\treturn this.folderService.getArtworkImage(folder, artwork, req.query.size, req.query.format);\n\t}\n\n\tasync artworkCreate(req: JamRequest<JamParameters.FolderArtworkNew>): Promise<Jam.AdminChangeQueueInfo> {\n\t\tconst folder = await this.byID(req.query.id);\n\t\treturn this.ioService.downloadArtwork(folder.id, req.query.url, req.query.types as Array<ArtworkImageType>, folder.rootID);\n\t}\n\n\tasync artworkUploadCreate(req: JamRequest<JamParameters.FolderArtworkUpload>): Promise<Jam.AdminChangeQueueInfo> {\n\t\tif (!req.file) {\n\t\t\treturn Promise.reject(InvalidParamError('Image upload failed'));\n\t\t}\n\t\tconst folder = await this.byID(req.query.id);\n\t\treturn this.ioService.createArtwork(folder.id, req.file, req.fileType || '', req.query.types as Array<ArtworkImageType>, folder.rootID);\n\t}\n\n\tasync artworkUploadUpdate(req: JamRequest<JamParameters.ID>): Promise<Jam.AdminChangeQueueInfo> {\n\t\tif (!req.file) {\n\t\t\treturn Promise.reject(InvalidParamError('Image upload failed'));\n\t\t}\n\t\tconst {folder, artwork} = await this.artworkByID(req.query.id);\n\t\treturn this.ioService.updateArtwork(folder.id, artwork.id, req.file, req.fileType || '', folder.rootID);\n\t}\n\n\tasync artworkNameUpdate(req: JamRequest<JamParameters.FolderArtworkEditName>): Promise<Jam.AdminChangeQueueInfo> {\n\t\tconst {folder, artwork} = await this.artworkByID(req.query.id);\n\t\treturn this.ioService.renameArtwork(folder.id, artwork.id, req.query.name, folder.rootID);\n\t}\n\n\tasync artworkDelete(req: JamRequest<JamParameters.ID>): Promise<Jam.AdminChangeQueueInfo> {\n\t\tconst {folder, artwork} = await this.artworkByID(req.query.id);\n\t\treturn this.ioService.deleteArtwork(folder.id, artwork.id, folder.rootID);\n\t}\n\n\tasync health(req: JamRequest<JamParameters.FolderHealth>): Promise<Array<Jam.FolderHealth>> {\n\t\tconst list = await this.service.store.search(await this.translateQuery(req.query, req.user));\n\t\tlist.items = list.items.sort((a, b) => {\n\t\t\treturn a.path.localeCompare(b.path);\n\t\t});\n\t\tconst result: Array<Jam.FolderHealth> = [];\n\t\tconst roots: Array<Root> = [];\n\t\tconst cachedFolders = list.items.slice(0);\n\t\tfor (const folder of list.items) {\n\t\t\tlet root = roots.find(r => r.id === folder.rootID);\n\t\t\tif (!root) {\n\t\t\t\troot = await this.rootService.rootStore.byId(folder.rootID);\n\t\t\t\tif (root) {\n\t\t\t\t\troots.push(root);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (root) {\n\t\t\t\tconst parents = await this.folderService.collectFolderPath(folder.parentID, cachedFolders);\n\t\t\t\tconst health = await this.checker.run(folder, parents, root);\n\t\t\t\tif (health && health.length > 0) {\n\t\t\t\t\tresult.push({\n\t\t\t\t\t\tfolder: await this.prepare(folder, req.query, req.user),\n\t\t\t\t\t\thealth\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync parentUpdate(req: JamRequest<JamParameters.FolderMoveParent>): Promise<Jam.AdminChangeQueueInfo> {\n\t\tconst destFolder = await this.folderService.store.byId(req.query.folderID);\n\t\tif (!destFolder) {\n\t\t\treturn Promise.reject(NotFoundError());\n\t\t}\n\t\treturn this.ioService.moveFolders(req.query.ids, destFolder.id, destFolder.rootID);\n\t}\n\n\tasync delete(req: JamRequest<JamParameters.ID>): Promise<Jam.AdminChangeQueueInfo> {\n\t\tconst folder = await this.byID(req.query.id);\n\t\tif (folder.tag.level === 0) {\n\t\t\treturn Promise.reject(Error('Root folder cannot be deleted'));\n\t\t}\n\t\treturn this.ioService.deleteFolder(folder.id, folder.rootID);\n\t}\n\n\tasync create(req: JamRequest<JamParameters.FolderCreate>): Promise<Jam.AdminChangeQueueInfo> {\n\t\tconst folder = await this.byID(req.query.id);\n\t\treturn this.ioService.newFolder(folder.id, req.query.name, folder.rootID);\n\t}\n\n}\n","import path from 'path';\n\nimport {Jam} from '../../model/jam-rest-data';\nimport {AlbumTypesArtistMusic, FolderHealthID, FolderType, FolderTypesAlbum} from '../../model/jam-types';\nimport {fileSuffix, replaceFolderSystemChars} from '../../utils/fs-utils';\nimport {Folder, FolderTag} from '../folder/folder.model';\nimport {getFolderDisplayImage} from '../folder/folder.service';\nimport {Root} from '../root/root.model';\nimport {RuleResult} from './rule.model';\n\ninterface FolderRuleInfo {\n\tid: string;\n\tname: string;\n\n\trun(folder: Folder, parents: Array<Folder>, root: Root): Promise<RuleResult | undefined>;\n}\n\nconst folderRules: Array<FolderRuleInfo> = [\n\t{\n\t\tid: FolderHealthID.albumTagsExists,\n\t\tname: 'Album folder values are missing',\n\t\trun: async (folder, parents, root): Promise<RuleResult | undefined> => {\n\t\t\tif (FolderTypesAlbum.includes(folder.tag.type)) {\n\t\t\t\tconst missing = [];\n\t\t\t\tif (!folder.tag.album) {\n\t\t\t\t\tmissing.push('album');\n\t\t\t\t}\n\t\t\t\tif (!folder.tag.artist) {\n\t\t\t\t\tmissing.push('artist');\n\t\t\t\t}\n\t\t\t\tif (!folder.tag.genres || folder.tag.genres.length === 0) {\n\t\t\t\t\tmissing.push('genre');\n\t\t\t\t}\n\t\t\t\tif (!folder.tag.albumTrackCount) {\n\t\t\t\t\tmissing.push('album total track count');\n\t\t\t\t}\n\t\t\t\tif (folder.tag.albumType !== undefined && AlbumTypesArtistMusic.includes(folder.tag.albumType)) {\n\t\t\t\t\tif (!folder.tag.year) {\n\t\t\t\t\t\tmissing.push('year');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (missing.length > 0) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdetails: missing.map(m => {\n\t\t\t\t\t\t\treturn {reason: 'value empty', expected: m};\n\t\t\t\t\t\t})\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t{\n\t\tid: FolderHealthID.albumMBIDExists,\n\t\tname: 'Album folder musicbrainz id are missing',\n\t\trun: async (folder, parents, root): Promise<RuleResult | undefined> => {\n\t\t\tif (FolderTypesAlbum.includes(folder.tag.type)) {\n\t\t\t\tconst missing = [];\n\t\t\t\tif (!folder.tag.mbReleaseID) {\n\t\t\t\t\tmissing.push('musicbrainz album id');\n\t\t\t\t} else {\n\t\t\t\t\tif (!folder.tag.mbAlbumType) {\n\t\t\t\t\t\tmissing.push('musicbrainz album type');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (missing.length > 0) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdetails: missing.map(m => {\n\t\t\t\t\t\t\treturn {reason: 'value empty', expected: m};\n\t\t\t\t\t\t})\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t{\n\t\tid: FolderHealthID.albumTracksComplete,\n\t\tname: 'Album folder seems to be incomplete',\n\t\trun: async (folder, parents, root): Promise<RuleResult | undefined> => {\n\t\t\tif (\n\t\t\t\t(folder.tag.type === FolderType.album) &&\n\t\t\t\t(folder.tag.albumTrackCount) && (folder.tag.albumTrackCount !== folder.tag.trackCount)\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tdetails: [\n\t\t\t\t\t\t{reason: 'not equal', expected: folder.tag.albumTrackCount.toString(), actual: folder.tag.trackCount.toString()}\n\t\t\t\t\t]\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t},\n\t{\n\t\tid: FolderHealthID.albumNameConform,\n\t\tname: 'Album folder name is not conform',\n\t\trun: async (folder, parents, root): Promise<RuleResult | undefined> => {\n\n\t\t\tfunction getNiceOtherFolderName(tag: FolderTag): string {\n\t\t\t\tlet name = (tag.album || '')\n\t\t\t\t\t.replace(/[!?]/g, '')\n\t\t\t\t\t.replace(/< >/g, ' - ')\n\t\t\t\t\t.replace(/<>/g, ' - ')\n\t\t\t\t\t.replace(/[/]/g, '-')\n\t\t\t\t\t.replace(/\\.\\.\\./g, '…')\n\t\t\t\t\t.replace(/ {2}/g, ' ')\n\t\t\t\t\t.trim();\n\t\t\t\tname = replaceFolderSystemChars(name, '_');\n\t\t\t\treturn name.trim();\n\t\t\t}\n\n\t\t\tfunction getNiceAlbumFolderName(tag: FolderTag): string {\n\t\t\t\tconst year = tag.year ? tag.year.toString() : '';\n\t\t\t\tlet name = (tag.album || '')\n\t\t\t\t\t.replace(/[!?]/g, '')\n\t\t\t\t\t.replace(/< >/g, ' - ')\n\t\t\t\t\t.replace(/<>/g, ' - ')\n\t\t\t\t\t.replace(/[/]/g, '-')\n\t\t\t\t\t.replace(/\\.\\.\\./g, '…')\n\t\t\t\t\t.replace(/ {2}/g, ' ')\n\t\t\t\t\t.trim();\n\t\t\t\tname = replaceFolderSystemChars(name, '_');\n\t\t\t\tconst s = (year.length > 0 ? `[${replaceFolderSystemChars(year, '_')}] ` : '') + name;\n\t\t\t\treturn s.trim();\n\t\t\t}\n\n\t\t\tfunction slug(folderPath: string): string {\n\t\t\t\treturn path.basename(folderPath).trim().replace(/[_:!?/ ]/g, '').toLowerCase();\n\t\t\t}\n\n\t\t\tfunction niceSlug(nicename: string): string {\n\t\t\t\treturn nicename.replace(/[_:!?/ ]/g, '').toLowerCase();\n\t\t\t}\n\n\t\t\tfunction checkNiceName(nicename: string): RuleResult | undefined {\n\t\t\t\tconst nameSlug = slug(folder.path);\n\t\t\t\tconst nicenameSlug = niceSlug(nicename);\n\t\t\t\tif (nameSlug.localeCompare(nicenameSlug) !== 0) {\n\t\t\t\t\treturn {details: [{reason: 'not equal', actual: path.basename(folder.path), expected: nicename}]};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ((folder.tag.type === FolderType.album) ||\n\t\t\t\t((folder.tag.type === FolderType.multialbum) && (folder.tag.trackCount === 0))\n\t\t\t) {\n\t\t\t\tconst hasArtist = parents.find(p => p.tag.type === FolderType.artist);\n\t\t\t\tif (hasArtist) {\n\t\t\t\t\tif ((folder.tag.album) && (folder.tag.year) && (folder.tag.year > 0)) {\n\t\t\t\t\t\treturn checkNiceName(getNiceAlbumFolderName(folder.tag));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ((folder.tag.album)) {\n\t\t\t\t\treturn checkNiceName(getNiceOtherFolderName(folder.tag));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t{\n\t\tid: FolderHealthID.albumImageExists,\n\t\tname: 'Album folder image is missing',\n\t\trun: async (folder, parents, root): Promise<RuleResult | undefined> => {\n\t\t\tif ((folder.tag.type === FolderType.album) || (folder.tag.type === FolderType.multialbum && folder.tag.folderCount > 0)) {\n\t\t\t\tconst artwork = await getFolderDisplayImage(folder);\n\t\t\t\tif (!artwork) {\n\t\t\t\t\treturn {};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t{\n\t\tid: FolderHealthID.albumImageValid,\n\t\tname: 'Album folder image is invalid',\n\t\trun: async (folder, parents, root): Promise<RuleResult | undefined> => {\n\t\t\tif ((folder.tag.type === FolderType.album) || (folder.tag.type === FolderType.multialbum && folder.tag.folderCount > 0)) {\n\t\t\t\tconst artwork = await getFolderDisplayImage(folder);\n\t\t\t\tif (artwork && (!artwork.image || artwork.image.format === 'invalid')) {\n\t\t\t\t\treturn {details: [{reason: 'Broken or unsupported File Format'}]};\n\t\t\t\t}\n\t\t\t\tif (artwork && artwork.image) {\n\t\t\t\t\tlet actual = fileSuffix(artwork.name);\n\t\t\t\t\tif (actual === 'jpg') {\n\t\t\t\t\t\tactual = 'jpeg';\n\t\t\t\t\t}\n\t\t\t\t\tconst expected = artwork.image.format;\n\t\t\t\t\tif (actual !== expected) {\n\t\t\t\t\t\treturn {details: [{reason: 'Wrong File Extension', actual, expected}]};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t{\n\t\tid: FolderHealthID.albumImageQuality,\n\t\tname: 'Album folder image is of low quality',\n\t\trun: async (folder, parents, root): Promise<RuleResult | undefined> => {\n\t\t\tif ((folder.tag.type === FolderType.album) || (folder.tag.type === FolderType.multialbum && folder.tag.folderCount > 0)) {\n\t\t\t\tconst artwork = await getFolderDisplayImage(folder);\n\t\t\t\tif (artwork && artwork.image) {\n\t\t\t\t\tif (artwork.image.height && artwork.image.width && (artwork.image.height < 300 || artwork.image.width < 300)) {\n\t\t\t\t\t\treturn {details: [{reason: 'Image is too small', actual: `${artwork.image.width} x ${artwork.image.height}`, expected: '>=300 x >=300'}]};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t{\n\t\tid: FolderHealthID.artistImageExists,\n\t\tname: 'Artist folder image is missing',\n\t\trun: async (folder, parents, root): Promise<RuleResult | undefined> => {\n\t\t\tif (folder.tag.type === FolderType.artist) {\n\t\t\t\tconst artwork = await getFolderDisplayImage(folder);\n\t\t\t\tif (!artwork) {\n\t\t\t\t\treturn {};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t{\n\t\tid: FolderHealthID.artistImageValid,\n\t\tname: 'Artist folder image is invalid',\n\t\trun: async (folder, parents, root): Promise<RuleResult | undefined> => {\n\t\t\tif (folder.tag.type === FolderType.artist) {\n\t\t\t\tconst artwork = await getFolderDisplayImage(folder);\n\t\t\t\tif (artwork && (!artwork.image || artwork.image.format === 'invalid')) {\n\t\t\t\t\treturn {details: [{reason: 'Broken or unsupported File Format'}]};\n\t\t\t\t}\n\t\t\t\tif (artwork && artwork.image) {\n\t\t\t\t\tlet actual = fileSuffix(artwork.name);\n\t\t\t\t\tif (actual === 'jpg') {\n\t\t\t\t\t\tactual = 'jpeg';\n\t\t\t\t\t}\n\t\t\t\t\tconst expected = artwork.image.format;\n\t\t\t\t\tif (actual !== expected) {\n\t\t\t\t\t\treturn {details: [{reason: 'Wrong File Extension', actual, expected}]};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t{\n\t\tid: FolderHealthID.artistNameConform,\n\t\tname: 'Artist folder name is not conform',\n\t\trun: async (folder, parents, root): Promise<RuleResult | undefined> => {\n\t\t\tif (folder.tag.type === FolderType.artist && folder.tag.artist) {\n\t\t\t\tconst nameSlug = path.basename(folder.path).trim().replace(/[_:!?/ ]/g, '').toLowerCase();\n\t\t\t\tconst artistName = replaceFolderSystemChars(folder.tag.artist, '_');\n\t\t\t\tconst artistNameSlug = artistName.replace(/[_:!?/ ]/g, '').toLowerCase();\n\t\t\t\tif (nameSlug.localeCompare(artistNameSlug) !== 0) {\n\t\t\t\t\treturn {details: [{reason: 'not equal', actual: path.basename(folder.path), expected: artistName}]};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n];\n\nexport class FolderRulesChecker {\n\n\tasync run(folder: Folder, parents: Array<Folder>, root: Root): Promise<Array<Jam.HealthHint>> {\n\t\tconst result: Array<Jam.HealthHint> = [];\n\t\tfor (const rule of folderRules) {\n\t\t\tconst match = await rule.run(folder, parents, root);\n\t\t\tif (match) {\n\t\t\t\tresult.push({\n\t\t\t\t\tid: rule.id,\n\t\t\t\t\tname: rule.name,\n\t\t\t\t\tdetails: match.details\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n}\n","import {JamRequest} from '../../api/jam/api';\nimport {Jam} from '../../model/jam-rest-data';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {paginate} from '../../utils/paginate';\nimport {ListResult} from '../base/list-result';\nimport {formatGenre} from './genre.format';\nimport {GenreService} from './genre.service';\n\nexport class GenreController {\n\n\tconstructor(private genreService: GenreService) {\n\t}\n\n\tasync list(req: JamRequest<JamParameters.Genres>): Promise<ListResult<Jam.Genre>> {\n\t\tconst genres = await this.genreService.getGenres(req.query.rootID);\n\t\tconst list = paginate(genres, req.query.amount, req.query.offset);\n\t\treturn {\n\t\t\ttotal: list.total,\n\t\t\tamount: list.amount,\n\t\t\toffset: list.offset,\n\t\t\titems: list.items.map(formatGenre)\n\t\t};\n\t}\n\n}\n","import {Jam} from '../../model/jam-rest-data';\nimport {Genre} from './genre.model';\n\nexport function formatGenre(genre: Genre): Jam.Genre {\n\treturn {\n\t\tname: genre.name,\n\t\ttrackCount: genre.trackCount,\n\t\talbumCount: genre.albumCount,\n\t\tartistCount: genre.artistCount\n\t};\n}\n","import {JamRequest} from '../../api/jam/api';\nimport {validatePathParameterIDSizeFormat} from '../../api/jam/check';\nimport {InvalidParamError, NotFoundError} from '../../api/jam/error';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {ApiBinaryResult} from '../../typings';\nimport {SupportedWriteImageFormat} from '../../utils/filetype';\nimport {DBObject} from '../base/base.model';\nimport {Store} from '../store/store';\nimport {ImageService} from './image.service';\n\nexport class ImageController {\n\tconstructor(\n\t\tprivate store: Store,\n\t\tprivate imageService: ImageService\n\t) {\n\t}\n\n\tasync image(req: JamRequest<JamParameters.Image>): Promise<ApiBinaryResult> {\n\t\tif (req.query.format !== undefined && !SupportedWriteImageFormat.includes(req.query.format)) {\n\t\t\treturn Promise.reject(InvalidParamError());\n\t\t}\n\t\tconst obj = await this.byID(req.query.id);\n\t\tconst result = await this.imageService.getObjImage(obj, req.query.size, req.query.format);\n\t\tif (!result) {\n\t\t\treturn Promise.reject(NotFoundError());\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic async imageByPathParameter(req: JamRequest<{ pathParameter: string }>): Promise<ApiBinaryResult> {\n\t\tconst {id, size, format} = await validatePathParameterIDSizeFormat(req.query.pathParameter, SupportedWriteImageFormat, undefined, 16, 1024);\n\t\treturn this.image({query: {id, size, format: format as JamParameters.ImageFormatType}, user: req.user});\n\t}\n\n\tprivate async byID(id: string): Promise<DBObject> {\n\t\tif (!id || id.length === 0) {\n\t\t\treturn Promise.reject(InvalidParamError());\n\t\t}\n\t\tconst obj = await this.store.findInAll(id);\n\t\tif (!obj) {\n\t\t\treturn Promise.reject(NotFoundError());\n\t\t}\n\t\treturn obj;\n\t}\n}\n","import {JamRequest} from '../../api/jam/api';\nimport {AcousticBrainz} from '../../model/acousticbrainz-rest-data';\nimport {Acoustid} from '../../model/acoustid-rest-data';\nimport {CoverArtArchive} from '../../model/coverartarchive-rest-data';\nimport {Jam} from '../../model/jam-rest-data';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {LastFM} from '../../model/lastfm-rest-data';\nimport {MusicBrainz} from '../../model/musicbrainz-rest-data';\nimport {TrackController} from '../track/track.controller';\nimport {MetaDataService} from './metadata.service';\n\nexport class MetadataController {\n\n\tconstructor(public metadataService: MetaDataService, private trackController: TrackController) {\n\t}\n\n\tasync musicbrainzSearch(req: JamRequest<JamParameters.MusicBrainzSearch>): Promise<MusicBrainz.Response> {\n\t\tconst query = {...req.query};\n\t\tdelete query.type;\n\t\treturn this.metadataService.musicbrainzSearch(req.query.type, query);\n\t}\n\n\tasync acoustidLookup(req: JamRequest<JamParameters.AcoustidLookup>): Promise<Array<Acoustid.Result>> {\n\t\tconst track = await this.trackController.byID(req.query.id);\n\t\treturn this.metadataService.acoustidLookupTrack(track, req.query.inc);\n\t}\n\n\tasync lastfmLookup(req: JamRequest<JamParameters.LastFMLookup>): Promise<LastFM.Result> {\n\t\treturn this.metadataService.lastFMLookup(req.query.type, req.query.id);\n\t}\n\n\tasync acousticbrainzLookup(req: JamRequest<JamParameters.AcousticBrainzLookup>): Promise<AcousticBrainz.Response> {\n\t\treturn this.metadataService.acousticbrainzLookup(req.query.id, req.query.nr);\n\t}\n\n\tasync coverartarchiveLookup(req: JamRequest<JamParameters.CoverArtArchiveLookup>): Promise<CoverArtArchive.Response> {\n\t\treturn this.metadataService.coverartarchiveLookup(req.query.type, req.query.id);\n\t}\n\n\tasync musicbrainzLookup(req: JamRequest<JamParameters.MusicBrainzLookup>): Promise<MusicBrainz.Response> {\n\t\treturn this.metadataService.musicbrainzLookup(req.query.type, req.query.id, req.query.inc);\n\t}\n\n\tasync wikipediaSummary(req: JamRequest<JamParameters.WikipediaSummary>): Promise<Jam.WikipediaSummaryResponse> {\n\t\treturn this.metadataService.wikipediaSummary(req.query.title, req.query.lang);\n\t}\n\n\tasync wikidataSummary(req: JamRequest<JamParameters.WikidataSummary>): Promise<Jam.WikipediaSummaryResponse> {\n\t\treturn this.metadataService.wikidataSummary(req.query.id, req.query.lang);\n\t}\n\n\tasync wikidataLookup(req: JamRequest<JamParameters.WikidataLookup>): Promise<Jam.WikidataLookupResponse> {\n\t\treturn this.metadataService.wikidataLookup(req.query.id);\n\t}\n\n\tasync lyricsovhSearch(req: JamRequest<JamParameters.LyricsOVHSearch>): Promise<Jam.LyricsOVHResponse> {\n\t\treturn this.metadataService.lyrics(req.query.artist, req.query.title);\n\t}\n\n}\n","import {JamRequest} from '../../api/jam/api';\nimport {Jam} from '../../model/jam-rest-data';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {paginate} from '../../utils/paginate';\nimport {ListResult} from '../base/list-result';\nimport {packNowPlaying} from './nowplaying.format';\nimport {NowPlayingService} from './nowplaying.service';\n\nexport class NowPlayingController {\n\n\tconstructor(private nowplayingService: NowPlayingService) {\n\t}\n\n\tasync list(req: JamRequest<JamParameters.NowPlaying>): Promise<ListResult<Jam.NowPlaying>> {\n\t\tconst nowPlayings = await this.nowplayingService.getNowPlaying();\n\t\tconst list = paginate(nowPlayings, req.query.amount, req.query.offset);\n\t\treturn {\n\t\t\ttotal: list.total,\n\t\t\tamount: list.amount,\n\t\t\toffset: list.offset,\n\t\t\titems: list.items.map(packNowPlaying)\n\t\t};\n\t}\n\n}\n","import moment from 'moment';\nimport {DBObjectType} from '../../db/db.types';\nimport {Jam} from '../../model/jam-rest-data';\nimport {formatEpisode} from '../episode/episode.format';\nimport {Episode} from '../episode/episode.model';\nimport {formatTrack} from '../track/track.format';\nimport {Track} from '../track/track.model';\nimport {NowPlaying} from './nowplaying.model';\n\nexport function packNowPlaying(entry: NowPlaying): Jam.NowPlaying {\n\tconst playing: Jam.NowPlaying = {\n\t\tusername: entry.user.name,\n\t\tminutesAgo: Math.round(moment.duration(moment().diff(moment(entry.time))).asMinutes())\n\t};\n\tswitch (entry.obj.type) {\n\t\tcase DBObjectType.track:\n\t\t\tplaying.track = formatTrack(entry.obj as Track, {});\n\t\t\tbreak;\n\t\tcase DBObjectType.episode: {\n\t\t\tconst episode = entry.obj as Episode;\n\t\t\tplaying.track = formatEpisode(episode, {}, episode.status);\n\t\t\tbreak;\n\t\t}\n\t\tdefault:\n\t}\n\treturn playing;\n}\n","import {JamRequest} from '../../api/jam/api';\nimport {UnauthError} from '../../api/jam/error';\nimport {DBObjectType} from '../../db/db.types';\nimport {Jam} from '../../model/jam-rest-data';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {paginate} from '../../utils/paginate';\nimport {BaseListController} from '../base/dbobject-list.controller';\nimport {ListResult} from '../base/list-result';\nimport {DownloadService} from '../download/download.service';\nimport {ImageService} from '../image/image.service';\nimport {formatState} from '../state/state.format';\nimport {StateService} from '../state/state.service';\nimport {TrackController} from '../track/track.controller';\nimport {User} from '../user/user.model';\nimport {formatPlaylist} from './playlist.format';\nimport {Playlist} from './playlist.model';\nimport {PlaylistService} from './playlist.service';\nimport {SearchQueryPlaylist} from './playlist.store';\n\nexport class PlaylistController extends BaseListController<JamParameters.Playlist,\n\tJamParameters.Playlists,\n\tJamParameters.IncludesPlaylist,\n\tSearchQueryPlaylist,\n\tJamParameters.PlaylistSearch,\n\tPlaylist,\n\tJam.Playlist,\n\tJamParameters.PlaylistList> {\n\n\tconstructor(\n\t\tprivate playlistService: PlaylistService,\n\t\tprivate trackController: TrackController,\n\t\tprotected stateService: StateService,\n\t\tprotected imageService: ImageService,\n\t\tprotected downloadService: DownloadService\n\t) {\n\t\tsuper(playlistService, stateService, imageService, downloadService);\n\t}\n\n\t// TODO: filter none public playlist in base api functions?\n\n\tasync prepare(playlist: Playlist, includes: JamParameters.IncludesPlaylist, user: User): Promise<Jam.Playlist> {\n\t\tconst result = formatPlaylist(playlist, includes);\n\t\tif (includes.playlistState) {\n\t\t\tconst state = await this.stateService.findOrCreate(playlist.id, user.id, DBObjectType.artist);\n\t\t\tresult.state = formatState(state);\n\t\t}\n\t\tif (includes.playlistTracks) {\n\t\t\tresult.tracks = await this.trackController.prepareListByIDs(playlist.trackIDs, includes, user);\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync translateQuery(query: JamParameters.PlaylistSearch, user: User): Promise<SearchQueryPlaylist> {\n\t\treturn {\n\t\t\tquery: query.query,\n\t\t\tid: query.id,\n\t\t\tids: query.ids,\n\t\t\tname: query.name,\n\t\t\tuserID: user.id,\n\t\t\tisPublic: query.isPublic,\n\t\t\toffset: query.offset,\n\t\t\tamount: query.amount,\n\t\t\tsorts: query.sortField ? [{field: query.sortField, descending: !!query.sortDescending}] : undefined\n\t\t};\n\t}\n\n\tasync create(req: JamRequest<JamParameters.PlaylistNew>): Promise<Jam.Playlist> {\n\t\tconst playlist = await this.playlistService.create(req.query.name, req.query.comment, req.query.isPublic === undefined ? false : req.query.isPublic, req.user.id, req.query.trackIDs || []);\n\t\treturn this.prepare(playlist, {playlistTrackIDs: true, playlistState: true}, req.user);\n\t}\n\n\tasync update(req: JamRequest<JamParameters.PlaylistUpdate>): Promise<void> {\n\t\tconst playlist = await this.byID(req.query.id);\n\t\tif (playlist.userID !== req.user.id) {\n\t\t\treturn Promise.reject(UnauthError());\n\t\t}\n\t\tplaylist.name = req.query.name || playlist.name;\n\t\tplaylist.comment = req.query.comment || playlist.comment;\n\t\tplaylist.isPublic = req.query.isPublic === undefined ? playlist.isPublic : req.query.isPublic;\n\t\tplaylist.changed = Date.now();\n\t\tplaylist.trackIDs = req.query.trackIDs || [];\n\t\tawait this.playlistService.update(playlist);\n\t}\n\n\tasync tracks(req: JamRequest<JamParameters.PlaylistTracks>): Promise<ListResult<Jam.Track>> {\n\t\tlet playlists = await this.byIDs(req.query.ids);\n\t\tplaylists = playlists.filter(playlist => playlist.userID === req.user.id);\n\t\tlet trackIDs: Array<string> = [];\n\t\tplaylists.forEach(playlist => {\n\t\t\ttrackIDs = trackIDs.concat(playlist.trackIDs);\n\t\t});\n\t\tconst list = paginate(trackIDs, req.query.amount, req.query.offset);\n\t\treturn {\n\t\t\ttotal: list.total,\n\t\t\tamount: list.amount,\n\t\t\toffset: list.offset,\n\t\t\titems: await this.trackController.prepareListByIDs(list.items, req.query, req.user)\n\t\t};\n\t}\n\n\tasync delete(req: JamRequest<JamParameters.ID>): Promise<void> {\n\t\tconst playlist = await this.byID(req.query.id);\n\t\tif (playlist.userID !== req.user.id) {\n\t\t\treturn Promise.reject(UnauthError());\n\t\t}\n\t\tawait this.playlistService.remove(playlist);\n\t}\n\n}\n","import {Jam} from '../../model/jam-rest-data';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {Playlist} from './playlist.model';\n\nexport function formatPlaylist(playlist: Playlist, includes: JamParameters.IncludesPlaylist): Jam.Playlist {\n\treturn {\n\t\tid: playlist.id,\n\t\tname: playlist.name,\n\t\tuserID: playlist.userID,\n\t\tcomment: playlist.comment,\n\t\tisPublic: playlist.isPublic,\n\t\tduration: playlist.duration,\n\t\tcreated: playlist.created,\n\t\tchanged: playlist.changed,\n\t\ttrackCount: playlist.trackIDs.length,\n\t\ttrackIDs: includes.playlistTrackIDs ? playlist.trackIDs : undefined\n\t};\n}\n","import {JamRequest} from '../../api/jam/api';\nimport {Jam} from '../../model/jam-rest-data';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {TrackController} from '../track/track.controller';\nimport {formatPlayQueue} from './playqueue.format';\nimport {PlayQueueService} from './playqueue.service';\n\nexport class PlayQueueController {\n\n\tconstructor(\n\t\tprivate playqueueService: PlayQueueService,\n\t\tprivate trackController: TrackController\n\t) {\n\t}\n\n\tasync get(req: JamRequest<JamParameters.PlayQueue>): Promise<Jam.PlayQueue> {\n\t\tconst playQueue = await this.playqueueService.getQueueOrCreate(req.user.id, req.client);\n\t\tconst result = formatPlayQueue(playQueue, req.query);\n\t\tif (req.query.playQueueTracks) {\n\t\t\tresult.tracks = await this.trackController.prepareListByIDs(playQueue.trackIDs, req.query, req.user);\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync update(req: JamRequest<JamParameters.PlayQueueSet>): Promise<Jam.PlayQueue> {\n\t\treturn this.playqueueService.save(req.user.id, req.query.trackIDs, req.query.currentID, req.query.position, req.client);\n\t}\n\n\tasync delete(req: JamRequest<{}>): Promise<void> {\n\t\tawait this.playqueueService.remove(req.user.id);\n\t}\n\n}\n","import {Jam} from '../../model/jam-rest-data';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {PlayQueue} from './playqueue.model';\n\nexport function formatPlayQueue(playQueue: PlayQueue, includes: JamParameters.IncludesPlayQueue): Jam.PlayQueue {\n\treturn {\n\t\tchanged: playQueue.changed,\n\t\tchangedBy: playQueue.changedBy,\n\t\tcurrentID: playQueue.currentID,\n\t\tposition: playQueue.position,\n\t\ttrackIDs: includes.playQueueTrackIDs ? playQueue.trackIDs : undefined\n\t};\n}\n","import {JamRequest} from '../../api/jam/api';\nimport {DBObjectType} from '../../db/db.types';\nimport {Jam} from '../../model/jam-rest-data';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {PodcastStatus} from '../../model/jam-types';\nimport {logger} from '../../utils/logger';\nimport {BaseListController} from '../base/dbobject-list.controller';\nimport {ListResult} from '../base/list-result';\nimport {DownloadService} from '../download/download.service';\nimport {EpisodeController} from '../episode/episode.controller';\nimport {ImageService} from '../image/image.service';\nimport {formatState} from '../state/state.format';\nimport {StateService} from '../state/state.service';\nimport {User} from '../user/user.model';\nimport {formatPodcast} from './podcast.format';\nimport {Podcast} from './podcast.model';\nimport {PodcastService} from './podcast.service';\nimport {SearchQueryPodcast} from './podcast.store';\n\nconst log = logger('PodcastController');\n\nexport class PodcastController extends BaseListController<JamParameters.Podcast,\n\tJamParameters.Podcasts,\n\tJamParameters.IncludesPodcast,\n\tSearchQueryPodcast,\n\tJamParameters.PodcastSearch,\n\tPodcast,\n\tJam.Podcast,\n\tJamParameters.PodcastList> {\n\n\tconstructor(\n\t\tprivate podcastService: PodcastService,\n\t\tprivate episodeController: EpisodeController,\n\t\tprotected stateService: StateService,\n\t\tprotected imageService: ImageService,\n\t\tprotected downloadService: DownloadService\n\t) {\n\t\tsuper(podcastService, stateService, imageService, downloadService);\n\t}\n\n\tasync prepare(podcast: Podcast, includes: JamParameters.IncludesPodcast, user: User): Promise<Jam.Podcast> {\n\t\tconst result = formatPodcast(podcast, this.podcastService.isDownloading(podcast.id) ? PodcastStatus.downloading : podcast.status);\n\t\tif (includes.podcastState) {\n\t\t\tconst state = await this.stateService.findOrCreate(podcast.id, user.id, DBObjectType.podcast);\n\t\t\tresult.state = formatState(state);\n\t\t}\n\t\tif (includes.podcastEpisodes) {\n\t\t\tresult.episodes = (await this.episodeController.prepareByQuery({podcastID: podcast.id}, includes, user)).items;\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync translateQuery(query: JamParameters.PodcastSearch, user: User): Promise<SearchQueryPodcast> {\n\t\treturn {\n\t\t\tquery: query.query,\n\t\t\tid: query.id,\n\t\t\tids: query.ids,\n\t\t\turl: query.url,\n\t\t\ttitle: query.title,\n\t\t\tstatus: query.status,\n\t\t\toffset: query.offset,\n\t\t\tamount: query.amount,\n\t\t\tsorts: query.sortField ? [{field: query.sortField, descending: !!query.sortDescending}] : undefined\n\t\t};\n\t}\n\n\tasync episodes(req: JamRequest<JamParameters.PodcastEpisodes>): Promise<ListResult<Jam.PodcastEpisode>> {\n\t\treturn this.episodeController.prepareByQuery({podcastID: req.query.id, amount: req.query.amount, offset: req.query.offset}, req.query, req.user);\n\t}\n\n\tasync refreshAll(req: JamRequest<{}>): Promise<void> {\n\t\tthis.podcastService.refreshPodcasts().catch(e => log.error(e)); // do not wait\n\t}\n\n\tasync refresh(req: JamRequest<JamParameters.ID>): Promise<void> {\n\t\tconst podcast = await this.byID(req.query.id);\n\t\tthis.podcastService.refresh(podcast).catch(e => log.error(e)); // do not wait\n\t}\n\n\tasync create(req: JamRequest<JamParameters.PodcastNew>): Promise<Jam.Podcast> {\n\t\tconst podcast = await this.podcastService.create(req.query.url);\n\t\tthis.podcastService.refresh(podcast).catch(e => log.error(e)); // do not wait\n\t\treturn this.prepare(podcast, {}, req.user);\n\t}\n\n\tasync delete(req: JamRequest<JamParameters.ID>): Promise<void> {\n\t\tconst podcast = await this.byID(req.query.id);\n\t\tawait this.podcastService.remove(podcast);\n\t}\n\n\tasync status(req: JamRequest<JamParameters.ID>): Promise<Jam.PodcastStatus> {\n\t\tconst podcast = await this.byID(req.query.id);\n\t\treturn {\n\t\t\tlastCheck: podcast.lastCheck,\n\t\t\tstatus: (this.podcastService.isDownloading(podcast.id) ? PodcastStatus[PodcastStatus.downloading] : PodcastStatus[podcast.status]) as Jam.PodcastStatusType\n\t\t};\n\t}\n\n}\n","import {Jam} from '../../model/jam-rest-data';\nimport {PodcastStatus} from '../../model/jam-types';\nimport {Podcast} from './podcast.model';\n\nexport function formatPodcast(podcast: Podcast, status: PodcastStatus): Jam.Podcast {\n\treturn {\n\t\tid: podcast.id,\n\t\turl: podcast.url,\n\t\tcreated: podcast.created,\n\t\tlastCheck: podcast.lastCheck > 0 ? podcast.lastCheck : undefined,\n\t\tstatus: status as Jam.PodcastStatusType,\n\t\terrorMessage: podcast.errorMessage,\n\t\tname: podcast.tag ? podcast.tag.title : podcast.url,\n\t\tdescription: podcast.tag ? podcast.tag.description : undefined\n\t};\n}\n","import {JamRequest} from '../../api/jam/api';\nimport {DBObjectType} from '../../db/db.types';\nimport {Jam} from '../../model/jam-rest-data';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {BaseController} from '../base/dbobject.controller';\nimport {DownloadService} from '../download/download.service';\nimport {ImageService} from '../image/image.service';\nimport {formatState} from '../state/state.format';\nimport {StateService} from '../state/state.service';\nimport {User} from '../user/user.model';\nimport {formatRadio} from './radio.format';\nimport {Radio} from './radio.model';\nimport {RadioService} from './radio.service';\nimport {SearchQueryRadio} from './radio.store';\n\nexport class RadioController extends BaseController<JamParameters.Radio, JamParameters.Radios, JamParameters.IncludesRadio, SearchQueryRadio, JamParameters.RadioSearch, Radio, Jam.Radio> {\n\n\tconstructor(\n\t\tprivate radioService: RadioService,\n\t\tprotected stateService: StateService,\n\t\tprotected imageService: ImageService,\n\t\tprotected downloadService: DownloadService\n\t) {\n\t\tsuper(radioService, stateService, imageService, downloadService);\n\t}\n\n\tasync prepare(radio: Radio, includes: JamParameters.IncludesRadio, user: User): Promise<Jam.Radio> {\n\t\tconst result = formatRadio(radio);\n\t\tif (includes.radioState) {\n\t\t\tconst state = await this.stateService.findOrCreate(radio.id, user.id, DBObjectType.radio);\n\t\t\tresult.state = formatState(state);\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync translateQuery(query: JamParameters.RadioSearch, user: User): Promise<SearchQueryRadio> {\n\t\treturn {\n\t\t\tquery: query.query,\n\t\t\tid: query.id,\n\t\t\tids: query.ids,\n\t\t\turl: query.url,\n\t\t\tname: query.name,\n\t\t\thomepage: query.homepage,\n\t\t\toffset: query.offset,\n\t\t\tamount: query.amount,\n\t\t\tsorts: query.sortField ? [{field: query.sortField, descending: !!query.sortDescending}] : undefined\n\t\t};\n\t}\n\n\tasync create(req: JamRequest<JamParameters.RadioNew>): Promise<Jam.Radio> {\n\t\tconst radio = await this.radioService.create(req.query.name, req.query.url, req.query.homepage);\n\t\treturn this.prepare(radio, {radioState: true}, req.user);\n\t}\n\n\tasync update(req: JamRequest<JamParameters.RadioUpdate>): Promise<void> {\n\t\tconst radio = await this.byID(req.query.id);\n\t\tawait this.radioService.update(radio, req.query.name, req.query.url, req.query.homepage);\n\t}\n\n\tasync delete(req: JamRequest<JamParameters.ID>): Promise<void> {\n\t\tconst radio = await this.byID(req.query.id);\n\t\tawait this.radioService.remove(radio);\n\t}\n\n}\n","import {Jam} from '../../model/jam-rest-data';\nimport {Radio} from './radio.model';\n\nexport function formatRadio(radio: Radio): Jam.Radio {\n\treturn {\n\t\tid: radio.id,\n\t\turl: radio.url,\n\t\tcreated: radio.created,\n\t\tchanged: radio.changed,\n\t\tname: radio.name,\n\t\thomepage: radio.homepage\n\t};\n}\n","import {JamRequest} from '../../api/jam/api';\nimport {Jam} from '../../model/jam-rest-data';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {RootScanStrategy} from '../../model/jam-types';\nimport {BaseController} from '../base/dbobject.controller';\nimport {DownloadService} from '../download/download.service';\nimport {ImageService} from '../image/image.service';\nimport {IoService} from '../io/io.service';\nimport {StateService} from '../state/state.service';\nimport {User} from '../user/user.model';\nimport {formatRoot} from './root.format';\nimport {Root} from './root.model';\nimport {RootService} from './root.service';\nimport {SearchQueryRoot} from './root.store';\n\nexport class RootController extends BaseController<JamParameters.ID, JamParameters.IDs, {}, SearchQueryRoot, JamParameters.RootSearch, Root, Jam.Root> {\n\n\tconstructor(\n\t\tpublic rootService: RootService,\n\t\tprivate ioService: IoService,\n\t\tprotected stateService: StateService,\n\t\tprotected imageService: ImageService,\n\t\tprotected downloadService: DownloadService\n\t) {\n\t\tsuper(rootService, stateService, imageService, downloadService);\n\t}\n\n\tasync prepare(root: Root, includes: {}, user: User): Promise<Jam.Root> {\n\t\treturn formatRoot(root, this.ioService.getRootStatus(root.id));\n\t}\n\n\tasync translateQuery(query: JamParameters.RootSearch, user: User): Promise<SearchQueryRoot> {\n\t\treturn {\n\t\t\tquery: query.query,\n\t\t\tid: query.id,\n\t\t\tids: query.ids,\n\t\t\toffset: query.offset,\n\t\t\tamount: query.amount,\n\t\t\tsorts: query.sortField ? [{field: query.sortField, descending: !!query.sortDescending}] : undefined\n\t\t};\n\t}\n\n\tasync create(req: JamRequest<JamParameters.RootNew>): Promise<Jam.AdminChangeQueueInfo> {\n\t\treturn this.ioService.createRoot(req.query.name, req.query.path, req.query.strategy as RootScanStrategy);\n\t}\n\n\tasync update(req: JamRequest<JamParameters.RootUpdate>): Promise<Jam.AdminChangeQueueInfo> {\n\t\tconst root = await this.byID(req.query.id);\n\t\treturn this.ioService.updateRoot(root.id, req.query.name, req.query.path, req.query.strategy as RootScanStrategy);\n\t}\n\n\tasync delete(req: JamRequest<JamParameters.ID>): Promise<Jam.AdminChangeQueueInfo> {\n\t\tconst root = await this.byID(req.query.id);\n\t\treturn this.ioService.removeRoot(root.id);\n\t}\n\n\tasync refreshAll(req: JamRequest<JamParameters.RootRefreshAll>): Promise<Array<Jam.AdminChangeQueueInfo>> {\n\t\treturn this.ioService.refresh(req.query.refreshMeta);\n\t}\n\n\tasync refresh(req: JamRequest<JamParameters.RootRefresh>): Promise<Jam.AdminChangeQueueInfo> {\n\t\tconst root = await this.byID(req.query.id);\n\t\treturn this.ioService.refreshRoot(root.id, req.query.refreshMeta);\n\t}\n\n\tasync status(req: JamRequest<JamParameters.ID>): Promise<Jam.RootStatus> {\n\t\tconst root = await this.byID(req.query.id);\n\t\treturn this.ioService.getRootStatus(root.id);\n\t}\n\n\tasync queueId(req: JamRequest<JamParameters.ID>): Promise<Jam.AdminChangeQueueInfo> {\n\t\treturn this.ioService.getAdminChangeQueueInfoStatus(req.query.id);\n\t}\n\n}\n","import {Jam} from '../../model/jam-rest-data';\nimport {Root, RootStatus} from './root.model';\n\nexport function formatRoot(root: Root, rootState: RootStatus): Jam.Root {\n\treturn {\n\t\tid: root.id,\n\t\tname: root.name,\n\t\tcreated: root.created,\n\t\tpath: root.path,\n\t\tstatus: rootState,\n\t\tstrategy: root.strategy\n\t};\n}\n","import {JamRequest} from '../../api/jam/api';\nimport {DBObjectType} from '../../db/db.types';\nimport {Jam} from '../../model/jam-rest-data';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {paginate} from '../../utils/paginate';\nimport {AlbumController} from '../album/album.controller';\nimport {Album} from '../album/album.model';\nimport {BaseListController} from '../base/dbobject-list.controller';\nimport {ListResult} from '../base/list-result';\nimport {DownloadService} from '../download/download.service';\nimport {ImageService} from '../image/image.service';\nimport {formatSeriesIndex} from '../index/index.format';\nimport {IndexService} from '../index/index.service';\nimport {MetaDataService} from '../metadata/metadata.service';\nimport {formatState} from '../state/state.format';\nimport {StateService} from '../state/state.service';\nimport {TrackController} from '../track/track.controller';\nimport {Track} from '../track/track.model';\nimport {User} from '../user/user.model';\nimport {formatSeries} from './series.format';\nimport {Series} from './series.model';\nimport {SeriesService} from './series.service';\nimport {SearchQuerySeries} from './series.store';\n\nexport class SeriesController extends BaseListController<JamParameters.Series,\n\tJamParameters.Serieses,\n\tJamParameters.IncludesSeries,\n\tSearchQuerySeries,\n\tJamParameters.SeriesSearch,\n\tSeries,\n\tJam.Series,\n\tJamParameters.SeriesList> {\n\n\tconstructor(\n\t\tpublic seriesService: SeriesService,\n\t\tprivate trackController: TrackController,\n\t\tprivate albumController: AlbumController,\n\t\tprivate metaDataService: MetaDataService,\n\t\tprivate indexService: IndexService,\n\t\tprotected stateService: StateService,\n\t\tprotected imageService: ImageService,\n\t\tprotected downloadService: DownloadService\n\t) {\n\t\tsuper(seriesService, stateService, imageService, downloadService);\n\t}\n\n\tstatic sortGrouping(a: string, b: string): number {\n\t\tconst aNr = Number(a);\n\t\tconst bNr = Number(b);\n\t\tif (isNaN(aNr) || isNaN(bNr)) {\n\t\t\treturn (a || '').localeCompare(b || '');\n\t\t}\n\t\treturn aNr - bNr;\n\t}\n\n\tstatic sortSeriesAlbums(a: Album, b: Album): number {\n\t\tlet res = a.albumType.localeCompare(b.albumType);\n\t\tif (res === 0) {\n\t\t\tif (a.seriesNr && b.seriesNr) {\n\t\t\t\tres = SeriesController.sortGrouping(a.seriesNr, b.seriesNr);\n\t\t\t} else if (a.seriesNr || b.seriesNr) {\n\t\t\t\tres = a.seriesNr ? 1 : -1;\n\t\t\t}\n\t\t}\n\t\tif (res === 0) {\n\t\t\tres = (b.year || 0) - (a.year || 0);\n\t\t}\n\t\tif (res === 0) {\n\t\t\tres = a.name.localeCompare(b.name);\n\t\t}\n\t\treturn res;\n\t}\n\n\tstatic sortSeriesTracks(a: Track, b: Track): number {\n\t\tlet res = a.parentID.localeCompare(b.parentID);\n\t\tif (res === 0) {\n\t\t\tres = (b.tag.disc || 0) - (a.tag.disc || 0);\n\t\t}\n\t\tif (res === 0) {\n\t\t\tres = (b.tag.track || 0) - (a.tag.track || 0);\n\t\t}\n\t\treturn res;\n\t}\n\n\tasync prepare(series: Series, includes: JamParameters.IncludesSeries, user: User): Promise<Jam.Series> {\n\t\tconst result = formatSeries(series, includes);\n\t\tif (includes.seriesState) {\n\t\t\tconst state = await this.stateService.findOrCreate(series.id, user.id, DBObjectType.series);\n\t\t\tresult.state = formatState(state);\n\t\t}\n\t\tif (includes.seriesInfo) {\n\t\t\tresult.info = await this.metaDataService.extInfo.bySeries(series);\n\t\t}\n\t\tif (includes.seriesTracks) {\n\t\t\tresult.tracks = await this.trackController.prepareListByIDs(series.trackIDs, includes, user, SeriesController.sortSeriesTracks);\n\t\t}\n\t\tif (includes.seriesAlbums) {\n\t\t\tresult.albums = await this.albumController.prepareListByIDs(series.albumIDs, includes, user, SeriesController.sortSeriesAlbums);\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync translateQuery(query: JamParameters.SeriesSearch, user: User): Promise<SearchQuerySeries> {\n\t\treturn {\n\t\t\tquery: query.query,\n\t\t\tid: query.id,\n\t\t\tids: query.ids,\n\t\t\tname: query.name,\n\t\t\trootID: query.rootID,\n\t\t\trootIDs: query.rootIDs,\n\t\t\talbumID: query.albumID,\n\t\t\talbumType: query.albumType,\n\t\t\talbumTypes: query.albumTypes,\n\t\t\tnewerThan: query.newerThan,\n\t\t\toffset: query.offset,\n\t\t\tamount: query.amount,\n\t\t\tsorts: query.sortField ? [{field: query.sortField, descending: !!query.sortDescending}] : undefined\n\t\t};\n\t}\n\n\tasync index(req: JamRequest<JamParameters.SeriesSearchQuery>): Promise<Jam.SeriesIndex> {\n\t\treturn formatSeriesIndex(await this.indexService.getSeriesIndex(await this.translateQuery(req.query, req.user)));\n\t}\n\n\tasync albums(req: JamRequest<JamParameters.ArtistAlbums>): Promise<ListResult<Jam.Album>> {\n\t\tconst series = await this.byIDs(req.query.ids);\n\t\tlet albumIDs: Array<string> = [];\n\t\tseries.forEach(item => {\n\t\t\talbumIDs = albumIDs.concat(item.albumIDs);\n\t\t});\n\t\tconst list = paginate(albumIDs, req.query.amount, req.query.offset);\n\t\treturn {\n\t\t\ttotal: list.total,\n\t\t\tamount: list.amount,\n\t\t\toffset: list.offset,\n\t\t\titems: await this.albumController.prepareListByIDs(list.items, req.query, req.user, SeriesController.sortSeriesAlbums)\n\t\t};\n\t}\n\n\tasync tracks(req: JamRequest<JamParameters.SeriesTracks>): Promise<ListResult<Jam.Track>> {\n\t\tconst series = await this.byIDs(req.query.ids);\n\t\tlet trackIDs: Array<string> = [];\n\t\tseries.forEach(item => {\n\t\t\ttrackIDs = trackIDs.concat(item.trackIDs);\n\t\t});\n\t\tconst list = paginate(trackIDs, req.query.amount, req.query.offset);\n\t\treturn {\n\t\t\ttotal: list.total,\n\t\t\tamount: list.amount,\n\t\t\toffset: list.offset,\n\t\t\titems: await this.trackController.prepareListByIDs(list.items, req.query, req.user, SeriesController.sortSeriesTracks)\n\t\t};\n\t}\n\n\tasync info(req: JamRequest<JamParameters.ID>): Promise<Jam.Info> {\n\t\tconst series = await this.byID(req.query.id);\n\t\treturn {info: await this.metaDataService.extInfo.bySeries(series)};\n\t}\n\n}\n","import {Jam} from '../../model/jam-rest-data';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {Series} from './series.model';\n\nexport function formatSeries(series: Series, includes: JamParameters.IncludesSeries): Jam.Series {\n\treturn {\n\t\tid: series.id,\n\t\tname: series.name,\n\t\tartist: series.artist,\n\t\tartistID: series.artistID,\n\t\talbumCount: series.albumIDs.length,\n\t\ttrackCount: series.trackIDs.length,\n\t\talbumTypes: series.albumTypes,\n\t\talbumIDs: includes.seriesAlbumIDs ? series.albumIDs : undefined,\n\t\ttrackIDs: includes.seriesTrackIDs ? series.trackIDs : undefined,\n\t\tcreated: series.created\n\t};\n}\n","import {JamRequest} from '../../api/jam/api';\nimport {NotFoundError} from '../../api/jam/error';\nimport {JAMAPI_VERSION} from '../../api/jam/version';\nimport {Config} from '../../config/config';\nimport {Jam} from '../../model/jam-rest-data';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {formatSessionUser} from '../user/user.format';\nimport {formatSession} from './session.format';\nimport {SessionService} from './session.service';\n\nexport class SessionController {\n\n\tconstructor(public sessionService: SessionService, private config: Config) {\n\t}\n\n\tasync ping(req: JamRequest<{}>): Promise<Jam.Ping> {\n\t\treturn {version: JAMAPI_VERSION};\n\t}\n\n\tasync session(req: JamRequest<{}>): Promise<Jam.Session> {\n\t\treturn {version: JAMAPI_VERSION, allowedCookieDomains: this.config.server.session.allowedCookieDomains, user: req.user ? formatSessionUser(req.user) : undefined};\n\t}\n\n\tasync sessions(req: JamRequest<{}>): Promise<Array<Jam.UserSession>> {\n\t\tconst sessions = await this.sessionService.byUserID(req.user.id);\n\t\treturn sessions.map(formatSession);\n\t}\n\n\tasync delete(req: JamRequest<JamParameters.ID>): Promise<void> {\n\t\tconst session = await this.sessionService.byID(req.query.id);\n\t\tif (session && session.userID !== req.user.id) {\n\t\t\tif (!req.user.roles.admin) {\n\t\t\t\treturn Promise.reject(NotFoundError());\n\t\t\t}\n\t\t}\n\t\tif (!session) {\n\t\t\treturn Promise.reject(NotFoundError());\n\t\t}\n\t\tawait this.sessionService.remove(session.sessionID);\n\t\tawait this.sessionService.clearCache();\n\t}\n}\n","import useragent from 'express-useragent';\nimport {Jam} from '../../model/jam-rest-data';\nimport {Session} from './session.model';\n\nexport function parseAgent(session: Session): useragent.Details | undefined {\n\ttry {\n\t\treturn useragent.parse(session.agent);\n\t} catch (e) {\n\t\t//\n\t}\n}\n\nexport function formatSession(session: Session): Jam.UserSession {\n\tconst ua = parseAgent(session);\n\treturn {\n\t\tid: session.id,\n\t\tclient: session.client,\n\t\texpires: session.expires,\n\t\tmode: session.mode,\n\t\tagent: ua ? ua.browser : undefined,\n\t\tos: ua ? ua.os : undefined,\n\t\tplatform: ua ? ua.platform : undefined\n\t};\n}\n","module.exports = require(\"express-useragent\");","import {JamRequest} from '../../api/jam/api';\nimport {Jam} from '../../model/jam-rest-data';\nimport {SettingsService} from './settings.service';\n\nexport class SettingsController {\n\n\tconstructor(public settingsService: SettingsService) {\n\t}\n\n\tasync admin(req: JamRequest<{}>): Promise<Jam.AdminSettings> {\n\t\treturn this.settingsService.get();\n\t}\n\n\tasync adminUpdate(req: JamRequest<Jam.AdminSettings>): Promise<void> {\n\t\tawait this.settingsService.updateSettings(req.query);\n\t}\n}\n","import {JamRequest} from '../../api/jam/api';\nimport {Jam} from '../../model/jam-rest-data';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {formatStats} from './stats.format';\nimport {StatsService} from './stats.service';\n\nexport class StatsController {\n\n\tconstructor(private statsService: StatsService) {\n\t}\n\n\tasync get(req: JamRequest<JamParameters.Stats>): Promise<Jam.Stats> {\n\t\tconst stats = await this.statsService.getStats(req.query.rootID);\n\t\treturn formatStats(stats);\n\t}\n\n}\n","import {Jam} from '../../model/jam-rest-data';\nimport {Stats} from './stats.model';\n\nexport function formatStats(stats: Stats): Jam.Stats {\n\treturn {\n\t\trootID: stats.rootID,\n\t\talbum: stats.album,\n\t\talbumTypes: stats.albumTypes,\n\t\tartistTypes: stats.artistTypes,\n\t\tartist: stats.artist,\n\t\tfolder: stats.folder,\n\t\tseries: stats.series,\n\t\ttrack: stats.track\n\t};\n}\n","import {JamRequest} from '../../api/jam/api';\nimport {validatePathParameterIDFormat} from '../../api/jam/check';\nimport {InvalidParamError, NotFoundError} from '../../api/jam/error';\nimport {DBObjectType} from '../../db/db.types';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {AudioFormats} from '../../model/jam-types';\nimport {ApiBinaryResult} from '../../typings';\nimport {logger} from '../../utils/logger';\nimport {DBObject} from '../base/base.model';\nimport {Episode} from '../episode/episode.model';\nimport {NowPlayingService} from '../nowplaying/nowplaying.service';\nimport {Store} from '../store/store';\nimport {Track} from '../track/track.model';\nimport {User} from '../user/user.model';\nimport {StreamService} from './stream.service';\n\nconst log = logger('StreamController');\n\nexport class StreamController {\n\n\tconstructor(private streamService: StreamService, private nowPlayingService: NowPlayingService, private store: Store) {\n\n\t}\n\n\tasync streamTrack(track: Track, format: string | undefined, maxBitRate: number | undefined, user: User): Promise<ApiBinaryResult> {\n\t\tconst result = await this.streamService.streamTrack(track, format, maxBitRate, user);\n\t\t// this.nowPlayingService.reportTrack(track, user).catch(e => log.error(e)); // do not wait\n\t\treturn result;\n\t}\n\n\tasync streamEpisode(episode: Episode, format: string | undefined, maxBitRate: number | undefined, user: User): Promise<ApiBinaryResult> {\n\t\tconst result = await this.streamService.streamEpisode(episode, format, maxBitRate, user);\n\t\t// this.nowPlayingService.reportEpisode(episode, user).catch(e => log.error(e)); // do not wait\n\t\treturn result;\n\t}\n\n\tprivate async streamDBObject(o: DBObject, format: string | undefined, maxBitRate: number | undefined, user: User): Promise<ApiBinaryResult> {\n\t\tswitch (o.type) {\n\t\t\tcase DBObjectType.track:\n\t\t\t\treturn this.streamTrack(o as Track, format, maxBitRate, user);\n\t\t\tcase DBObjectType.episode:\n\t\t\t\treturn this.streamEpisode(o as Episode, format, maxBitRate, user);\n\t\t\tdefault:\n\t\t}\n\t\treturn Promise.reject(Error('Invalid Object Type for Streaming'));\n\t}\n\n\tasync scrobble(req: JamRequest<JamParameters.ID>): Promise<void> {\n\t\tconst o = await this.byID(req.query.id);\n\t\tswitch (o.type) {\n\t\t\tcase DBObjectType.track:\n\t\t\t\tthis.nowPlayingService.reportTrack(o as Track, req.user).catch(e => log.error(e)); // do not wait\n\t\t\t\tbreak;\n\t\t\tcase DBObjectType.episode:\n\t\t\t\tthis.nowPlayingService.reportEpisode(o as Episode, req.user).catch(e => log.error(e)); // do not wait\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn Promise.reject(Error('Invalid Object Type for Scrobbling'));\n\t\t}\n\t}\n\n\tasync stream(req: JamRequest<JamParameters.PathStream>): Promise<ApiBinaryResult> {\n\t\tif (req.query.format !== undefined && !AudioFormats.includes(req.query.format)) {\n\t\t\treturn Promise.reject(InvalidParamError());\n\t\t}\n\t\tconst obj = await this.byID(req.query.id);\n\t\tconst result = await this.streamDBObject(obj, req.query.format, undefined, req.user);\n\t\tif (result) {\n\t\t\treturn result;\n\t\t}\n\t\treturn Promise.reject(NotFoundError());\n\t}\n\n\tprivate async byID(id: string): Promise<DBObject> {\n\t\tif (!id || id.length === 0) {\n\t\t\treturn Promise.reject(InvalidParamError());\n\t\t}\n\t\tconst obj = await this.store.findInStores(id, this.store.streamStores());\n\t\tif (!obj) {\n\t\t\treturn Promise.reject(NotFoundError());\n\t\t}\n\t\treturn obj;\n\t}\n\n\tasync streamByPathParameter(req: JamRequest<{ pathParameter: string }>): Promise<ApiBinaryResult> {\n\t\tconst {id, format} = await validatePathParameterIDFormat(req.query.pathParameter, AudioFormats, undefined);\n\t\treturn this.stream({query: {id, format: format as JamParameters.AudioFormatType}, user: req.user});\n\t}\n}\n","import path from 'path';\nimport {JamRequest} from '../../api/jam/api';\nimport {NotFoundError} from '../../api/jam/error';\nimport {DBObjectType} from '../../db/db.types';\nimport {Jam} from '../../model/jam-rest-data';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {TrackHealthID} from '../../model/jam-types';\nimport {AudioModule} from '../../modules/audio/audio.module';\nimport {trackTagToRawTag} from '../../modules/audio/metadata';\nimport {ApiBinaryResult} from '../../typings';\nimport {logger} from '../../utils/logger';\nimport {paginate} from '../../utils/paginate';\nimport {BaseListController} from '../base/dbobject-list.controller';\nimport {ListResult} from '../base/list-result';\nimport {BookmarkService} from '../bookmark/bookmark.service';\nimport {DownloadService} from '../download/download.service';\nimport {Folder} from '../folder/folder.model';\nimport {FolderService} from '../folder/folder.service';\nimport {TrackRulesChecker} from '../health/track.rule';\nimport {ImageService} from '../image/image.service';\nimport {IoService} from '../io/io.service';\nimport {MetaDataService} from '../metadata/metadata.service';\nimport {Root} from '../root/root.model';\nimport {RootService} from '../root/root.service';\nimport {formatState} from '../state/state.format';\nimport {StateService} from '../state/state.service';\nimport {StreamController} from '../stream/stream.controller';\nimport {User} from '../user/user.model';\nimport {formatTrack} from './track.format';\nimport {Track} from './track.model';\nimport {TrackService} from './track.service';\nimport {SearchQueryTrack} from './track.store';\nimport {processQueue} from '../../utils/queue';\n\nconst log = logger('TrackController');\n\nexport class TrackController extends BaseListController<JamParameters.Track,\n\tJamParameters.Tracks,\n\tJamParameters.IncludesTrack,\n\tSearchQueryTrack,\n\tJamParameters.TrackSearch,\n\tTrack,\n\tJam.Track,\n\tJamParameters.TrackList> {\n\tchecker: TrackRulesChecker;\n\n\tconstructor(\n\t\tpublic trackService: TrackService,\n\t\tprivate folderService: FolderService,\n\t\tprivate audioModule: AudioModule,\n\t\tprivate bookmarkService: BookmarkService,\n\t\tprivate metaService: MetaDataService,\n\t\tprivate streamController: StreamController,\n\t\tprivate ioService: IoService,\n\t\tprivate rootService: RootService,\n\t\tprotected stateService: StateService,\n\t\tprotected imageService: ImageService,\n\t\tprotected downloadService: DownloadService\n\t) {\n\t\tsuper(trackService, stateService, imageService, downloadService);\n\t\tthis.checker = new TrackRulesChecker(audioModule);\n\t}\n\n\tasync prepare(track: Track, includes: JamParameters.IncludesTrack, user: User): Promise<Jam.Track> {\n\t\tconst result = formatTrack(track, includes);\n\t\tif (includes.trackRawTag) {\n\t\t\tresult.tagRaw = await this.getRawTag(track);\n\t\t}\n\t\tif (includes.trackState) {\n\t\t\tconst state = await this.stateService.findOrCreate(track.id, user.id, DBObjectType.track);\n\t\t\tresult.state = formatState(state);\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync translateQuery(query: JamParameters.TrackSearch, user: User): Promise<SearchQueryTrack> {\n\t\tlet inPath: string | undefined;\n\t\tif (query.childOfID) {\n\t\t\tconst folder = await this.folderService.folderStore.byId(query.childOfID);\n\t\t\tif (folder) {\n\t\t\t\tinPath = folder.path;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tquery: query.query,\n\t\t\tid: query.id,\n\t\t\tids: query.ids,\n\t\t\trootID: query.rootID,\n\t\t\trootIDs: query.rootIDs,\n\t\t\tparentID: query.parentID,\n\t\t\tparentIDs: query.parentIDs,\n\t\t\tinPath,\n\t\t\tartist: query.artist,\n\t\t\ttitle: query.title,\n\t\t\talbum: query.album,\n\t\t\tartistID: query.artistID,\n\t\t\talbumArtistID: query.albumArtistID,\n\t\t\tgenre: query.genre,\n\t\t\tnewerThan: query.newerThan,\n\t\t\tfromYear: query.fromYear,\n\t\t\ttoYear: query.toYear,\n\t\t\toffset: query.offset,\n\t\t\tamount: query.amount,\n\t\t\tsorts: query.sortField ? [{field: query.sortField, descending: !!query.sortDescending}] : undefined\n\t\t};\n\t}\n\n\t// more track api\n\n\tprivate async getRawTag(track: Track): Promise<Jam.RawTag | undefined> {\n\t\ttry {\n\t\t\tconst result = await this.audioModule.readRawTag(path.join(track.path, track.name));\n\t\t\tif (!result) {\n\t\t\t\treturn trackTagToRawTag(track.tag);\n\t\t\t}\n\t\t\treturn result;\n\t\t} catch (e) {\n\t\t\treturn trackTagToRawTag(track.tag);\n\t\t}\n\t}\n\n\tasync rawTag(req: JamRequest<JamParameters.ID>): Promise<Jam.RawTag> {\n\t\tconst track = await this.byID(req.query.id);\n\t\tconst result = await this.getRawTag(track);\n\t\tif (!result) {\n\t\t\treturn Promise.reject(Error('Unsupported audio file'));\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync rawTags(req: JamRequest<JamParameters.IDs>): Promise<Jam.RawTags> {\n\t\tlet tracks = await this.byIDs(req.query.ids);\n\t\ttracks = this.service.defaultSort(tracks);\n\t\tconst result: Jam.RawTags = {};\n\t\tfor (const track of tracks) {\n\t\t\tconst tag = await this.getRawTag(track);\n\t\t\tif (tag) {\n\t\t\t\tresult[track.id] = tag;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync rawTagUpdate(req: JamRequest<JamParameters.RawTagUpdate>): Promise<Jam.AdminChangeQueueInfo> {\n\t\tconst track = await this.byID(req.query.id);\n\t\treturn this.ioService.writeRawTag(track.id, req.query.tag, track.rootID);\n\t}\n\n\tasync stream(req: JamRequest<JamParameters.Stream>): Promise<ApiBinaryResult> {\n\t\tconst track = await this.byID(req.query.id);\n\t\treturn this.streamController.streamTrack(track, req.query.format, req.query.maxBitRate, req.user);\n\t}\n\n\tasync similar(req: JamRequest<JamParameters.SimilarTracks>): Promise<ListResult<Jam.Track>> {\n\t\tconst track = await this.byID(req.query.id);\n\t\tconst tracks = await this.metaService.similarTracks.byTrack(track);\n\t\tconst list = paginate(tracks, req.query.amount, req.query.offset);\n\t\treturn {\n\t\t\ttotal: list.total,\n\t\t\tamount: list.amount,\n\t\t\toffset: list.offset,\n\t\t\titems: await this.prepareList(list.items, req.query, req.user)\n\t\t};\n\t}\n\n\tasync nameUpdate(req: JamRequest<JamParameters.TrackEditName>): Promise<Jam.AdminChangeQueueInfo> {\n\t\tconst track = await this.byID(req.query.id);\n\t\treturn this.ioService.renameTrack(track.id, req.query.name, track.rootID);\n\t}\n\n\tasync parentUpdate(req: JamRequest<JamParameters.TrackMoveParent>): Promise<Jam.AdminChangeQueueInfo> {\n\t\tconst folder = await this.folderService.store.byId(req.query.folderID);\n\t\tif (!folder) {\n\t\t\treturn Promise.reject(NotFoundError());\n\t\t}\n\t\treturn this.ioService.moveTracks(req.query.ids, folder.id, folder.rootID);\n\t}\n\n\tasync delete(req: JamRequest<JamParameters.ID>): Promise<Jam.AdminChangeQueueInfo> {\n\t\tconst track = await this.byID(req.query.id);\n\t\treturn this.ioService.removeTrack(track.id, track.rootID);\n\t}\n\n\tasync fix(req: JamRequest<JamParameters.TrackFix>): Promise<Jam.AdminChangeQueueInfo> {\n\t\tconst track = await this.byID(req.query.id);\n\t\treturn this.ioService.fixTrack(track.id, req.query.fixID as TrackHealthID, track.rootID);\n\t}\n\n\tasync health(req: JamRequest<JamParameters.TrackHealth>): Promise<Array<Jam.TrackHealth>> {\n\t\tconst list = await this.service.store.search(await this.translateQuery(req.query, req.user));\n\t\tlist.items = this.service.defaultSort(list.items);\n\t\tconst result: Array<Jam.TrackHealth> = [];\n\t\tconst roots: Array<Root> = [];\n\t\tconst folders: Array<Folder> = [];\n\t\tconst checks: Array<{ track: Track; folder: Folder; root: Root }> = [];\n\t\tfor (const track of list.items) {\n\t\t\tlet root = roots.find(r => r.id === track.rootID);\n\t\t\tif (!root) {\n\t\t\t\troot = await this.rootService.rootStore.byId(track.rootID);\n\t\t\t\tif (root) {\n\t\t\t\t\troots.push(root);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (root) {\n\t\t\t\tlet folder = folders.find(f => f.id === track.parentID);\n\t\t\t\tif (!folder) {\n\t\t\t\t\tfolder = await this.folderService.folderStore.byId(track.parentID);\n\t\t\t\t\tif (folder) {\n\t\t\t\t\t\tfolders.push(folder);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\tif (folder) {\n\t\t\t\t\tchecks.push({track, folder, root});\n\t\t\t\t\t// const health = await this.checker.run(track, folder, root, !!req.query.media);\n\t\t\t\t\t// if (health && health.length > 0) {\n\t\t\t\t\t// result.push({\n\t\t\t\t\t// \ttrack: await this.prepare(track, req.query, req.user),\n\t\t\t\t\t// \thealth\n\t\t\t\t\t// });\n\t\t\t\t\t// }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tawait processQueue<{ track: Track; folder: Folder; root: Root }>(3, checks, async item => {\n\t\t\tconst health = await this.checker.run(item.track, item.folder, item.root, !!req.query.media);\n\t\t\tif (health && health.length > 0) {\n\t\t\t\tresult.push({\n\t\t\t\t\ttrack: await this.prepare(item.track, req.query, req.user),\n\t\t\t\t\thealth\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\n\tasync lyrics(req: JamRequest<JamParameters.ID>): Promise<Jam.TrackLyrics> {\n\t\tconst track = await this.byID(req.query.id);\n\t\tif (track.tag.lyrics) {\n\t\t\treturn {lyrics: track.tag.lyrics};\n\t\t}\n\t\tconst song = track.tag.title;\n\t\tif (!song) {\n\t\t\treturn {};\n\t\t}\n\t\ttry {\n\t\t\tlet result: Jam.TrackLyrics | undefined;\n\t\t\tif (track.tag.artist) {\n\t\t\t\tresult = await this.metaService.lyrics(track.tag.artist, song);\n\t\t\t}\n\t\t\tif ((!result || !result.lyrics) && track.tag.albumArtist && (track.tag.artist !== track.tag.albumArtist)) {\n\t\t\t\tresult = await this.metaService.lyrics(track.tag.albumArtist, song);\n\t\t\t}\n\t\t\treturn result || {};\n\t\t} catch (e) {\n\t\t\tlog.error(e);\n\t\t\treturn {};\n\t\t}\n\t}\n}\n","import {ID3v2, IID3V1, IID3V2, IMP3Analyzer} from 'jamp3';\nimport path from 'path';\nimport {Jam} from '../../model/jam-rest-data';\nimport {AlbumTypesArtistMusic, AudioFormatType, TrackHealthID} from '../../model/jam-types';\nimport {AudioModule, ID3TrackTagRawFormatTypes} from '../../modules/audio/audio.module';\nimport {flac_test} from '../../modules/audio/tools/flac';\nimport {logger} from '../../utils/logger';\nimport {Folder} from '../folder/folder.model';\nimport {Root} from '../root/root.model';\nimport {Track} from '../track/track.model';\nimport {RuleResult} from './rule.model';\n\nconst log = logger('TrackHealth');\n\ninterface MediaCache {\n\tid3v2?: IID3V2.Tag;\n\tid3v1?: IID3V1.Tag;\n\tmp3Warnings?: {\n\t\tid3v2: Array<IMP3Analyzer.Warning>;\n\t\tid3v1: Array<IMP3Analyzer.Warning>;\n\t\txing: Array<IMP3Analyzer.Warning>;\n\t\tmpeg: Array<IMP3Analyzer.Warning>;\n\t};\n\tflacWarnings?: string;\n}\n\nconst analyzeErrors = {\n\txing: [\n\t\t'XING: Wrong number of data bytes declared in VBRI Header',\n\t\t'XING: Wrong number of frames declared in VBRI Header',\n\t\t'XING: Wrong number of data bytes declared in Info Header',\n\t\t'XING: Wrong number of frames declared in Info Header',\n\t\t'XING: Wrong number of data bytes declared in Xing Header',\n\t\t'XING: Wrong number of frames declared in Xing Header'\n\t],\n\txingMissing: [\n\t\t'XING: VBR detected, but no VBR head frame found'\n\t],\n\tmpeg: [\n\t\t'MPEG: Unknown data found between ID3v2 and audio',\n\t\t'MPEG: Unknown data found before audio'\n\t]\n};\n\nconst fixable = analyzeErrors.xingMissing.concat(analyzeErrors.xing).concat(analyzeErrors.mpeg);\n\nconst GARBAGE_FRAMES_IDS: Array<string> = [\n\t'PRIV', // application specific binary, mostly windows media player\n\t'COMM',\n\t'POPM'\n];\n\ninterface TrackRuleInfo {\n\tid: string;\n\tname: string;\n\tall?: boolean;\n\tmp3?: boolean;\n\tflac?: boolean;\n\n\trun(track: Track, parent: Folder, root: Root, tagCache: MediaCache): Promise<RuleResult | undefined>;\n}\n\nfunction hasID3v2Tag(track: Track): boolean {\n\treturn ID3TrackTagRawFormatTypes.includes(track.tag.format);\n}\n\nfunction isMP3(track: Track): boolean {\n\treturn track.media && track.media.format === AudioFormatType.mp3;\n}\n\nfunction isFlac(track: Track): boolean {\n\treturn track.media && track.media.format === AudioFormatType.flac;\n}\n\nconst trackRules: Array<TrackRuleInfo> = [\n\t{\n\t\tid: TrackHealthID.tagValuesExists,\n\t\tname: 'Tag Values missing',\n\t\tall: true,\n\t\trun: async (track: Track, parent: Folder, root: Root, tagCache: MediaCache): Promise<RuleResult | undefined> => {\n\t\t\tconst missing = [];\n\t\t\tif (!track.tag.album) {\n\t\t\t\tmissing.push('album');\n\t\t\t}\n\t\t\tif (!track.tag.artist) {\n\t\t\t\tmissing.push('artist');\n\t\t\t}\n\t\t\tif (!track.tag.albumArtist) {\n\t\t\t\tmissing.push('album artist');\n\t\t\t}\n\t\t\tif (!track.tag.genre) {\n\t\t\t\tmissing.push('genre');\n\t\t\t}\n\t\t\tif (!track.tag.track) {\n\t\t\t\tmissing.push('track nr');\n\t\t\t}\n\t\t\tif (parent.tag.albumType !== undefined && !track.seriesID) {\n\t\t\t\tif (!track.tag.trackTotal) {\n\t\t\t\t\tmissing.push('total track count');\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (parent.tag.albumType !== undefined && AlbumTypesArtistMusic.includes(parent.tag.albumType)) {\n\t\t\t\tif (!track.tag.year) {\n\t\t\t\t\tmissing.push('year');\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (missing.length > 0) {\n\t\t\t\treturn {\n\t\t\t\t\tdetails: missing.map(m => {\n\t\t\t\t\t\treturn {reason: m};\n\t\t\t\t\t})\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t},\n\t{\n\t\tid: TrackHealthID.id3v2NoId3v1,\n\t\tname: 'ID3v2 is available, ID3v1 is redundant',\n\t\tmp3: true,\n\t\trun: async (track: Track, parent: Folder, root: Root, tagCache: MediaCache): Promise<RuleResult | undefined> => {\n\t\t\tif (hasID3v2Tag(track) && tagCache.id3v1) {\n\t\t\t\treturn {};\n\t\t\t}\n\t\t}\n\t},\n\t{\n\t\tid: TrackHealthID.id3v2Exists,\n\t\tname: 'ID3v2 Tag is missing',\n\t\tmp3: true,\n\t\trun: async (track: Track, parent: Folder, root: Root, tagCache: MediaCache): Promise<RuleResult | undefined> => {\n\t\t\tif (!hasID3v2Tag(track)) {\n\t\t\t\treturn {};\n\t\t\t}\n\t\t}\n\t},\n\t{\n\t\tid: TrackHealthID.id3v2Valid,\n\t\tname: 'ID3v2 is invalid',\n\t\tmp3: true,\n\t\trun: async (track: Track, parent: Folder, root: Root, tagCache: MediaCache): Promise<RuleResult | undefined> => {\n\t\t\tif (tagCache.mp3Warnings && tagCache.mp3Warnings.id3v2 && tagCache.mp3Warnings.id3v2.length > 0) {\n\t\t\t\treturn {\n\t\t\t\t\tdetails: tagCache.mp3Warnings.id3v2.map(m => {\n\t\t\t\t\t\treturn {reason: m.msg, expected: m.expected.toString(), actual: m.actual.toString()};\n\t\t\t\t\t})\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t},\n\t{\n\t\tid: TrackHealthID.id3v2Garbage,\n\t\tname: 'ID3v2 has garbage frames',\n\t\tmp3: true,\n\t\trun: async (track: Track, parent: Folder, root: Root, tagCache: MediaCache): Promise<RuleResult | undefined> => {\n\t\t\tif (tagCache.id3v2) {\n\t\t\t\tconst frames = tagCache.id3v2.frames.filter(frame => GARBAGE_FRAMES_IDS.includes(frame.id));\n\t\t\t\tif (frames.length > 0) {\n\t\t\t\t\tconst ids: Array<string> = [];\n\t\t\t\t\tframes.forEach(frame => {\n\t\t\t\t\t\tif (!ids.includes(frame.id)) {\n\t\t\t\t\t\t\tids.push(frame.id);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdetails: ids.map(m => {\n\t\t\t\t\t\t\treturn {reason: m};\n\t\t\t\t\t\t})\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t{\n\t\tid: TrackHealthID.mp3Garbage,\n\t\tname: 'MP3 has unaccounted data',\n\t\tmp3: true,\n\t\trun: async (track: Track, parent: Folder, root: Root, tagCache: MediaCache): Promise<RuleResult | undefined> => {\n\t\t\tif (tagCache.mp3Warnings && tagCache.mp3Warnings.mpeg) {\n\t\t\t\tconst warnings = tagCache.mp3Warnings.mpeg.filter(m => analyzeErrors.mpeg.includes(m.msg));\n\t\t\t\tif (warnings.length > 0) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdetails: warnings.map(m => {\n\t\t\t\t\t\t\treturn {reason: m.msg, expected: m.expected.toString(), actual: m.actual.toString()};\n\t\t\t\t\t\t})\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t{\n\t\tid: TrackHealthID.mp3HeaderExists,\n\t\tname: 'VBR Header is missing',\n\t\tmp3: true,\n\t\trun: async (track: Track, parent: Folder, root: Root, tagCache: MediaCache): Promise<RuleResult | undefined> => {\n\t\t\tif (tagCache.mp3Warnings && tagCache.mp3Warnings.xing) {\n\t\t\t\tconst warning = tagCache.mp3Warnings.xing.find(m => {\n\t\t\t\t\treturn analyzeErrors.xingMissing.includes(m.msg);\n\t\t\t\t});\n\t\t\t\tif (warning) {\n\t\t\t\t\treturn {};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t{\n\t\tid: TrackHealthID.mp3HeaderValid,\n\t\tname: 'VBR Header is invalid',\n\t\tmp3: true,\n\t\trun: async (track: Track, parent: Folder, root: Root, tagCache: MediaCache): Promise<RuleResult | undefined> => {\n\t\t\tif (tagCache.mp3Warnings && tagCache.mp3Warnings.xing) {\n\t\t\t\tconst warnings = tagCache.mp3Warnings.xing.filter(m => analyzeErrors.xing.includes(m.msg));\n\t\t\t\tif (warnings.length > 0) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdetails: warnings.map(m => {\n\t\t\t\t\t\t\treturn {reason: m.msg, expected: m.expected.toString(), actual: m.actual.toString()};\n\t\t\t\t\t\t})\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t{\n\t\tid: TrackHealthID.mp3MediaValid,\n\t\tname: 'MP3 Media is invalid',\n\t\tmp3: true,\n\t\trun: async (track: Track, parent: Folder, root: Root, tagCache: MediaCache): Promise<RuleResult | undefined> => {\n\t\t\tif (tagCache.mp3Warnings && tagCache.mp3Warnings.mpeg) {\n\t\t\t\tconst mp3Warnings = tagCache.mp3Warnings.mpeg.filter(m => !fixable.includes(m.msg));\n\t\t\t\tif (mp3Warnings.length > 0) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdetails: mp3Warnings.map(m => {\n\t\t\t\t\t\t\treturn {reason: m.msg, expected: m.expected.toString(), actual: m.actual.toString()};\n\t\t\t\t\t\t})\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t{\n\t\tid: TrackHealthID.flacMediaValid,\n\t\tname: 'Flac Media is invalid',\n\t\tmp3: true,\n\t\trun: async (track: Track, parent: Folder, root: Root, tagCache: MediaCache): Promise<RuleResult | undefined> => {\n\t\t\tif (tagCache.flacWarnings) {\n\t\t\t\treturn {details: [{reason: tagCache.flacWarnings}]};\n\t\t\t}\n\t\t}\n\t}\n];\n\nexport class TrackRulesChecker {\n\n\tconstructor(private audiomodule: AudioModule) {\n\t}\n\n\tasync run(track: Track, parent: Folder, root: Root, checkMedia: boolean): Promise<Array<Jam.HealthHint>> {\n\t\tconst result: Array<Jam.HealthHint> = [];\n\t\tconst mediaCache: MediaCache = {};\n\t\tconst filename = path.join(track.path, track.name);\n\t\tlog.debug('Analyzing track', filename);\n\t\tif (checkMedia) {\n\t\t\tif (isMP3(track)) {\n\t\t\t\tlog.debug('Check MPEG', filename);\n\t\t\t\tconst ana = await this.audiomodule.mp3.analyze(filename);\n\t\t\t\tmediaCache.id3v1 = ana.tags.id3v1;\n\t\t\t\tmediaCache.id3v2 = ana.tags.id3v2;\n\t\t\t\tmediaCache.mp3Warnings = {\n\t\t\t\t\txing: ana.warnings.filter(w => w.msg.startsWith('XING:')),\n\t\t\t\t\tmpeg: ana.warnings.filter(w => w.msg.startsWith('MPEG:')),\n\t\t\t\t\tid3v1: ana.warnings.filter(w => w.msg.startsWith('ID3V1:')),\n\t\t\t\t\tid3v2: ana.warnings.filter(w => w.msg.startsWith('ID3V2:'))\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tlog.debug('Check Media with flac', filename);\n\t\t\t\tmediaCache.flacWarnings = await flac_test(filename);\n\t\t\t}\n\t\t} else {\n\t\t\tif (isMP3(track)) {\n\t\t\t\tconst id3v2 = new ID3v2();\n\t\t\t\tmediaCache.id3v2 = await id3v2.read(filename);\n\t\t\t\tif (mediaCache.id3v2) {\n\t\t\t\t\tmediaCache.mp3Warnings = {\n\t\t\t\t\t\txing: [],\n\t\t\t\t\t\tmpeg: [],\n\t\t\t\t\t\tid3v1: [],\n\t\t\t\t\t\tid3v2: ID3v2.check(mediaCache.id3v2)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst mp3 = isMP3(track);\n\t\tconst flac = isFlac(track);\n\t\tfor (const rule of trackRules) {\n\t\t\tif (rule.all || (rule.mp3 && mp3) || (rule.flac && flac)) {\n\t\t\t\tconst match = await rule.run(track, parent, root, mediaCache);\n\t\t\t\tif (match) {\n\t\t\t\t\tresult.push({\n\t\t\t\t\t\tid: rule.id,\n\t\t\t\t\t\tname: rule.name,\n\t\t\t\t\t\tdetails: match.details\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n}\n","import genreData from '../model/genres.json';\n\nlet GenresSlugs: { [slug: string]: string }; // will be build on first use\n\nexport const Genres: Array<string> = genreData.list;\n\nfunction slugify(genre: string): string {\n\treturn genre.replace(/[& \\-.]/g, '').toLowerCase();\n}\n\nfunction buildGenreSlugs(): void {\n\tif (!GenresSlugs) {\n\t\tGenresSlugs = {};\n\t\tGenres.forEach(g => {\n\t\t\tGenresSlugs[slugify(g)] = g;\n\t\t});\n\t}\n}\n\nexport function getKnownGenre(genre: string): string | undefined {\n\tconst slug = slugify(genre);\n\tbuildGenreSlugs();\n\treturn GenresSlugs[slug];\n}\n\nexport function cleanGenre(genre: string): string {\n\tconst results: Array<string> = [];\n\tconst parts = genre.split('/');\n\tparts.forEach(part => {\n\t\t// test for (number)\n\t\tpart = part.trim();\n\t\tconst numpart = /\\((\\d+)\\)/.exec(part);\n\t\tlet num: number | undefined;\n\t\tif (numpart) {\n\t\t\tnum = parseInt(numpart[1], 10);\n\t\t\tpart = part.slice(0, numpart.index) + part.slice(numpart.index + numpart[0].length);\n\t\t}\n\t\tif (part.length === 0 && (num !== undefined)) {\n\t\t\tconst s = genreData.id3v1[num];\n\t\t\tif (s) {\n\t\t\t\tpart = s;\n\t\t\t}\n\t\t}\n\t\tif (part.length > 0) {\n\t\t\tconst slug = slugify(part);\n\t\t\tlet result: string | undefined;\n\t\t\tbuildGenreSlugs();\n\t\t\tif (GenresSlugs && GenresSlugs[slug]) {\n\t\t\t\tresult = GenresSlugs[slug];\n\t\t\t}\n\t\t\tif (!result && part.includes(' & ')) {\n\t\t\t\tconst subParts = part.split('&');\n\t\t\t\tsubParts.forEach(sub => {\n\t\t\t\t\tsub = cleanGenre(sub);\n\t\t\t\t\tif (!results.includes(sub)) {\n\t\t\t\t\t\tresults.push(sub);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (result) {\n\t\t\t\tif (!results.includes(result)) {\n\t\t\t\t\tresults.push(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!results.includes(part)) {\n\t\t\t\t\tresults.push(part);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\treturn results.join(' / ');\n}\n","import {AcousticBrainz} from '../../../model/acousticbrainz-rest-data';\nimport {JSONOptions, JSONRequest, WebserviceJSONClient} from '../../../utils/webservice-json-client';\n\ndeclare namespace AcousticbrainzClientApi {\n\texport type Request = JSONRequest;\n\texport type Options = JSONOptions;\n}\n\nexport class AcousticbrainzClient extends WebserviceJSONClient<AcousticbrainzClientApi.Request, AcousticBrainz.Response> {\n\n\tconstructor(options: AcousticbrainzClientApi.Options) {\n\t\tconst defaultOptions = {\n\t\t\thost: 'https://acousticbrainz.org',\n\t\t\tbasePath: '/api/v1/'\n\t\t};\n\t\t// unknown rate limit, using same from musicbrainz https://musicbrainz.org/doc/XML_Web_Service/Rate_Limiting \"Currently that rate is (on average) 1 request per second. (per ip)\"\n\t\tsuper(1, 1000, options.userAgent, {...defaultOptions, ...options});\n\t}\n\n\tasync highLevel(mbid: string, nr?: number): Promise<AcousticBrainz.Response> {\n\t\treturn this.get({\n\t\t\tpath: `${this.options.basePath}${mbid}/high-level`,\n\t\t\tquery: {n: (nr !== undefined ? nr.toString() : undefined)},\n\t\t\tretry: 0\n\t\t});\n\t}\n\n}\n","module.exports = require(\"limiter\");","import {Acoustid} from '../../../model/acoustid-rest-data';\nimport {logger} from '../../../utils/logger';\nimport {WebserviceClient} from '../../../utils/webservice-client';\nimport {fpcalc, FPCalcOptions, FPCalcResult} from '../tools/fpcalc';\n\nconst log = logger('Acoustid');\n\n// const ALL_META_DEFAULT = 'recordings recordingids releases releaseids releasegroups releasegroupids tracks compress usermeta sources';\n\nconst META_DEFAULT = 'recordings releases releasegroups tracks compress usermeta sources';\n\ndeclare namespace AcoustidClient {\n\n\texport interface AcoustidClientOptions {\n\t\tkey: string;\n\t\tuserAgent: string;\n\t\tmeta?: string;\n\t\tfpcalc?: FPCalcOptions;\n\t}\n\n}\n\nexport class AcoustidClient extends WebserviceClient {\n\toptions: AcoustidClient.AcoustidClientOptions;\n\n\tconstructor(options: AcoustidClient.AcoustidClientOptions) {\n\t\t// https://acoustid.org/webservice\n\t\tsuper(1, 3000, 'JamServe/0.1.0');\n\t\tthis.options = options;\n\t}\n\n\tprivate async get(fp: FPCalcResult, includes: string | undefined): Promise<Array<Acoustid.Result>> {\n\t\tincludes = includes || this.options.meta || META_DEFAULT;\n\t\tlog.info('requesting by fingerprint', includes);\n\t\tconst data = await this.getJson<Acoustid.Results>('https://api.acoustid.org/v2/lookup', {\n\t\t\tformat: 'json',\n\t\t\tmeta: includes,\n\t\t\tclient: this.options.key,\n\t\t\tduration: fp.duration.toFixed(0),\n\t\t\tfingerprint: fp.fingerprint\n\t\t});\n\t\tif (data.status !== 'ok') {\n\t\t\treturn Promise.reject(Error(data.status));\n\t\t}\n\t\treturn data.results;\n\t}\n\n\tasync acoustid(file: string, includes: string | undefined): Promise<Array<Acoustid.Result>> {\n\t\ttry {\n\t\t\tconst result = await fpcalc(file, this.options.fpcalc || {});\n\t\t\treturn this.get(result, includes);\n\t\t} catch (e) {\n\t\t\tlog.error(e);\n\t\t\treturn [];\n\t\t}\n\t}\n}\n","import {spawnToolJson} from '../../../utils/tool';\n\nexport interface FPCalcOptions {\n\tlength?: number;\n\traw?: boolean;\n}\n\nexport interface FPCalcResult {\n\tduration: number;\n\tfingerprint: string;\n\tfingerprintRaw?: Buffer;\n}\n\nexport async function fpcalc(filename: string, options: FPCalcOptions): Promise<FPCalcResult> {\n\tconst cmds: Array<string> = ['-json'];\n\tif (options.length) {\n\t\tcmds.push('-length', options.length.toFixed(0));\n\t}\n\tif (options.raw) {\n\t\tcmds.push('-raw');\n\t}\n\treturn spawnToolJson<FPCalcResult>('fpcalc', 'FPCALC_PATH', [...cmds, filename]);\n}\n","module.exports = require(\"child_process\");","import fse from 'fs-extra';\nimport path from 'path';\nimport which from 'which';\n\nexport const isWindows =  ['win32', 'cygwin', 'msys'].includes(process.platform);\n\nconst cache: { [name: string]: string } = {};\n\nasync function whichAsync(name: string): Promise<string> {\n\treturn new Promise<string>((resolve, reject) => {\n\t\twhich(name, (err, resolvedPath) => {\n\t\t\tif (err) {\n\t\t\t\treject(err);\n\t\t\t} else {\n\t\t\t\tresolve(resolvedPath);\n\t\t\t}\n\t\t});\n\t});\n}\n\nasync function localBin(name: string): Promise<string | undefined> {\n\tconst s = path.join('.', 'bin', 'tools', name, process.platform, process.arch, name) + (isWindows ? '.exe' : '');\n\tconst exists = await fse.pathExists(s);\n\tif (exists) {\n\t\treturn s;\n\t}\n}\n\nasync function environment(envName: string): Promise<string | undefined> {\n\tconst s = process.env[envName];\n\tif (s && s.length > 0) {\n\t\tconst exists = await fse.pathExists(s);\n\t\tif (exists) {\n\t\t\treturn s;\n\t\t}\n\t}\n}\n\nexport async function getBinPath(name: string, envName: string): Promise<string | undefined> {\n\tif (name in cache) {\n\t\treturn cache[name];\n\t}\n\ttry {\n\t\t// Try envName\n\t\tconst s = await environment(envName);\n\t\tif (s && s.length > 0) {\n\t\t\tcache[name] = s;\n\t\t\treturn s;\n\t\t}\n\t} catch (e) {\n\t\t// nop\n\t}\n\ttry {\n\t\t// Search in the PATH\n\t\tconst s = await whichAsync(name);\n\t\tif (s && s.length > 0) {\n\t\t\tcache[name] = s;\n\t\t\treturn s;\n\t\t}\n\t} catch (e) {\n\t\t// nop\n\t}\n\ttry {\n\t\t// Search in the PATH\n\t\tconst s = await localBin(name);\n\t\tif (s && s.length > 0) {\n\t\t\tcache[name] = s;\n\t\t\treturn s;\n\t\t}\n\t} catch (e) {\n\t\t// nop\n\t}\n}\n","module.exports = require(\"which\");","import request from 'request';\nimport {CoverArtArchive} from '../../../model/coverartarchive-rest-data';\nimport {JSONOptions, JSONRequest, WebserviceJSONClient} from '../../../utils/webservice-json-client';\n\ndeclare namespace CoverArtArchiveClientApi {\n\texport type Request = JSONRequest;\n\texport type Options = JSONOptions;\n}\n\nexport class CoverArtArchiveClient extends WebserviceJSONClient<CoverArtArchiveClientApi.Request, CoverArtArchive.Response> {\n\n\tconstructor(options: CoverArtArchiveClientApi.Options) {\n\t\tconst defaultOptions = {\n\t\t\thost: 'https://coverartarchive.org',\n\t\t\tbasePath: '/'\n\t\t};\n\t\t// https://musicbrainz.org/doc/Cover_Art_Archive/API#Rate_limiting_rules\n\t\t// there are currently no rate limiting rules in place at http://coverartarchive.org.\n\t\t// nevertheless, we limit this to 10 per second\n\t\tsuper(10, 1000, options.userAgent, {...defaultOptions, ...options});\n\t}\n\n\tprotected async parseResult<T>(response: request.Response, body: any): Promise<T> {\n\t\tif (response.statusCode === 404) {\n\t\t\treturn Promise.resolve({images: []} as any);\n\t\t}\n\t\treturn super.parseResult<T>(response, body);\n\t}\n\n\tprotected async processError(e: any, req: CoverArtArchiveClientApi.Request): Promise<CoverArtArchive.Response> {\n\t\tif (e instanceof SyntaxError) {\n\t\t\t// coverartarchive response may be code 200 with html on empty data\n\t\t\t// <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n\t\t\t// <title>404 Not Found</title>\n\t\t\t// <h1>Not Found</h1>\n\t\t\t// <p>No cover art found for release {{mbid}}</p>\n\t\t\t// */\n\t\t\treturn {images: []};\n\t\t}\n\t\treturn super.processError(e, req);\n\t}\n\n\tasync releaseImages(mbid: string): Promise<CoverArtArchive.Response> {\n\t\tconst data = await this.get({\n\t\t\tpath: `${this.options.basePath}release/${mbid}/`,\n\t\t\tquery: {},\n\t\t\tretry: 0\n\t\t});\n\t\treturn data;\n\t}\n\n\tasync releaseGroupImages(mbid: string): Promise<CoverArtArchive.Response> {\n\t\tconst data = await this.get({\n\t\t\tpath: `${this.options.basePath}release-group/${mbid}/`,\n\t\t\tquery: {},\n\t\t\tretry: 0\n\t\t});\n\t\treturn data;\n\t}\n\n}\n","import {LastFM} from '../../../model/lastfm-rest-data';\nimport {logger} from '../../../utils/logger';\nimport {WebserviceClient} from '../../../utils/webservice-client';\nimport {LastFMClientApi} from './lastfm-client.interface';\n\nconst log = logger('LastFM');\n\nclass LastFMClientBeautify {\n\n\tprivate static ensureList(name: string, sub: any): any {\n\t\tif (sub[name]) {\n\t\t\treturn Array.isArray(sub[name]) ? sub[name] : [sub[name]];\n\t\t}\n\t\treturn sub;\n\t}\n\n\tprivate static buildSubValue(key: string, sub: any, result: any): void {\n\t\tswitch (key) {\n\t\t\tcase '#text':\n\t\t\t\tresult.url = sub;\n\t\t\t\tbreak;\n\t\t\tcase '@attr':\n\t\t\t\tObject.keys(sub).forEach(subkey => {\n\t\t\t\t\tresult[subkey] = sub[subkey];\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'tags':\n\t\t\t\tresult[key] = LastFMClientBeautify.ensureList('tag', sub);\n\t\t\t\tbreak;\n\t\t\tcase 'streamable':\n\t\t\t\tresult[key] = {sample: sub['#text'], fulltrack: sub.fulltrack};\n\t\t\t\tbreak;\n\t\t\tcase 'image': {\n\t\t\t\tconst images = Array.isArray(sub) ? sub : [sub];\n\t\t\t\tresult[key] = images.filter(img => img.url && img.url.length > 0);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'tracks':\n\t\t\t\tresult[key] = LastFMClientBeautify.ensureList('track', sub);\n\t\t\t\tbreak;\n\t\t\tcase  'links':\n\t\t\t\tresult[key] = LastFMClientBeautify.ensureList('link', sub);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tresult[key] = sub;\n\t\t}\n\n\t}\n\n\tprivate static walkBeautifyObject(o: any): any {\n\t\tconst result: any = {};\n\t\tObject.keys(o).forEach(key => {\n\t\t\tconst sub = LastFMClientBeautify.walk(o[key], o);\n\t\t\tif (sub !== undefined) {\n\t\t\t\tLastFMClientBeautify.buildSubValue(key, sub, result);\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\n\tprivate static walk(o: any, parent: any): any {\n\t\tif (o === null || o === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (Array.isArray(o)) {\n\t\t\treturn o.map((sub: any) => LastFMClientBeautify.walk(sub, parent)).filter((sub: any) => sub !== undefined);\n\t\t}\n\t\tif (typeof o === 'object') {\n\t\t\treturn LastFMClientBeautify.walkBeautifyObject(o);\n\t\t}\n\t\treturn o;\n\t}\n\n\tstatic beautify(obj: any): any {\n\t\treturn LastFMClientBeautify.walk(obj, {});\n\t}\n\n}\n\nexport class LastFMClient extends WebserviceClient {\n\toptions: LastFMClientApi.LastFMClientApiOptions;\n\n\tconstructor(options: LastFMClientApi.LastFMClientApiOptions) {\n\t\t// \"not make more than 5 requests per originating IP address per second\" https://www.last.fm/api/tos\n\t\tsuper(5, 1000, options.userAgent);\n\t\tthis.options = options;\n\t}\n\n\tprivate async get(api: string, params: { [name: string]: string }): Promise<LastFM.Result> {\n\t\tlog.info('requesting', api, JSON.stringify(params));\n\t\tparams.method = api;\n\t\tconst sortedParams: { [name: string]: string } = {method: api};\n\t\tObject.keys(params).forEach(key => {\n\t\t\tsortedParams[key] = params[key];\n\t\t});\n\t\tsortedParams.api_key = this.options.key;\n\t\tsortedParams.format = 'json';\n\t\ttry {\n\t\t\tconst data = await this.getJson('https://ws.audioscrobbler.com/2.0/', sortedParams);\n\t\t\treturn LastFMClientBeautify.beautify(data) as LastFM.Result;\n\t\t} catch (e) {\n\t\t\tlog.error(e);\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n\n\tasync artist(artist: string): Promise<LastFM.Artist | undefined> {\n\t\t// https://www.last.fm/api/show/artist.getInfo\n\t\treturn (await this.get('artist.getInfo', {artist})).artist;\n\t}\n\n\tasync trackID(mbid: string): Promise<LastFM.Track | undefined> {\n\t\t// https://www.last.fm/api/show/artist.getInfo\n\t\treturn (await this.get('artist.getInfo', {mbid})).track;\n\t}\n\n\tasync artistID(mbid: string): Promise<LastFM.Artist | undefined> {\n\t\t// https://www.last.fm/api/show/artist.getInfo\n\t\treturn (await this.get('artist.getInfo', {mbid})).artist;\n\t}\n\n\tasync album(album: string, artist: string): Promise<LastFM.Album | undefined> {\n\t\t// https://www.last.fm/api/show/album.getInfo\n\t\treturn (await this.get('album.getInfo', {artist, album})).album;\n\t}\n\n\tasync albumID(mbid: string): Promise<LastFM.Album | undefined> {\n\t\t// https://www.last.fm/api/show/album.getInfo\n\t\treturn (await this.get('album.getInfo', {mbid})).album;\n\t}\n\n\tasync albumIDTopTags(mbid: string): Promise<LastFM.TopTracks | undefined> {\n\t\t// https://www.last.fm/api/show/album.getTopTags\n\t\treturn (await this.get('album.getTopTags', {mbid})).toptracks;\n\t}\n\n\tasync similarTrack(track: string, artist: string): Promise<LastFM.SimilarTracks | undefined> {\n\t\t// https://www.last.fm/api/show/track.getSimilar\n\t\treturn (await this.get('track.getSimilar', {track, artist})).similartracks;\n\t}\n\n\tasync similarTrackID(mbid: string): Promise<LastFM.SimilarTracks | undefined> {\n\t\t// https://www.last.fm/api/show/track.getSimilar\n\t\treturn (await this.get('track.getSimilar', {mbid})).similartracks;\n\t}\n\n\tasync topArtistSongs(artist: string): Promise<LastFM.TopTracks | undefined> {\n\t\t// https://www.last.fm/api/show/artist.getTopTracks\n\t\treturn (await this.get('artist.getTopTracks', {artist})).toptracks;\n\t}\n\n\tasync topArtistSongsID(mbid: string): Promise<LastFM.TopTracks | undefined> {\n\t\t// https://www.last.fm/api/show/artist.getTopTracks\n\t\treturn (await this.get('artist.getTopTracks', {mbid})).toptracks;\n\t}\n\n\tasync lookup(type: string, id: string): Promise<LastFM.Result> {\n\t\tswitch (type) {\n\t\t\tcase'album' :\n\t\t\t\treturn {album: await this.albumID(id)};\n\t\t\tcase'artist' :\n\t\t\t\treturn {artist: await this.artistID(id)};\n\t\t\tcase'track' :\n\t\t\t\treturn {track: await this.trackID(id)};\n\t\t\tcase'artist-toptracks' :\n\t\t\t\treturn {toptracks: await this.topArtistSongsID(id)};\n\t\t\tcase'track-similar' :\n\t\t\t\treturn {similartracks: await this.similarTrackID(id)};\n\t\t\tcase'album-toptracks' :\n\t\t\t\treturn {toptracks: await this.albumIDTopTags(id)};\n\t\t\tdefault:\n\t\t\t\treturn Promise.reject(Error('Invalid LastFM lookup type parameter'));\n\t\t}\n\t}\n\n}\n","import request from 'request';\nimport {logger} from '../../../utils/logger';\nimport {WebserviceClient} from '../../../utils/webservice-client';\n\nconst log = logger('LyricsOVHClient');\n\nexport interface LyricsResult {\n\tlyrics: string;\n\tsource: string;\n}\n\nexport interface LyricsOVHResult {\n\tlyrics: string;\n\terror?: string;\n}\n\nexport class LyricsOVHClient extends WebserviceClient {\n\n\tconstructor(userAgent: string) {\n\t\tsuper(1, 1000, userAgent);\n\t}\n\n\tprotected async parseResult<T>(response: request.Response, body: any): Promise<T> {\n\t\tif (response.statusCode === 404) {\n\t\t\treturn Promise.resolve(undefined as any);\n\t\t}\n\t\treturn super.parseResult<T>(response, body);\n\t}\n\n\tasync search(artistName: string, songName: string): Promise<LyricsResult | undefined> {\n\t\tconst url = `https://api.lyrics.ovh/v1/${this.cleanString(artistName)}/${this.cleanString(songName)}`;\n\t\tlog.info('requesting', url);\n\t\tconst data = await this.getJson<LyricsOVHResult | undefined>(url);\n\t\tif (!data || !data.lyrics) {\n\t\t\treturn;\n\t\t}\n\t\treturn {lyrics: data.lyrics, source: url};\n\t}\n\n\tprivate cleanString(s: string): string {\n\t\treturn encodeURIComponent(s\n\t\t\t.replace(/[’´`]/g, '\\'')\n\t\t\t.replace(/[():]/g, ' ')\n\t\t\t.replace(/[‐]/g, '-')\n\t\t\t.normalize()\n\t\t\t.trim()\n\t\t);\n\t}\n}\n","import {MusicBrainz} from '../../../model/musicbrainz-rest-data';\nimport {WebserviceJSONClient} from '../../../utils/webservice-json-client';\nimport {MusicbrainzClientApi} from './musicbrainz-client.interface';\nimport {LookupBrowseTypes, LookupIncludes} from './musicbrainz-client.types';\n\nexport class MusicbrainzClient extends WebserviceJSONClient<MusicbrainzClientApi.Request, MusicBrainz.Response> {\n\n\tconstructor(options: MusicbrainzClientApi.Options) {\n\t\tconst defaultOptions = {\n\t\t\thost: 'https://musicbrainz.org',\n\t\t\tbasePath: '/ws/2/'\n\t\t};\n\t\t// https://musicbrainz.org/doc/XML_Web_Service/Rate_Limiting \"Currently that rate is (on average) 1 request per second. (per ip)\"\n\t\tsuper(1, 1000, options.userAgent, {...defaultOptions, ...options});\n\t}\n\n\tprivate beautify(obj: any): any {\n\t\tconst formatKey = (key: string): string => {\n\t\t\treturn key.split('-').map((value, index) => {\n\t\t\t\tif (index === 0) {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t\treturn value[0].toUpperCase() + value.slice(1);\n\t\t\t}).join('');\n\t\t};\n\n\t\tconst walk = (o: any): any => {\n\t\t\tif (o === null) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tif (o === undefined) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tif (Array.isArray(o)) {\n\t\t\t\treturn o.map(walk).filter((sub: any) => sub !== undefined);\n\t\t\t}\n\t\t\tif (typeof o === 'object') {\n\t\t\t\tconst result: any = {};\n\t\t\t\tObject.keys(o).forEach(key => {\n\t\t\t\t\tconst sub = walk(o[key]);\n\t\t\t\t\tif (sub !== undefined) {\n\t\t\t\t\t\tresult[formatKey(key)] = sub;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\treturn o;\n\t\t};\n\t\treturn walk(obj);\n\t}\n\n\tprivate concatSearchQuery(query: MusicbrainzClientApi.SearchQuery): string {\n\t\treturn Object.keys(query)\n\t\t\t.filter(key => ((query as any)[key] !== undefined && (query as any)[key] !== null))\n\t\t\t.map(key => `${key}:\"${encodeURIComponent((query as any)[key])}\"`)\n\t\t\t.join('%20AND%20');\n\t}\n\n\tprotected reqToUrl(req: MusicbrainzClientApi.Request): string {\n\t\tconst q = Object.keys(req.query)\n\t\t\t.filter(key => (req.query[key] !== undefined && req.query[key] !== null))\n\t\t\t.map(key => `${key}=${req.query[key]}`);\n\t\tq.push(`limit=${req.limit || (this.options as MusicbrainzClientApi.Options).limit || 25}`);\n\t\tq.push(`offset=${req.offset || 0}`);\n\t\tq.push('fmt=json');\n\t\treturn `${this.reqToHost(req)}${req.path}?${q.join('&')}`;\n\t}\n\n\tprotected isRateLimitError(body: any): boolean {\n\t\t// \"error\":\"Your requests are exceeding the allowable rate limit. Please see http://wiki.musicbrainz.org/XMLWebService for more information.\"\n\t\treturn (body && body.error && body.error.includes('allowable rate limit'));\n\t}\n\n\tasync search(params: MusicbrainzClientApi.ParameterSearch): Promise<MusicBrainz.Response> {\n\t\tconst data = await this.get({\n\t\t\tpath: `${this.options.basePath}${params.type}/`,\n\t\t\tquery: {query: this.concatSearchQuery(params.query || {})},\n\t\t\tretry: 0,\n\t\t\tlimit: params.limit,\n\t\t\toffset: params.offset\n\t\t});\n\t\treturn this.beautify(data);\n\t}\n\n\tasync lookup(params: MusicbrainzClientApi.ParameterLookup): Promise<MusicBrainz.Response> {\n\t\tif (!params.id || params.id.length === 0) {\n\t\t\treturn Promise.reject(Error(`Invalid lookup id for type ${params.type}`));\n\t\t}\n\t\tconst lookup = LookupIncludes[params.type];\n\t\tconst inc = params.inc || LookupIncludes[params.type].join('+');\n\t\tif (!lookup) {\n\t\t\treturn Promise.reject(Error('Invalid Lookup'));\n\t\t}\n\t\tconst data = await this.get({\n\t\t\tpath: `${this.options.basePath}${params.type}/${params.id}`,\n\t\t\tquery: {\n\t\t\t\tmbid: params.id,\n\t\t\t\tinc\n\t\t\t},\n\t\t\tretry: 0,\n\t\t\tlimit: params.limit,\n\t\t\toffset: params.offset\n\t\t});\n\t\tconst result: any = {};\n\t\tresult[params.type] = data || {};\n\t\treturn this.beautify(result);\n\t}\n\n\tasync browse(params: MusicbrainzClientApi.ParameterBrowse): Promise<MusicBrainz.Response> {\n\t\tconst invalidKey = Object.keys(params.lookupIds).find(key => !LookupBrowseTypes[params.type] || !LookupBrowseTypes[params.type].includes(key));\n\t\tif (invalidKey) {\n\t\t\treturn Promise.reject(Error(`Invalid browse lookup key for type ${params.type}: ${invalidKey}`));\n\t\t}\n\t\tconst query = {inc: params.inc, ...params.lookupIds};\n\t\tconst data = await this.get({\n\t\t\tpath: `${this.options.basePath}${params.type}/`,\n\t\t\tquery,\n\t\t\tretry: 0,\n\t\t\tlimit: params.limit,\n\t\t\toffset: params.offset\n\t\t});\n\t\tconst result: any = {};\n\t\tresult[params.type] = data || {};\n\t\treturn this.beautify(result);\n\t}\n\n\tasync luceneSearch(params: MusicbrainzClientApi.ParameterLuceneSearch): Promise<MusicBrainz.Response> {\n\t\t// https://lucene.apache.org/core/4_3_0/queryparser/org/apache/lucene/queryparser/classic/package-summary.html#package_description\n\t\tif (!params.query || params.query.length === 0) {\n\t\t\treturn Promise.reject(Error(`Invalid query for type ${params.type}`));\n\t\t}\n\t\tconst data = await this.get({\n\t\t\tpath: `${this.options.basePath}${params.type}/`,\n\t\t\tquery: {\n\t\t\t\tquery: encodeURIComponent(params.query || '')\n\t\t\t},\n\t\t\tretry: 0,\n\t\t\tlimit: params.limit,\n\t\t\toffset: params.offset\n\t\t});\n\t\tconst result: any = {};\n\t\tresult[params.type] = data || {};\n\t\treturn this.beautify(result);\n\t}\n\n}\n","export const LookupBrowseTypes: { [type: string]: Array<string> } = {\n\tarea: ['collection'],\n\tartist: ['area', 'collection', 'recording', 'release', 'release-group', 'work'],\n\tcollection: ['area', 'artist', 'editor', 'event', 'label', 'place', 'recording', 'release', 'release-group', 'work'],\n\tevent: ['area', 'artist', 'collection', 'place'],\n\tinstrument: ['collection'],\n\tlabel: ['area', 'collection', 'release'],\n\tplace: ['area', 'collection'],\n\trecording: ['artist', 'collection', 'release'],\n\trelease: ['area', 'artist', 'collection', 'label', 'track', 'track_artist', 'recording', 'release-group'],\n\t'release-group': ['artist', 'collection', 'release'],\n\tseries: ['collection'],\n\twork: ['artist', 'collection'],\n\turl: ['resource']\n};\n\nexport const LookupIncludes: { [type: string]: Array<string> } = {\n\tarea: [],\n\tartist: ['recordings', 'releases', 'release-groups', 'works', 'aliases', 'artist-rels', 'url-rels', 'tags', 'ratings'],\n\tcollection: ['user-collections'],\n\tevent: [],\n\tinstrument: [],\n\tlabel: ['releases'],\n\tplace: [],\n\trecording: ['artists', 'releases', 'artist-credits', 'aliases', 'tags', 'ratings', 'annotation'],\n\trelease: ['artists', 'labels', 'recordings', 'release-groups', 'discids', 'media', 'isrcs', 'artist-credits', 'aliases', 'tags', 'url-rels', 'annotation'],\n\t'release-group': ['artists', 'releases', 'media', 'artist-credits', 'aliases', 'tags', 'ratings', 'url-rels', 'annotation'],\n\tseries: [],\n\twork: [],\n\turl: []\n};\n\nexport const enum LookupEntity {\n\tarea = 'area',\n\tartist = 'artist',\n\tcollection = 'collection',\n\tevent = 'event',\n\tinstrument = 'instrument',\n\tlabel = 'label',\n\tplace = 'place',\n\trecording = 'recording',\n\trelease = 'release',\n\treleaseGroup = 'release-group',\n\tseries = 'series',\n\twork = 'work',\n\turl = 'url'\n}\n","import {WikiData} from '../../../model/wikidata-rest-data';\nimport {logger} from '../../../utils/logger';\nimport {WebserviceClient} from '../../../utils/webservice-client';\n\nconst log = logger('Wikipedia');\n\nexport declare namespace Wikipedia {\n\n\texport interface Summary {\n\t\ttype: string;\n\t\ttitle: string;\n\t\tdisplaytitle: string;\n\t\tnamespace: {\n\t\t\tid: number;\n\t\t\ttext: string;\n\t\t};\n\t\twikibase_item: string;\n\t\ttitles: {\n\t\t\tcanonical: string;\n\t\t\tnormalized: string;\n\t\t\tdisplay: string;\n\t\t};\n\t\tpageid: number;\n\t\tthumbnail: {\n\t\t\tsource: string;\n\t\t\twidth: number;\n\t\t\theight: number;\n\t\t};\n\t\toriginalimage: {\n\t\t\tsource: string;\n\t\t\twidth: number;\n\t\t\theight: number;\n\t\t};\n\t\tlang: string;\n\t\tdir: string;\n\t\trevision: string;\n\t\ttid: string;\n\t\ttimestamp: string;\n\t\tdescription: string;\n\t\tcontent_urls: {\n\t\t\tdesktop: {\n\t\t\t\tpage: string;\n\t\t\t\trevisions: string;\n\t\t\t\tedit: string;\n\t\t\t\ttalk: string;\n\t\t\t};\n\t\t\tmobile: {\n\t\t\t\tpage: string;\n\t\t\t\trevisions: string;\n\t\t\t\tedit: string;\n\t\t\t\ttalk: string;\n\t\t\t};\n\t\t};\n\t\tapi_urls: {\n\t\t\tsummary: string;\n\t\t\tmetadata: string;\n\t\t\treferences: string;\n\t\t\tmedia: string;\n\t\t\tedit_html: string;\n\t\t\ttalk_page_html: string;\n\t\t};\n\t\textract: string;\n\t\textract_html: string;\n\t}\n\n\texport interface Response {\n\t\tsummary?: Summary;\n\t}\n\n}\n\nexport declare namespace WikiPHPApi {\n\n\texport interface Page {\n\t\tpageid: number;\n\t\tns: number;\n\t\ttitle: string;\n\t\textract: string;\n\t}\n\n\texport interface Summary {\n\t\tbatchcomplete: string;\n\t\twarnings?: {\n\t\t\textracts?: {\n\t\t\t\t[id: string]: string;\n\t\t\t};\n\t\t};\n\t\tquery: {\n\t\t\tpages: {\n\t\t\t\t[name: string]: Page;\n\t\t\t};\n\t\t};\n\t}\n\n}\n\nexport class WikipediaClient extends WebserviceClient {\n\n\tconstructor(userAgent: string) {\n\t\t// \"no more than 200 requests/s to this API\" https://en.wikipedia.org/api/rest_v1/#!/Page_content/get_page_summary_title\n\t\tsuper(200, 1000, userAgent);\n\t}\n\n\tasync summary(title: string, lang: string | undefined): Promise<{ title: string; url: string; summary: string } | undefined> {\n\t\tlog.info('requesting summary', title);\n\t\tconst url = `https://${(lang || 'en')}.wikipedia.org/w/api.php`;\n\t\tconst data: WikiPHPApi.Summary = await this.getJson<WikiPHPApi.Summary>(url, {\n\t\t\taction: 'query',\n\t\t\tprop: 'extracts',\n\t\t\tformat: 'json',\n\t\t\texintro: 1,\n\t\t\tredirects: 1,\n\t\t\ttitles: title\n\t\t});\n\t\tif (!data || !data.query || !data.query.pages) {\n\t\t\treturn;\n\t\t}\n\t\tconst pages = data.query.pages;\n\t\tconst page = pages[Object.keys(pages)[0]];\n\t\tif (!page) {\n\t\t\treturn;\n\t\t}\n\t\treturn {title: page.title, summary: page.extract, url: `https://${(lang || 'en')}.wikipedia.org/wiki/${encodeURIComponent(page.title)}`};\n\t}\n\n\tasync summary_rest(title: string, lang: string | undefined): Promise<string | undefined> {\n\t\tlog.info('requesting summary', title);\n\t\tconst url = `https://${(lang || 'en')}.wikipedia.org/api/rest_v1/page/summary/${encodeURIComponent(title)}`;\n\t\tconst data: Wikipedia.Summary = await this.getJson<Wikipedia.Summary>(url, {redirect: 'true'});\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\t\treturn data.extract_html;\n\t}\n\n\tasync wikidata(id: string): Promise<WikiData.Entity | undefined> {\n\t\tlog.info('requesting wikidata entity', id);\n\t\t// &props=sitelinks|info\n\t\tconst url = `https://www.wikidata.org/w/api.php?action=wbgetentities&format=json&ids=${(id)}`;\n\t\tconst data = await this.getJson<WikiData.Response>(url, {});\n\t\tif (!data || !data.entities) {\n\t\t\treturn;\n\t\t}\n\t\treturn data.entities[id];\n\t}\n}\n","import fse from 'fs-extra';\nimport {Jam} from '../../../model/jam-rest-data';\nimport {TrackTagFormatType} from '../../../model/jam-types';\nimport {ImageModule} from '../../image/image.module';\nimport {FORMAT} from '../audio.format';\nimport {AudioScanResult} from '../audio.module';\nimport {flacToRawTag, id3v2ToFlacMetaData, rawTagToID3v2} from '../metadata';\nimport {Flac} from './flac';\nimport {MetaWriteableDataBlock} from './flac/lib/block.writeable';\n\nexport class AudioModuleFLAC {\n\n\tconstructor(private imageModule: ImageModule) {\n\t}\n\n\tasync read(filename: string): Promise<AudioScanResult> {\n\t\tconst flac = new Flac();\n\t\ttry {\n\t\t\tconst result = await flac.read(filename);\n\t\t\treturn {tag: FORMAT.packFlacVorbisCommentJamServeTag(result.comment, result.pictures), media: FORMAT.packFlacMediaInfoJamServeMedia(result.media)};\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t\treturn {tag: {format: TrackTagFormatType.none}, media: {}};\n\t\t}\n\t}\n\n\tasync readRaw(filename: string): Promise<Jam.RawTag | undefined> {\n\t\tconst flac = new Flac();\n\t\tconst result = await flac.read(filename);\n\t\tif (!result || !result.comment) {\n\t\t\treturn Promise.reject(Error('No Flac Vorbis Comment found'));\n\t\t}\n\t\treturn flacToRawTag(result);\n\t}\n\n\tasync write(filename: string, tag: Jam.RawTag): Promise<void> {\n\t\tconst id3 = rawTagToID3v2(tag);\n\t\tconst flacBlocks: Array<MetaWriteableDataBlock> = await id3v2ToFlacMetaData(id3, this.imageModule);\n\t\tconst flac = new Flac();\n\t\t// TODO: add tests for flac writing, make backup copy as long it is not well tested\n\t\tconst exits = await fse.pathExists(`${filename}.bak`);\n\t\tif (!exits) {\n\t\t\tawait fse.copy(filename, `${filename}.bak`);\n\t\t}\n\t\tawait flac.write(filename, flacBlocks);\n\t}\n\n\tasync extractTagImage(filename: string): Promise<Buffer | undefined> {\n\t\tconst flac = new Flac();\n\t\tconst tag = await flac.read(filename);\n\t\tif (tag && tag.pictures) {\n\t\t\tlet pic = tag.pictures.find(p => p.pictureType === 3 /*ID3v2 picture type \"cover front\" used in FLAC */);\n\t\t\tif (!pic) {\n\t\t\t\tpic = tag.pictures[0];\n\t\t\t}\n\t\t\tif (pic) {\n\t\t\t\treturn pic.pictureData;\n\t\t\t}\n\t\t}\n\t}\n\n}\n","import fs from 'fs';\nimport fse from 'fs-extra';\nimport {MetaDataBlock} from './lib/block';\nimport {MetaDataBlockPicture} from './lib/block.picture';\nimport {MetaDataBlockStreamInfo} from './lib/block.streaminfo';\nimport {BlockVorbiscomment} from './lib/block.vorbiscomment';\nimport {MetaWriteableDataBlock} from './lib/block.writeable';\nimport {FlacProcessorStream, MDB_TYPE} from './lib/processor';\n\nexport interface FlacComment {\n\tvendor: string;\n\ttag: {\n\t\t[key: string]: string;\n\t};\n}\n\nexport interface FlacPicture {\n\tpictureType: number;\n\tmimeType: string;\n\tdescription: string;\n\twidth: number;\n\theight: number;\n\tbitsPerPixel: number;\n\tcolors: number;\n\tpictureData: Buffer;\n}\n\nexport interface FlacMedia {\n\tduration: number;\n\tchannels: number;\n\tbitsPerSample: number;\n\tsampleRate: number;\n\tsampleCount: number;\n\tminBlockSize: number;\n\tmaxBlockSize: number;\n\tminFrameSize: number;\n\tmaxFrameSize: number;\n}\n\nexport interface FlacInfo {\n\tmedia?: FlacMedia;\n\tcomment?: FlacComment;\n\tpictures?: Array<FlacPicture>;\n\tid3?: Buffer;\n}\n\nexport class Flac {\n\n\tasync read(filename: string): Promise<FlacInfo> {\n\t\tconst result: FlacInfo = {};\n\t\treturn new Promise<FlacInfo>((resolve, reject) => {\n\t\t\tconst reader = fs.createReadStream(filename);\n\t\t\tconst processor = new FlacProcessorStream(true, true);\n\t\t\tprocessor.on('postprocess', (mdb: MetaDataBlock) => {\n\t\t\t\tif (mdb.type === MDB_TYPE.STREAMINFO) {\n\t\t\t\t\tresult.media = this.formatMediaBlock(mdb as MetaDataBlockStreamInfo);\n\t\t\t\t} else if (mdb.type === MDB_TYPE.VORBIS_COMMENT) {\n\t\t\t\t\tresult.comment = this.formatMediaComment(mdb as BlockVorbiscomment);\n\t\t\t\t} else if (mdb.type === MDB_TYPE.PICTURE) {\n\t\t\t\t\tif ((mdb as MetaDataBlockPicture).pictureData) {\n\t\t\t\t\t\tresult.pictures = result.pictures || [];\n\t\t\t\t\t\tresult.pictures.push(this.formatMediaPicture(mdb as MetaDataBlockPicture));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tprocessor.on('id3', (buffer: Buffer) => {\n\t\t\t\tresult.id3 = buffer;\n\t\t\t});\n\t\t\tprocessor.on('done', () => {\n\t\t\t\tresolve(result);\n\t\t\t});\n\t\t\tprocessor.on('error', (e: Error) => {\n\t\t\t\treject(e);\n\t\t\t});\n\t\t\treader.on('error', (e: Error) => {\n\t\t\t\treject(e);\n\t\t\t});\n\t\t\ttry {\n\t\t\t\treader.pipe(processor);\n\t\t\t} catch (e) {\n\t\t\t\treject(e);\n\t\t\t}\n\t\t});\n\t}\n\n\tasync writeTo(filename: string, destination: string, flacBlocks: Array<MetaWriteableDataBlock>): Promise<void> {\n\t\tif (flacBlocks.length === 0) {\n\t\t\treturn Promise.reject(Error('Must write minimum 1 MetaDataBlock'));\n\t\t}\n\t\tflacBlocks.forEach(flacBlock => {\n\t\t\tflacBlock.isLast = false;\n\t\t});\n\t\tconst reader = fs.createReadStream(filename);\n\t\tconst writer = fs.createWriteStream(destination);\n\t\tconst processor = new FlacProcessorStream(false, false);\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tprocessor.on('preprocess', mdb => {\n\t\t\t\tif (mdb.type === MDB_TYPE.VORBIS_COMMENT || mdb.type === MDB_TYPE.PICTURE || mdb.type === MDB_TYPE.PADDING) {\n\t\t\t\t\tmdb.remove();\n\t\t\t\t}\n\t\t\t\tif (mdb.isLast) {\n\t\t\t\t\tif (mdb.remove) {\n\t\t\t\t\t\tflacBlocks[flacBlocks.length - 1].isLast = true;\n\t\t\t\t\t}\n\t\t\t\t\tfor (const block of flacBlocks) {\n\t\t\t\t\t\tprocessor.push(block.publish());\n\t\t\t\t\t}\n\t\t\t\t\tflacBlocks = [];\n\t\t\t\t}\n\t\t\t});\n\t\t\treader.on('error', (e: Error) => {\n\t\t\t\treject(e);\n\t\t\t});\n\t\t\tprocessor.on('error', (e: Error) => {\n\t\t\t\treject(e);\n\t\t\t});\n\t\t\twriter.on('error', (e: Error) => {\n\t\t\t\treject(e);\n\t\t\t});\n\t\t\twriter.on('finish', () => {\n\t\t\t\tresolve();\n\t\t\t});\n\t\t\treader.pipe(processor).pipe(writer);\n\t\t});\n\t}\n\n\tasync write(filename: string, flacBlocks: Array<MetaWriteableDataBlock>): Promise<void> {\n\t\tconst tmpFile = `${filename}.tmp`;\n\t\ttry {\n\t\t\tawait this.writeTo(filename, tmpFile, flacBlocks);\n\t\t\tconst exists = await fse.pathExists(filename);\n\t\t\tif (exists) {\n\t\t\t\tawait fse.remove(filename);\n\t\t\t}\n\t\t\tawait fse.move(tmpFile, filename);\n\t\t} catch (e) {\n\t\t\tconst exists = await fse.pathExists(tmpFile);\n\t\t\tif (exists) {\n\t\t\t\tawait fse.remove(tmpFile);\n\t\t\t}\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n\n\tprivate formatMediaComment(mdb: BlockVorbiscomment): FlacComment {\n\t\tconst tag: { [key: string]: string } = {};\n\t\tmdb.comments.forEach(line => {\n\t\t\tconst pos = line.indexOf('=');\n\t\t\tconst key = line.slice(0, pos).toUpperCase().replace(/ /g, '_');\n\t\t\tlet i = 1;\n\t\t\tlet suffix = '';\n\t\t\twhile (tag[key + suffix]) {\n\t\t\t\ti++;\n\t\t\t\tsuffix = `|${i}`;\n\t\t\t}\n\t\t\tconst val = line.slice(pos + 1);\n\t\t\ttag[key + suffix] = val;\n\t\t});\n\t\treturn {vendor: mdb.vendor, tag};\n\t}\n\n\tprivate formatMediaBlock(mdb: MetaDataBlockStreamInfo): FlacMedia {\n\t\treturn {\n\t\t\tduration: mdb.duration,\n\t\t\tchannels: mdb.channels + 1,\n\t\t\tbitsPerSample: mdb.bitsPerSample + 1,\n\t\t\tsampleRate: mdb.sampleRate,\n\t\t\tsampleCount: mdb.samples,\n\t\t\tminBlockSize: mdb.minBlockSize,\n\t\t\tmaxBlockSize: mdb.maxBlockSize,\n\t\t\tminFrameSize: mdb.minFrameSize,\n\t\t\tmaxFrameSize: mdb.maxFrameSize\n\t\t};\n\t}\n\n\tprivate formatMediaPicture(mdb: MetaDataBlockPicture): FlacPicture {\n\t\treturn {\n\t\t\tpictureType: mdb.pictureType,\n\t\t\tmimeType: mdb.mimeType,\n\t\t\tdescription: mdb.description,\n\t\t\twidth: mdb.width,\n\t\t\theight: mdb.height,\n\t\t\tbitsPerPixel: mdb.bitsPerPixel,\n\t\t\tcolors: mdb.colors,\n\t\t\tpictureData: mdb.pictureData as Buffer\n\t\t};\n\t}\n\n}\n","/***\n based on https://github.com/claus/flac-metadata\n License: MIT\n **/\n\nimport {Transform, TransformCallback, TransformOptions} from 'stream';\nimport {MetaDataBlock} from './block';\nimport {MetaDataBlockPicture} from './block.picture';\nimport {MetaDataBlockStreamInfo} from './block.streaminfo';\nimport {BlockVorbiscomment} from './block.vorbiscomment';\n\nconst enum STATE {\n\tIDLE = 0,\n\tMARKER = 1,\n\tMDB_HEADER = 2,\n\tMDB = 3,\n\tPASS_THROUGH = 4,\n\tSCAN_MARKER = 5\n}\n\nexport const enum MDB_TYPE {\n\tSTREAMINFO = 0,\n\tPADDING = 1,\n\tAPPLICATION = 2,\n\tSEEKTABLE = 3,\n\tVORBIS_COMMENT = 4,\n\tCUESHEET = 5,\n\tPICTURE = 6,\n\tINVALID = 127\n}\n\ninterface Chunk {\n\tbuffer: Buffer;\n\tpos: number;\n\tlength: number;\n\tdone: boolean;\n}\n\nexport class FlacProcessorStream extends Transform {\n\tprivate hasError = false;\n\tprivate hasID3 = false;\n\tprivate isFlac = false;\n\tprivate state = STATE.IDLE;\n\tprivate buf?: Buffer;\n\tprivate bufPos = 0;\n\n\tprivate mdb: any;\n\tprivate mdbLen = 0;\n\tprivate mdbLast = false;\n\tprivate mdbPush = false;\n\tprivate mdbLastWritten = false;\n\n\tconstructor(private reportID3: boolean = false, private parseMetaDataBlocks: boolean = false, options?: TransformOptions) {\n\t\tsuper(options);\n\t}\n\n\t_transform(buffer: any, encoding: string, callback: TransformCallback): void {\n\t\tconst chunk: Chunk = {buffer, pos: 0, length: buffer.length, done: false};\n\t\twhile (!chunk.done) {\n\t\t\tthis.process(chunk);\n\t\t}\n\t\tif (!this.hasError) {\n\t\t\tthis.emit('done');\n\t\t}\n\t\tcallback();\n\t}\n\n\t_flush(callback: TransformCallback): void {\n\t\t// All chunks have been processed\n\t\t// Clean up\n\t\tthis.state = STATE.IDLE;\n\t\tthis.mdbLastWritten = false;\n\t\tthis.hasID3 = false;\n\t\tthis.isFlac = false;\n\t\tthis.bufPos = 0;\n\t\tthis.buf = undefined;\n\t\tthis.mdb = null;\n\t\tcallback();\n\t}\n\n\tprivate scanSetFlac(chunk: Chunk, pos: number): void {\n\t\tif (this.reportID3) {\n\t\t\tlet rest = chunk.buffer.slice(0, pos);\n\t\t\tif (this.buf) {\n\t\t\t\trest = Buffer.concat([this.buf, rest]);\n\t\t\t}\n\t\t\tthis.emit('id3', rest);\n\t\t}\n\t\tthis.isFlac = true;\n\t\tchunk.pos = pos;\n\t\tthis.bufPos = 0;\n\t\tthis.buf = undefined;\n\t}\n\n\tprivate scan(chunk: Chunk): void {\n\t\tfor (let i = chunk.pos; i < chunk.length; i++) {\n\t\t\tconst slice = chunk.buffer.slice(i, i + 4).toString('utf8', 0);\n\t\t\tif (slice === 'fLaC') {\n\t\t\t\tthis.scanSetFlac(chunk, i);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (this.reportID3) {\n\t\t\tthis.buf = !this.buf ? chunk.buffer : Buffer.concat([this.buf, chunk.buffer]);\n\t\t}\n\t}\n\n\tprivate safePushFull(chunk: Chunk, minCapacity: number, persist: boolean, validate: (slice: Buffer, isDone: boolean) => boolean): void {\n\t\tlet slice;\n\t\t// Enough data available\n\t\tif (persist) {\n\t\t\t// Persist the entire block so it can be parsed\n\t\t\tif (this.bufPos > 0 && this.buf) {\n\t\t\t\t// Part of this block's data is in backup buffer, copy rest over\n\t\t\t\tchunk.buffer.copy(this.buf, this.bufPos, chunk.pos, chunk.pos + minCapacity - this.bufPos);\n\t\t\t\tslice = this.buf.slice(0, minCapacity);\n\t\t\t} else {\n\t\t\t\t// Entire block fits in current chunk\n\t\t\t\tslice = chunk.buffer.slice(chunk.pos, chunk.pos + minCapacity);\n\t\t\t}\n\t\t} else {\n\t\t\tslice = chunk.buffer.slice(chunk.pos, chunk.pos + minCapacity - this.bufPos);\n\t\t}\n\t\t// Push block after validation\n\t\tif (validate(slice, true)) {\n\t\t\tthis.push(slice);\n\t\t}\n\t\tchunk.pos += minCapacity - this.bufPos;\n\t\tthis.bufPos = 0;\n\t\tthis.buf = undefined;\n\t}\n\n\tprivate safePushIncomplete(chunk: Chunk, minCapacity: number, persist: boolean, validate: (slice: Buffer, isDone: boolean) => boolean): void {\n\t\t// Not enough data available\n\t\tif (persist) {\n\t\t\t// Copy/append incomplete block to backup buffer\n\t\t\tthis.buf = this.buf || Buffer.alloc(minCapacity);\n\t\t\tchunk.buffer.copy(this.buf, this.bufPos, chunk.pos, chunk.length);\n\t\t} else {\n\t\t\t// Push incomplete block after validation\n\t\t\tconst slice = chunk.buffer.slice(chunk.pos, chunk.length);\n\t\t\tif (validate(slice, false)) {\n\t\t\t\tthis.push(slice);\n\t\t\t}\n\t\t}\n\t\tthis.bufPos += chunk.length - chunk.pos;\n\t}\n\n\tprivate safePush(chunk: Chunk, minCapacity: number, persist: boolean, validate: (slice: Buffer, isDone: boolean) => boolean): boolean {\n\t\tconst isDone = (chunk.length - chunk.pos + this.bufPos >= minCapacity);\n\t\tif (isDone) {\n\t\t\tthis.safePushFull(chunk, minCapacity, persist, validate);\n\t\t} else {\n\t\t\tthis.safePushIncomplete(chunk, minCapacity, persist, validate);\n\t\t}\n\t\treturn isDone;\n\t}\n\n\tprivate processIDLE(): void {\n\t\tthis.state = STATE.MARKER;\n\t}\n\n\tprivate processSCANMARKER(chunk: Chunk): void {\n\t\tthis.scan(chunk);\n\t\tif (this.isFlac) {\n\t\t\tthis.state = STATE.MARKER;\n\t\t} else {\n\t\t\tchunk.done = true;\n\t\t}\n\t}\n\n\tprivate processMARKER(chunk: Chunk): void {\n\t\tif (this.safePush(chunk, 4, true, slice => this.validateMarker(slice))) {\n\t\t\tthis.state = (!this.isFlac && this.hasID3) ?\n\t\t\t\tSTATE.SCAN_MARKER :\n\t\t\t\t(this.isFlac ? STATE.MDB_HEADER : STATE.PASS_THROUGH);\n\t\t} else {\n\t\t\tchunk.done = true;\n\t\t}\n\t}\n\n\tprivate processMDBHEADER(chunk: Chunk): void {\n\t\tif (this.safePush(chunk, 4, true, slice => this.validateMDBHeader(slice))) {\n\t\t\tthis.state = STATE.MDB;\n\t\t} else {\n\t\t\tchunk.done = true;\n\t\t}\n\t}\n\n\tprivate processMDB(chunk: Chunk): void {\n\t\tif (this.safePush(chunk, this.mdbLen, this.parseMetaDataBlocks, (slice, isDone) => this.validateMDB(slice, isDone))) {\n\t\t\tif (this.mdb.isLast) {\n\t\t\t\t// This MDB has the isLast flag set to true.\n\t\t\t\t// Ignore all following MDBs.\n\t\t\t\tthis.mdbLastWritten = true;\n\t\t\t}\n\t\t\tthis.emit('postprocess', this.mdb);\n\t\t\tthis.state = this.mdbLast ? STATE.PASS_THROUGH : STATE.MDB_HEADER;\n\t\t} else {\n\t\t\tchunk.done = true;\n\t\t}\n\t}\n\n\tprivate processPASSTHROUGH(chunk: Chunk): void {\n\t\tthis.safePush(chunk, chunk.length - chunk.pos, false, () => true);\n\t\tchunk.done = true;\n\t}\n\n\tprivate process(chunk: Chunk): void {\n\t\tswitch (this.state) {\n\t\t\tcase STATE.IDLE:\n\t\t\t\tthis.processIDLE();\n\t\t\t\tbreak;\n\t\t\tcase STATE.SCAN_MARKER:\n\t\t\t\tthis.processSCANMARKER(chunk);\n\t\t\t\tbreak;\n\t\t\tcase STATE.MARKER:\n\t\t\t\tthis.processMARKER(chunk);\n\t\t\t\tbreak;\n\t\t\tcase STATE.MDB_HEADER:\n\t\t\t\tthis.processMDBHEADER(chunk);\n\t\t\t\tbreak;\n\t\t\tcase STATE.MDB:\n\t\t\t\tthis.processMDB(chunk);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\tcase STATE.PASS_THROUGH:\n\t\t\t\tthis.processPASSTHROUGH(chunk);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate validateMarker(slice: Buffer): boolean {\n\t\tthis.isFlac = (slice.toString('utf8', 0) === 'fLaC');\n\t\tif (!this.isFlac) {\n\t\t\tthis.hasID3 = slice.slice(0, 3).toString('utf8', 0) === 'ID3';\n\t\t\tif (!this.hasID3) {\n\t\t\t\tthis.hasError = true;\n\t\t\t\tthis.destroy(new Error('Not supported file format'));\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate initMDB(type: MDB_TYPE): MetaDataBlock {\n\t\t// Create appropriate MDB object\n\t\t// (data is injected later in _validateMDB, if parseMetaDataBlocks option is set to true)\n\t\tswitch (type) {\n\t\t\tcase MDB_TYPE.STREAMINFO:\n\t\t\t\treturn new MetaDataBlockStreamInfo(this.mdbLast);\n\t\t\tcase MDB_TYPE.VORBIS_COMMENT:\n\t\t\t\treturn new BlockVorbiscomment(this.mdbLast);\n\t\t\tcase MDB_TYPE.PICTURE:\n\t\t\t\treturn new MetaDataBlockPicture(this.mdbLast);\n\t\t\t// case MDB_TYPE.PADDING:\n\t\t\t// case MDB_TYPE.APPLICATION:\n\t\t\t// case MDB_TYPE.SEEKTABLE:\n\t\t\t// case MDB_TYPE.CUESHEET:\n\t\t\t// case MDB_TYPE.INVALID:\n\t\t\tdefault:\n\t\t\t\treturn new MetaDataBlock(this.mdbLast, type);\n\t\t}\n\t}\n\n\tprivate preProcess(slice: Buffer, header: number): boolean {\n\t\tif (this.mdbLastWritten) {\n\t\t\t// A previous MDB had the isLast flag set to true.\n\t\t\t// Ignore all following MDBs.\n\t\t\tthis.mdb.remove();\n\t\t} else if (this.mdbLast !== this.mdb.isLast) {\n\t\t\t// The consumer may change the MDB's isLast flag in the preprocess handler.\n\t\t\t// Here that flag is updated in the MDB header.\n\t\t\tif (this.mdb.isLast) {\n\t\t\t\theader |= 0x80000000;\n\t\t\t} else {\n\t\t\t\theader &= 0x7FFFFFFF;\n\t\t\t}\n\t\t\tslice.writeUInt32BE(header, 0);\n\t\t}\n\t\tthis.mdbPush = !this.mdb.removed;\n\t\treturn this.mdbPush;\n\t}\n\n\tprivate validateMDBHeader(slice: Buffer): boolean {\n\t\t// Parse MDB header\n\t\tconst header = slice.readUInt32BE(0);\n\t\tconst type = (header >>> 24) & 0x7F;\n\t\tthis.mdbLast = (((header >>> 24) & 0x80) !== 0);\n\t\tthis.mdbLen = header & 0xFFFFFF;\n\t\tthis.mdb = this.initMDB(type);\n\t\tthis.emit('preprocess', this.mdb);\n\t\treturn this.preProcess(slice, header);\n\t}\n\n\tprivate validateMDB(slice: Buffer, isDone: boolean): boolean {\n\t\t// Parse the MDB if parseMetaDataBlocks option is set to true\n\t\tif (this.parseMetaDataBlocks && isDone) {\n\t\t\tthis.mdb.parse(slice);\n\t\t}\n\t\treturn this.mdbPush;\n\t}\n\n}\n","import {MetaDataBlock} from './block';\n\nexport class MetaDataBlockStreamInfo extends MetaDataBlock {\n\tminBlockSize = 0;\n\tmaxBlockSize = 0;\n\tminFrameSize = 0;\n\tmaxFrameSize = 0;\n\tsampleRate = 0;\n\tchannels = 0;\n\tbitsPerSample = 0;\n\tsamples = 0;\n\tchecksum?: Buffer;\n\tduration = 0;\n\n\tconstructor(isLast: boolean) {\n\t\tsuper(isLast, 0);\n\t}\n\n\tremove(): void {\n\t\tthrow Error('Can\\'t remove StreamInfo block!');\n\t}\n\n\tparse(buffer: Buffer): void {\n\t\ttry {\n\t\t\tconst pos = 0;\n\t\t\tthis.minBlockSize = buffer.readUInt16BE(pos);\n\t\t\tthis.maxBlockSize = buffer.readUInt16BE(pos + 2);\n\t\t\tthis.minFrameSize = (buffer.readUInt8(pos + 4) << 16) | buffer.readUInt16BE(pos + 5);\n\t\t\tthis.maxFrameSize = (buffer.readUInt8(pos + 7) << 16) | buffer.readUInt16BE(pos + 8);\n\t\t\tconst tmp = buffer.readUInt32BE(pos + 10);\n\t\t\tthis.sampleRate = tmp >>> 12;\n\t\t\tthis.channels = (tmp >>> 9) & 0x07;\n\t\t\tthis.bitsPerSample = (tmp >>> 4) & 0x1F;\n\t\t\tthis.samples = +((tmp & 0x0F) << 4) + buffer.readUInt32BE(pos + 14);\n\t\t\tthis.checksum = Buffer.alloc(16);\n\t\t\tbuffer.copy(this.checksum, 0, 18, 34);\n\t\t\tthis.duration = this.samples / this.sampleRate;\n\t\t\tthis.hasData = true;\n\t\t} catch (e) {\n\t\t\tthis.error = e;\n\t\t\tthis.hasData = false;\n\t\t}\n\t}\n}\n","import {ID3v1, ID3v2, IID3V2, IMP3Analyzer, MP3} from 'jamp3';\nimport {StaticPool} from 'node-worker-threads-pool';\nimport {Jam} from '../../../model/jam-rest-data';\nimport {TrackTagFormatType} from '../../../model/jam-types';\nimport {logger} from '../../../utils/logger';\nimport {FORMAT} from '../audio.format';\nimport {AudioScanResult} from '../audio.module';\nimport {id3v2ToRawTag, rawTagToID3v2} from '../metadata';\nimport path from \"path\";\n\nconst taskPath = path.join(__dirname, 'tasks');\nexport const taskRewriteMp3 = path.join(taskPath, 'task-rewrite-mp3.js');\nexport const taskFixMp3 = path.join(taskPath, 'task-fix-mp3.js');\nexport const taskRemoveID3v1 = path.join(taskPath, 'task-remove-id3v1.js');\nexport const taskAnalyzeMp3 = path.join(taskPath, 'task-analyze-mp3.js');\n\nconst log = logger('Audio:MP3');\n\nexport class AudioModuleMP3 {\n\tprivate analyzeMp3Pool?: StaticPool;\n\tprivate rewriteAudioPool?: StaticPool;\n\tprivate removeID3v1Pool?: StaticPool;\n\tprivate fixMP3Pool?: StaticPool;\n\n\tasync read(filename: string): Promise<AudioScanResult> {\n\t\tconst mp3 = new MP3();\n\t\ttry {\n\t\t\tconst result = await mp3.read(filename, {mpegQuick: true, mpeg: true, id3v2: true});\n\t\t\tif (!result) {\n\t\t\t\treturn {tag: {format: TrackTagFormatType.none}, media: {}};\n\t\t\t}\n\t\t\tif (result.id3v2) {\n\t\t\t\treturn {tag: FORMAT.packID3v2JamServeTag(result.id3v2), media: FORMAT.packJamServeMedia(result.mpeg)};\n\t\t\t}\n\t\t\tconst id3v1 = new ID3v1();\n\t\t\tconst v1 = await id3v1.read(filename);\n\t\t\tif (!v1) {\n\t\t\t\treturn {tag: {format: TrackTagFormatType.none}, media: FORMAT.packJamServeMedia(result.mpeg)};\n\t\t\t}\n\t\t\treturn {tag: FORMAT.packID3v1JamServeTag(v1), media: FORMAT.packJamServeMedia(result.mpeg)};\n\t\t} catch (e) {\n\t\t\treturn {tag: {format: TrackTagFormatType.none}, media: {}};\n\t\t}\n\t}\n\n\tasync readRaw(filename: string): Promise<Jam.RawTag | undefined> {\n\t\tconst id3v2 = new ID3v2();\n\t\tconst result = await id3v2.read(filename);\n\t\tif (!result || !result.head) {\n\t\t\treturn Promise.reject(Error('No ID3v2 Tag found'));\n\t\t}\n\t\treturn id3v2ToRawTag(result);\n\t}\n\n\tasync write(filename: string, tag: Jam.RawTag): Promise<void> {\n\t\tconst id3 = rawTagToID3v2(tag);\n\t\tconst id3v2 = new ID3v2();\n\t\tawait id3v2.write(filename, id3, id3.head ? id3.head.ver : 4, id3.head ? id3.head.rev : 0, {keepBackup: false, paddingSize: 10});\n\t}\n\n\tasync removeID3v1(filename: string): Promise<void> {\n\t\tif (!this.removeID3v1Pool) {\n\t\t\tthis.removeID3v1Pool = new StaticPool({size: 3, task: taskRemoveID3v1});\n\t\t}\n\t\tlog.debug('remove ID3v1 Tag', filename);\n\t\tawait this.removeID3v1Pool.exec(filename);\n\t}\n\n\tasync fixAudio(filename: string): Promise<void> {\n\t\tif (!this.fixMP3Pool) {\n\t\t\tthis.fixMP3Pool = new StaticPool({size: 3, task: taskFixMp3});\n\t\t}\n\t\tlog.debug('fix Audio', filename);\n\t\tawait this.fixMP3Pool.exec(filename);\n\t}\n\n\tasync rewrite(filename: string): Promise<void> {\n\t\tif (!this.rewriteAudioPool) {\n\t\t\tthis.rewriteAudioPool = new StaticPool({size: 3, task: taskRewriteMp3});\n\t\t}\n\t\tlog.debug('rewrite', filename);\n\t\tawait this.rewriteAudioPool.exec(filename);\n\t}\n\n\tasync analyze(filename: string): Promise<IMP3Analyzer.Report> {\n\t\tif (!this.analyzeMp3Pool) {\n\t\t\tthis.analyzeMp3Pool = new StaticPool({size: 3, task: taskAnalyzeMp3});\n\t\t}\n\t\tlog.debug('analyze', filename);\n\t\treturn this.analyzeMp3Pool.exec(filename);\n\t}\n\n\tasync extractTagImage(filename: string): Promise<Buffer | undefined> {\n\t\tlog.debug('extractTagImage', filename);\n\t\tconst id3v2 = new ID3v2();\n\t\tconst tag = await id3v2.read(filename);\n\t\tif (tag) {\n\t\t\tconst frames = tag.frames.filter(f => ['APIC', 'PIC'].includes(f.id)) as Array<IID3V2.Frames.PicFrame>;\n\t\t\tlet frame = frames.find(f => f.value.pictureType === 3 /*ID3v2 picture type \"cover front\" */);\n\t\t\tif (!frame) {\n\t\t\t\tframe = frames[0];\n\t\t\t}\n\t\t\tif (frame) {\n\t\t\t\treturn (frame.value).bin;\n\t\t\t}\n\t\t}\n\t}\n\n}\n","module.exports = require(\"node-worker-threads-pool\");","import {spawnToolJson} from '../../../utils/tool';\n\nexport interface ProbeResult {\n\tformat: {\n\t\tfilename: string;\n\t\tnb_streams: number;\n\t\tnb_programs: number;\n\t\tformat_name: string; // 'mp3',\n\t\tformat_long_name: string; // 'MP2/3 (MPEG audio layer 2/3)',\n\t\tstart_time: string; // '0.000000',\n\t\tduration: string; // '662.499375',\n\t\tsize: string; // '10600329',\n\t\tbit_rate: string; // '128004',\n\t\tprobe_score: number;\n\t\ttags: { [name: string]: string };\n\t};\n\tframes?: Array<{\n\t\tmedia_type: string; //  'audio',\n\t\tstream_index: number; // 0,\n\t\tkey_frame: number; // 1,\n\t\tpkt_pts: number; // 0,\n\t\tpkt_pts_time: string; //  '0.000000',\n\t\tpkt_dts: number; // 0,\n\t\tpkt_dts_time: string; //  '0.000000',\n\t\tbest_effort_timestamp: number; // 0,\n\t\tbest_effort_timestamp_time: string; //  '0.000000',\n\t\tpkt_duration: number; // 508032,\n\t\tpkt_duration_time: string; //  '0.036000',\n\t\tpkt_pos: string; // '0',\n\t\tpkt_size: string; // '288',\n\t\tsample_fmt: string; //  'fltp',\n\t\tnb_samples: number; // 1152,\n\t\tchannels: number; // 1,\n\t\tchannel_layout: string; //  'mono'\n\t}>;\n\tstreams?: Array<{\n\t\tindex: number;\n\t\twidth: number;\n\t\theight: number;\n\t\tcodec_name: string;\n\t\tcodec_long_name: string;\n\t\tcodec_type: string;\n\t\tcodec_time_base: string; // '1/44100',\n\t\tcodec_tag_string: string; //  '[0][0][0][0]',\n\t\tmode: string;\n\t\tchannels: number;\n\t\tbits_per_sample: number;\n\t\tcodec_tag: string; //  '0x0000',\n\t\tsample_fmt: string; //  'fltp',\n\t\tsample_rate: string; //  '44100',\n\t\tchannel_layout: string; //  'stereo',\n\t\tr_frame_rate: string; // '0/0',\n\t\tavg_frame_rate: string; // '0/0',\n\t\ttime_base: string; // '1/14112000',\n\t\tnb_read_frames: string; // \"10020\";\n\t\tstart_pts: number;\n\t\tstart_time: string;\n\t\tduration_ts: number;\n\t\tduration: string;\n\t\tbit_rate: string;\n\t\tdisposition?: {\n\t\t\tdefault: number;\n\t\t\tdub: number;\n\t\t\toriginal: number;\n\t\t\tcomment: number;\n\t\t\tlyrics: number;\n\t\t\tkaraoke: number;\n\t\t\tforced: number;\n\t\t\thearing_impaired: number;\n\t\t\tvisual_impaired: number;\n\t\t\tclean_effects: number;\n\t\t\tattached_pic: number;\n\t\t\ttimed_thumbnails: number;\n\t\t};\n\t\tside_data_list?: Array<{\n\t\t\tside_data_type: string; // 'Replay Gain'\n\t\t}>;\n\t}>;\n}\n\nexport async function probe(filename: string, cmds: Array<string>): Promise<ProbeResult> {\n\treturn spawnToolJson<ProbeResult>('ffprobe', 'FFPROBE_PATH', ['-print_format', 'json', '-show_error', '-show_streams', '-show_format', ...cmds, filename]);\n}\n","import {ApiBinaryResult} from '../../../typings';\nimport {TranscoderStream} from './transcoder-stream';\nimport {AudioFormatType} from '../../../model/jam-types';\nimport {IDFolderCache} from '../../../utils/id-file-cache';\nimport {logger} from '../../../utils/logger';\n\nconst log = logger('Audio:Transcoder');\n\nexport class TranscoderModule {\n\tprivate transcodeCache: IDFolderCache<{ maxBitRate?: number; format: string }>;\n\n\tconstructor(transcodeCachePath: string) {\n\t\tthis.transcodeCache = new IDFolderCache<{ maxBitRate?: number; format: string }>(transcodeCachePath, 'transcode',\n\t\t\t(params: { maxBitRate?: number; format: string }) => `${params.maxBitRate ? `-${params.maxBitRate}` : ''}.${params.format}`);\n\t}\n\n\tasync get(filename: string, id: string, format: string, maxBitRate: number): Promise<ApiBinaryResult> {\n\t\tif (!TranscoderStream.validTranscoding(format as AudioFormatType)) {\n\t\t\treturn Promise.reject(Error('Unsupported transcoding format'));\n\t\t}\n\t\t// if (live) {\n\t\t// \treturn {pipe: new LiveTranscoderStream(filename, destFormat, maxBitRate)};\n\t\t// }\n\t\treturn this.transcodeCache.get(id, {format, maxBitRate}, async cacheFilename => {\n\t\t\tlog.debug('Writing transcode cache file', cacheFilename);\n\t\t\tawait TranscoderStream.transcodeToFile(filename, cacheFilename, format, maxBitRate);\n\t\t});\n\t}\n\n\n\tasync clearCacheByIDs(ids: Array<string>): Promise<void> {\n\t\tawait this.transcodeCache.removeByIDs(ids);\n\t}\n\n}\n","import {IDFolderCache} from '../../../utils/id-file-cache';\nimport {JamParameters} from '../../../model/jam-rest-params';\nimport {ApiBinaryResult} from '../../../typings';\nimport {WaveformGenerator} from './waveform.generator';\nimport {WaveformFormatType} from '../../../model/jam-types';\nimport fse from 'fs-extra';\nimport {logger} from '../../../utils/logger';\n\nconst log = logger('Audio:Waveform');\n\nexport class WaveformModule {\n\tprivate waveformCache: IDFolderCache<{ width?: number; format: string }>;\n\n\tconstructor(waveformCachePath: string) {\n\t\tthis.waveformCache = new IDFolderCache<{ width?: number; format: string }>(waveformCachePath, 'waveform', (params: { width?: number; format: string }) => {\n\t\t\treturn `${params.width !== undefined ? `-${params.width}` : ''}.${params.format}`;\n\t\t});\n\t}\n\n\tprivate async generateWaveform(filename: string, format: JamParameters.WaveformFormatType, width?: number): Promise<ApiBinaryResult> {\n\t\tconst wf = new WaveformGenerator();\n\t\tswitch (format) {\n\t\t\tcase WaveformFormatType.svg:\n\t\t\t\treturn {buffer: {buffer: Buffer.from(await wf.svg(filename, width), 'ascii'), contentType: 'image/svg+xml'}};\n\t\t\tcase WaveformFormatType.json:\n\t\t\t\treturn {json: await wf.json(filename)};\n\t\t\tcase WaveformFormatType.dat:\n\t\t\t\treturn {buffer: {buffer: await wf.binary(filename), contentType: 'application/binary'}};\n\t\t\tdefault:\n\t\t}\n\t\treturn Promise.reject(Error('Invalid Format for Waveform generation'));\n\t}\n\n\tasync get(id: string, filename: string, format: WaveformFormatType, width?: number): Promise<ApiBinaryResult> {\n\t\tif (!filename || !(await fse.pathExists(filename))) {\n\t\t\treturn Promise.reject(Error('Invalid filename for waveform generation'));\n\t\t}\n\t\treturn this.waveformCache.get(id, {format, width}, async cacheFilename => {\n\t\t\tconst result = await this.generateWaveform(filename, format, width);\n\t\t\tlog.debug('Writing cache file', cacheFilename);\n\t\t\tif (result.buffer) {\n\t\t\t\tawait fse.writeFile(cacheFilename, result.buffer.buffer);\n\t\t\t} else if (result.json) {\n\t\t\t\tawait fse.writeFile(cacheFilename, JSON.stringify(result.json));\n\t\t\t} else {\n\t\t\t\tthrow  new Error('Invalid waveform generation result');\n\t\t\t}\n\t\t});\n\t}\n\n\tasync clearCacheByIDs(ids: Array<string>): Promise<void> {\n\t\tawait this.waveformCache.removeByIDs(ids);\n\t}\n}\n","import {max, min} from 'd3-array';\nimport D3Node from 'd3-node';\nimport {scaleLinear} from 'd3-scale';\nimport {area} from 'd3-shape';\nimport fs from 'fs';\nimport WaveformData from 'waveform-data';\nimport {WaveDataResponse, Waveform} from './waveform.class';\n\nexport class WaveformGenerator {\n\n\tasync binary(filename: string): Promise<Buffer> {\n\t\tconst wf: Waveform = await this.generateWaveform(filename);\n\t\treturn wf.asBinary();\n\t}\n\n\tasync json(filename: string): Promise<WaveDataResponse> {\n\t\tconst wf: Waveform = await this.generateWaveform(filename);\n\t\treturn wf.asJSON();\n\t}\n\n\tasync svg(filename: string, width?: number): Promise<string> {\n\t\tconst data = await this.json(filename);\n\t\tconst svg = this.buildSvg(data, width);\n\t\t// const svgo = new SVGO();\n\t\t// const optimized = await svgo.optimize(svg);\n\t\t// return optimized.data;\n\t\treturn svg;\n\t}\n\n\tprivate async generateWaveform(filename: string): Promise<Waveform> {\n\t\tconst stream = fs.createReadStream(filename);\n\t\treturn new Promise<Waveform>((resolve, reject) => {\n\t\t\tconst wf: Waveform = new Waveform(stream, {\n\t\t\t\tsamplesPerPixel: 256,\n\t\t\t\tsampleRate: 44100\n\t\t\t});\n\t\t\twf.run(err => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(wf);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate buildSvg(data: WaveDataResponse, width?: number): string {\n\t\tconst height = 256;\n\t\tconst x = scaleLinear();\n\t\tconst y = scaleLinear();\n\t\tlet wfd = WaveformData.create(data);\n\t\tif (width !== undefined) {\n\t\t\tconst samplesPerPixel = Math.floor(wfd.duration * wfd.sample_rate / width);\n\t\t\twfd = wfd.resample({width: width * 2, scale: (samplesPerPixel < wfd.scale) ? wfd.scale : undefined});\n\t\t} else {\n\t\t\twidth = 4000;\n\t\t}\n\t\tconst channel = wfd.channel(0);\n\t\tconst minArray = channel.min_array();\n\t\tconst maxArray = channel.max_array();\n\t\tx.domain([0, wfd.length]).rangeRound([0, width]);\n\t\ty.domain([min(minArray) as any, max(maxArray) as any]).rangeRound([0, height]);\n\t\tconst waveArea = area()\n\t\t\t.x((a, i) => x(i))\n\t\t\t.y0((b, i) => y(minArray[i]))\n\t\t\t.y1((c, i) => y(c as any));\n\t\tconst d3n = new D3Node();\n\t\tconst svg = d3n.createSVG(null, null, {preserveAspectRatio: 'none', width: '100%', height: '100%', viewBox: `0 0 ${width} ${height}`});\n\t\tsvg\n\t\t\t.append('path')\n\t\t\t.datum(maxArray)\n\t\t\t.attr('stroke', 'green')\n\t\t\t.attr('fill', 'darkgreen')\n\t\t\t.attr('d', waveArea);\n\t\tconst result = d3n.svgString();\n\t\treturn result;\n\t}\n\n}\n","module.exports = require(\"d3-array\");","module.exports = require(\"d3-node\");","module.exports = require(\"d3-scale\");","module.exports = require(\"d3-shape\");","module.exports = require(\"waveform-data\");","/***\n\n based on https://github.com/StreamMachine/sm-waveform\n MIT: https://github.com/StreamMachine/sm-waveform/blob/master/LICENSE\n\n */\n\nimport {Stream} from 'stream';\nimport {WaveformStream} from './waveform.stream';\n\nexport interface WaveformOptions {\n\tsamplesPerPixel: number;\n\tsampleRate: number;\n}\n\n/** https://github.com/bbc/audiowaveform/blob/master/doc/DataFormat.md */\nexport interface WaveDataResponse {\n\t/** The version number of the waveform data format. */\n\tversion: number;\n\t/** The number of waveform channels present (version 2 only). */\n\tchannels: number;\n\t/** Sample rate of original audio file (Hz). */\n\tsample_rate: number;\n\t/** Number of audio samples per waveform minimum/maximum pair. */\n\tsamples_per_pixel: number;\n\t/** Resolution of waveform data. May be either 8 or 16. */\n\tbits: number;\n\t/** Length of waveform data (number of minimum and maximum value pairs per channel). */\n\tlength: number;\n\t/** Array of minimum and maximum waveform data points, interleaved. Depending on bits, each value may be in the range -128 to +127 or -32768 to +32727. */\n\tdata: Array<number>;\n}\n\nexport class Waveform {\n\topts: WaveformOptions;\n\tsamples: Array<number> = [];\n\n\tconstructor(private stream: Stream, opts: WaveformOptions) {\n\t\tthis.opts = {samplesPerPixel: 256, sampleRate: 44100, ...(opts || {})};\n\t}\n\n\trun(cb: (err?: Error) => void): void {\n\t\tconst ws = new WaveformStream(this.opts.samplesPerPixel, this.opts.sampleRate);\n\t\tws.on('readable', () => {\n\t\t\tlet px = ws.read();\n\t\t\twhile (px && px.length > 0) {\n\t\t\t\tthis.samples.push(px[0]);\n\t\t\t\tthis.samples.push(px[1]);\n\t\t\t\tpx = ws.read();\n\t\t\t}\n\t\t});\n\t\tws.on('done', err => {\n\t\t\tcb(err);\n\t\t});\n\t\tthis.stream.pipe(ws);\n\t}\n\n\tasBinaryV1(): Buffer {\n\t\t// https://github.com/bbc/audiowaveform/blob/master/doc/DataFormat.md\n\t\tconst result = Buffer.alloc((this.samples.length * 2) + 20);\n\t\tresult.writeInt32LE(1, 0); // version\n\t\tresult.writeUInt32LE(0, 4); // flags 0 (lsb) \t0: 16-bit resolution, 1: 8-bit resolution 1-31 \tUnused\n\t\tresult.writeInt32LE(this.opts.sampleRate, 8); // Sample rate\n\t\tresult.writeInt32LE(this.opts.samplesPerPixel, 12); // Samples per pixel\n\t\tresult.writeInt32LE(this.samples.length / 2, 16); // Length of waveform data (number of minimum and maximum value pairs)\n\t\tlet pos = 20;\n\t\tthis.samples.forEach(num => {\n\t\t\tresult.writeInt16LE(num, pos);\n\t\t\tpos += 2;\n\t\t});\n\t\treturn result;\n\t}\n\n\tasBinary(): Buffer {\n\t\t// https://github.com/bbc/audiowaveform/blob/master/doc/DataFormat.md\n\t\tconst result = Buffer.alloc((this.samples.length * 2) + 24);\n\t\tresult.writeInt32LE(2, 0); // version\n\t\tresult.writeUInt32LE(0, 4); // flags 0 (lsb) \t0: 16-bit resolution, 1: 8-bit resolution 1-31 \tUnused\n\t\tresult.writeInt32LE(this.opts.sampleRate, 8); // Sample rate\n\t\tresult.writeInt32LE(this.opts.samplesPerPixel, 12); // Samples per pixel\n\t\tresult.writeInt32LE(this.samples.length / 2, 16); // Length of waveform data (number of minimum and maximum value pairs)\n\t\tresult.writeInt32LE(2, 20); // Channels\n\t\tlet pos = 24;\n\t\tthis.samples.forEach(num => {\n\t\t\tresult.writeInt16LE(num, pos);\n\t\t\tpos += 2;\n\t\t});\n\t\treturn result;\n\t}\n\n\tasJSON(): WaveDataResponse {\n\t\t// https://github.com/bbc/audiowaveform/blob/master/doc/DataFormat.md\n\t\treturn {\n\t\t\tversion: 2,\n\t\t\tchannels: 1,\n\t\t\tsample_rate: this.opts.sampleRate,\n\t\t\tsamples_per_pixel: this.opts.samplesPerPixel,\n\t\t\tbits: 16,\n\t\t\tlength: this.samples.length / 2,\n\t\t\tdata: this.samples\n\t\t};\n\t}\n\n}\n","/***\n\n based on https://github.com/StreamMachine/sm-waveform\n MIT: https://github.com/StreamMachine/sm-waveform/blob/master/LICENSE\n\n */\n\nimport Ffmpeg from 'fluent-ffmpeg';\nimport {PassThrough, Readable, Transform, TransformCallback} from 'stream';\nimport {logger} from '../../../utils/logger';\n\nconst log = logger('waveform.stream');\n\nexport class WaveformStream extends Transform {\n\t_buf = new PassThrough();\n\t_out = new PassThrough();\n\t_ffmpeg: Ffmpeg.FfmpegCommand;\n\t_sampleRate: number;\n\t_samplesPerPixel: number;\n\t_started = false;\n\t_min: number | null = null;\n\t_max: number | null = null;\n\t_samples = 0;\n\t_total = 0;\n\n\tconstructor(atSamplesPerPixel?: number, atSampleRate?: number) {\n\t\tsuper({writableObjectMode: false, readableObjectMode: true, highWaterMark: 1024});\n\t\tthis._samplesPerPixel = atSamplesPerPixel != null ? atSamplesPerPixel : 256;\n\t\tthis._sampleRate = atSampleRate != null ? atSampleRate : 44100;\n\t\tconst options: Ffmpeg.FfmpegCommandOptions = {\n\t\t\tsource: this._buf as Readable\n\t\t};\n\t\tthis._ffmpeg = Ffmpeg(options).addOptions(['-f s16le', '-ac 1', '-acodec pcm_s16le', `-ar ${this._sampleRate}`]);\n\t\tthis._ffmpeg.on('start', (cmd: string) => {\n\t\t\tlog.debug(`ffmpeg started with ${cmd}`);\n\t\t\tthis._started = true;\n\t\t\treturn this.emit('_started');\n\t\t});\n\t\tlet errored = false;\n\t\tthis._ffmpeg.on('error', (err: any) => {\n\t\t\tif (err.code === 'ENOENT') {\n\t\t\t\terrored = true;\n\t\t\t\tlog.debug('ffmpeg failed to start.');\n\t\t\t\treturn this.emit('done', 'ffmpeg failed to start');\n\t\t\t}\n\t\t\terrored = true;\n\t\t\tlog.debug(`ffmpeg decoding error: ${err}`);\n\t\t\treturn this.emit('done', `ffmpeg decoding error: ${err}`);\n\t\t});\n\t\tthis._ffmpeg.on('end', () => {\n\t\t\tif (!errored) {\n\t\t\t\treturn this.emit('done');\n\t\t\t}\n\t\t});\n\t\tthis._ffmpeg.writeToStream(this._out);\n\t\tthis._out.on('readable', () => this.start());\n\t}\n\n\tstart(): void {\n\t\t// TODO: oddByte is always null => commented out\n\t\t// let oddByte: number | null = null;\n\t\t// let i: number;\n\t\t// let value: number;\n\t\tlet data: Buffer | undefined = this._out.read();\n\t\twhile (data && data.length > 0) {\n\t\t\t// i = 0;\n\t\t\t// if (oddByte != null) {\n\t\t\t// \tvalue = ((data.readInt8(0) << 8) | oddByte);\n\t\t\t// \toddByte = null;\n\t\t\t// \ti = 1;\n\t\t\t// } else {\n\t\t\t// value = data.readInt16LE(0);\n\t\t\t// i = 2;\n\t\t\t// }\n\t\t\t// this.readResults(value, i, data);\n\t\t\tthis.readResults(data.readInt16LE(0), 2, data);\n\t\t\tdata = this._out.read();\n\t\t}\n\t}\n\n\treadResults(value: number, pos: number, data: Buffer): void {\n\t\tconst dataLen = data.length;\n\t\twhile (pos <= dataLen) {\n\t\t\tthis._min = this._min === null ? value : Math.min(this._min, value);\n\t\t\tthis._max = this._max === null ? value : Math.max(this._max, value);\n\t\t\tthis._samples += 1;\n\t\t\tif (this._samples === this._samplesPerPixel) {\n\t\t\t\tthis.push([Math.round(this._min), Math.round(this._max)]);\n\t\t\t\tthis._min = null;\n\t\t\t\tthis._max = null;\n\t\t\t\tthis._samples = 0;\n\t\t\t}\n\t\t\tif (pos >= dataLen) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvalue = data.readInt16LE(pos);\n\t\t\tpos += 2;\n\t\t}\n\t}\n\n\t_transform(chunk: Buffer, encoding: string, cb: TransformCallback): void {\n\t\tthis._total += chunk.length;\n\t\tif (this._started) {\n\t\t\tthis._buf.write(chunk, encoding, cb as any);\n\t\t} else {\n\t\t\tthis.once('_started', () => {\n\t\t\t\tthis._buf.write(chunk, encoding, cb as any);\n\t\t\t});\n\t\t}\n\t}\n\n\t_flush(cb: TransformCallback): void {\n\t\tthis._buf.end();\n\t\tthis._out.once('end', () => {\n\t\t\tif (this._samples > 0) {\n\t\t\t\tthis.push([this._min, this._max]);\n\t\t\t}\n\t\t\tcb();\n\t\t});\n\t}\n\n}\n","import {spawnTool} from '../../../utils/tool';\n\nexport async function flac_test(filename: string): Promise<string | undefined> {\n\tconst cmds: Array<string> = ['-wst'];\n\tconst result = await spawnTool('flac', 'FLAC_PATH', [...cmds, filename]);\n\tif (result.errMsg && result.errMsg.length > 0) {\n\t\treturn result.errMsg;\n\t}\n}\n","module.exports = require(\"p-queue\");","import {JamRequest} from '../../api/jam/api';\nimport {GenericError, InvalidParamError, UnauthError} from '../../api/jam/error';\nimport {DBObjectType} from '../../db/db.types';\nimport {Jam} from '../../model/jam-rest-data';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {hashAndSaltSHA512} from '../../utils/hash';\nimport {randomString} from '../../utils/random';\nimport {BaseController} from '../base/dbobject.controller';\nimport {DownloadService} from '../download/download.service';\nimport {ImageService} from '../image/image.service';\nimport {SessionService} from '../session/session.service';\nimport {StateService} from '../state/state.service';\nimport {formatUser} from './user.format';\nimport {User} from './user.model';\nimport {UserService} from './user.service';\nimport {SearchQueryUser} from './user.store';\n\nexport class UserController extends BaseController<JamParameters.ID, JamParameters.IDs, {}, SearchQueryUser, JamParameters.UserSearch, User, Jam.User> {\n\n\tconstructor(\n\t\tpublic userService: UserService,\n\t\tprotected stateService: StateService,\n\t\tprotected imageService: ImageService,\n\t\tprotected downloadService: DownloadService,\n\t\tprotected sessionService: SessionService\n\t) {\n\t\tsuper(userService, stateService, imageService, downloadService);\n\t}\n\n\tasync prepare(item: User, includes: {}, user: User): Promise<Jam.User> {\n\t\treturn formatUser(item);\n\t}\n\n\tasync translateQuery(query: JamParameters.UserSearch, user: User): Promise<SearchQueryUser> {\n\t\treturn {\n\t\t\tquery: query.query,\n\t\t\tid: query.id,\n\t\t\tids: query.ids,\n\t\t\tname: query.name,\n\t\t\tisAdmin: query.isAdmin,\n\t\t\toffset: query.offset,\n\t\t\tamount: query.amount,\n\t\t\tsorts: query.sortField ? [{field: query.sortField, descending: !!query.sortDescending}] : undefined\n\t\t};\n\t}\n\n\tasync create(req: JamRequest<JamParameters.UserNew>): Promise<Jam.User> {\n\t\tconst admin = await this.userService.auth(req.user.name, req.query.password);\n\t\tif (!admin) {\n\t\t\treturn Promise.reject(UnauthError());\n\t\t}\n\t\tconst pass = randomString(16);\n\t\tconst pw = hashAndSaltSHA512(pass);\n\t\tconst u: User = {\n\t\t\tid: '',\n\t\t\tname: req.query.name || '',\n\t\t\tsalt: pw.salt,\n\t\t\thash: pw.hash,\n\t\t\temail: '',\n\t\t\ttype: DBObjectType.user,\n\t\t\tcreated: Date.now(),\n\t\t\tscrobblingEnabled: false,\n\t\t\troles: {\n\t\t\t\tadmin: req.query.roleAdmin !== undefined ? req.query.roleAdmin : false,\n\t\t\t\tstream: req.query.roleStream !== undefined ? req.query.roleStream : true,\n\t\t\t\tupload: req.query.roleUpload !== undefined ? req.query.roleUpload : false,\n\t\t\t\tpodcast: req.query.rolePodcast !== undefined ? req.query.rolePodcast : false\n\t\t\t}\n\t\t};\n\t\tu.id = await this.userService.create(u);\n\t\treturn this.prepare(u, {}, req.user);\n\t}\n\n\tasync update(req: JamRequest<JamParameters.UserUpdate>): Promise<Jam.User> {\n\t\tconst u = await this.checkUserAccess(req.query.id, req.query.password, req.user);\n\t\tif (req.query.name) {\n\t\t\tif (req.query.name !== u.name) {\n\t\t\t\tconst u2 = await this.userService.getByName(req.query.name);\n\t\t\t\tif (u2) {\n\t\t\t\t\treturn Promise.reject(GenericError('Username already exists'));\n\t\t\t\t}\n\t\t\t}\n\t\t\tu.name = req.query.name.trim();\n\t\t}\n\t\tif (req.query.email) {\n\t\t\tu.email = req.query.email.trim();\n\t\t}\n\t\tif (req.query.roleAdmin !== undefined) {\n\t\t\tu.roles.admin = req.query.roleAdmin;\n\t\t}\n\t\tif (req.query.rolePodcast !== undefined) {\n\t\t\tu.roles.podcast = req.query.rolePodcast;\n\t\t}\n\t\tif (req.query.roleStream !== undefined) {\n\t\t\tu.roles.stream = req.query.roleStream;\n\t\t}\n\t\tif (req.query.roleUpload !== undefined) {\n\t\t\tu.roles.upload = req.query.roleUpload;\n\t\t}\n\t\tawait this.userService.update(u);\n\t\treturn this.prepare(u, {}, req.user);\n\t}\n\n\tasync delete(req: JamRequest<JamParameters.ID>): Promise<void> {\n\t\tconst u = await this.byID(req.query.id);\n\t\tawait this.userService.remove(u);\n\t\tawait this.sessionService.clearCache();\n\t}\n\n\tasync imageRandom(req: JamRequest<JamParameters.UserImageRandom>): Promise<void> {\n\t\tlet user = req.user;\n\t\tif (req.query.id) {\n\t\t\tif (user.roles.admin) {\n\t\t\t\tuser = await this.byID(req.query.id);\n\t\t\t} else {\n\t\t\t\treturn Promise.reject(UnauthError());\n\t\t\t}\n\t\t}\n\t\tawait this.userService.generateAvatar(user, req.query.seed || randomString(42));\n\t}\n\n\tasync imageUploadUpdate(req: JamRequest<JamParameters.ID>): Promise<void> {\n\t\tif (!req.file) {\n\t\t\treturn Promise.reject(InvalidParamError('Image upload failed'));\n\t\t}\n\t\tconst u = await this.byID(req.query.id);\n\t\tif (u.id === req.user.id || req.user.roles.admin) {\n\t\t\treturn this.userService.setUserImage(u, req.file, req.fileType);\n\t\t}\n\t\treturn Promise.reject(UnauthError());\n\t}\n\n\tprivate async checkUserAccess(userID: string, password: string, user: User): Promise<User> {\n\t\tconst u = await this.byID(userID);\n\t\tif (u.id === user.id || user.roles.admin) {\n\t\t\tconst result = await this.userService.auth(user.name, password);\n\t\t\tif (result) {\n\t\t\t\treturn u;\n\t\t\t}\n\t\t}\n\t\treturn Promise.reject(UnauthError());\n\t}\n\n\tasync passwordUpdate(req: JamRequest<JamParameters.UserPasswordUpdate>): Promise<void> {\n\t\tconst user = await this.checkUserAccess(req.query.id, req.query.password, req.user);\n\t\treturn this.userService.setUserPassword(user, req.query.newPassword);\n\t}\n\n\tasync emailUpdate(req: JamRequest<JamParameters.UserEmailUpdate>): Promise<void> {\n\t\tconst user = await this.checkUserAccess(req.query.id, req.query.password, req.user);\n\t\treturn this.userService.setUserEmail(user, req.query.email);\n\t}\n\n}\n","import {JamRequest} from '../../api/jam/api';\nimport {validatePathParameterIDFormat, validatePathParameterIDSizeFormat} from '../../api/jam/check';\nimport {InvalidParamError, NotFoundError} from '../../api/jam/error';\nimport {DBObjectType} from '../../db/db.types';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {WaveformDefaultFormat, WaveformFormats, WaveformFormatType} from '../../model/jam-types';\nimport {ApiBinaryResult} from '../../typings';\nimport {DBObject} from '../base/base.model';\nimport {Episode} from '../episode/episode.model';\nimport {Store} from '../store/store';\nimport {Track} from '../track/track.model';\nimport {WaveformService} from './waveform.service';\nimport {Jam} from '../../model/jam-rest-data';\nimport fse from 'fs-extra';\n\nexport class WaveformController {\n\n\tconstructor(private store: Store, private waveformService: WaveformService) {\n\t}\n\n\tasync svgByPathParameter(req: JamRequest<{ pathParameter: string }>): Promise<ApiBinaryResult> {\n\t\tconst {id, size, format} = await validatePathParameterIDSizeFormat(req.query.pathParameter,\n\t\t\t[WaveformFormatType.svg], WaveformFormatType.svg, 1, 6000);\n\t\treturn this.getWaveform(id, format as JamParameters.WaveformFormatType, size);\n\t}\n\n\tasync waveformByPathParameter(req: JamRequest<{ pathParameter: string }>): Promise<ApiBinaryResult> {\n\t\tconst {id, format} = await validatePathParameterIDFormat(req.query.pathParameter, WaveformFormats, WaveformDefaultFormat);\n\t\treturn this.getWaveform(id, format as JamParameters.WaveformFormatType);\n\t}\n\n\tprivate async getWaveform(id: string, format?: JamParameters.WaveformFormatType, width?: number): Promise<ApiBinaryResult> {\n\t\tconst obj = await this.byID(id);\n\t\tformat = (format || WaveformDefaultFormat);\n\t\tswitch (obj.type) {\n\t\t\tcase DBObjectType.track:\n\t\t\t\treturn this.waveformService.getTrackWaveform(obj as Track, format as WaveformFormatType, width);\n\t\t\tcase DBObjectType.episode:\n\t\t\t\treturn this.waveformService.getEpisodeWaveform(obj as Episode, format as WaveformFormatType, width);\n\t\t\tdefault:\n\t\t}\n\t\treturn Promise.reject(Error('Invalid Object Type for Waveform generation'));\n\t}\n\n\tasync waveform(req: JamRequest<JamParameters.Waveform>): Promise<ApiBinaryResult> {\n\t\treturn this.getWaveform(req.query.id, req.query.format);\n\t}\n\n\tasync json(req: JamRequest<JamParameters.ID>): Promise<Jam.WaveFormData> {\n\t\tconst result = await this.getWaveform(req.query.id, WaveformFormatType.json);\n\t\tif (result.json) {\n\t\t\treturn result.json;\n\t\t}\n\t\tif (result.buffer) {\n\t\t\treturn JSON.parse(result.buffer.buffer.toString());\n\t\t}\n\t\tif (result.file) {\n\t\t\treturn JSON.parse((await fse.readFile(result.file.filename)).toString());\n\t\t}\n\t\treturn Promise.reject(Error('Error on Waveform generation'));\n\t}\n\n\tprivate async byID(id: string | undefined): Promise<DBObject> {\n\t\tif (!id || id.length === 0) {\n\t\t\treturn Promise.reject(InvalidParamError());\n\t\t}\n\t\tconst obj = await this.store.findInStores(id, this.store.streamStores());\n\t\tif (!obj) {\n\t\t\treturn Promise.reject(NotFoundError());\n\t\t}\n\t\treturn obj;\n\t}\n}\n","import cors from 'cors';\nimport express from 'express';\nimport {Engine} from '../../engine/engine';\n\nexport function registerPublicCORS(router: express.Router, engine: Engine): void {\n\trouter.use(cors({\n\t\tpreflightContinue: false,\n\t\tcredentials: true,\n\t\tallowedHeaders: ['Content-Type', 'Authorization'],\n\t\torigin: true,\n\t\tmethods: ['GET', 'POST']\n\t}));\n}\n\nexport function registerAuthenticatedCors(router: express.Router, engine: Engine): void {\n\tconst corsOptionsDelegate = (req: express.Request, callback: (err: Error | null, options: cors.CorsOptions) => void): void => {\n\t\tconst origins = engine.config.server.session.allowedCookieDomains || [];\n\t\tconst corsOptions: cors.CorsOptions = {\n\t\t\tpreflightContinue: false,\n\t\t\tcredentials: true,\n\t\t\tallowedHeaders: ['Content-Type', 'Authorization'],\n\t\t\torigin(origin, cb): void {\n\t\t\t\tif (!origin || origins.includes(origin)) {\n\t\t\t\t\tcb(null, true);\n\t\t\t\t} else {\n\t\t\t\t\tif (req.method === 'OPTIONS' || req.jwt) {\n\t\t\t\t\t\tcb(null, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcb(new Error('Not allowed by CORS'));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tmethods: ['GET', 'POST']\n\t\t};\n\t\tcallback(null, corsOptions); // callback expects two parameters: error and options\n\t};\n\trouter.use(cors(corsOptionsDelegate));\n}\n","module.exports = require(\"cors\");","import express from 'express';\nimport {Engine} from '../../engine/engine';\nimport {User} from '../../engine/user/user.model';\nimport {ApiBaseResponder} from '../response';\nimport {EngineRequest} from '../server';\nimport {Errors} from './error';\n\n/**\n * Fill user into req.user express requests\n */\nexport interface UserRequest extends EngineRequest {\n\tuser: User;\n\tclient: string;\n\tjwt: boolean;\n\tjwth?: string;\n\tparams: any;\n}\n\nfunction CheckAuthMiddleWare(req: UserRequest, res: express.Response, next: express.NextFunction): void {\n\tif (!req.client && req.session && req.session.client) {\n\t\treq.client = req.session.client;\n\t}\n\tif (req.user) {\n\t\treturn next();\n\t}\n\tApiBaseResponder.sendErrorMsg(req, res, 401, Errors.unauthorized);\n}\n\nexport function registerAuthentication(router: express.Router, engine: Engine): void {\n\trouter.use(CheckAuthMiddleWare as express.RequestHandler);\n}\n","import express from 'express';\nimport jwt from 'jsonwebtoken';\nimport passport from 'passport';\nimport passportJWT from 'passport-jwt';\nimport passportLocal from 'passport-local';\nimport {Engine} from '../../engine/engine';\nimport {formatUser} from '../../engine/user/user.format';\nimport {User} from '../../engine/user/user.model';\nimport {Jam} from '../../model/jam-rest-data';\nimport {hashMD5} from '../../utils/hash';\nimport {logger} from '../../utils/logger';\nimport {getMaxAge} from '../../utils/max-age';\nimport {UserRequest} from './login';\nimport {ApiResponder} from './response';\nimport {JAMAPI_VERSION} from './version';\n\nconst log = logger('Jam.Api.Passport');\n\ninterface JWTPayload {\n\tid: string;\n\texp?: number;\n\tclient: string;\n}\n\nfunction jwthash(token: string): string {\n\treturn hashMD5(token);\n}\n\nexport function registerPassPort(router: express.Router, engine: Engine): void {\n\trouter.use(passport.initialize());\n\trouter.use(passport.session());\n\tpassport.serializeUser((user: User, done) => {\n\t\tdone(null, user.id);\n\t});\n\tpassport.deserializeUser((id: string, done) => {\n\t\tengine.userService.getByID(id).then(user => done(null, user ? user : false)).catch(done);\n\t});\n\n\tpassport.use('local', new passportLocal.Strategy(\n\t\t{usernameField: 'username', passwordField: 'password'},\n\t\t(username, password, done) => {\n\t\t\tengine.userService.auth(username, password).then(user => done(null, user ? user : false)).catch(done);\n\t\t}\n\t));\n\tconst resolvePayload = (jwtPayload: any, done: passportJWT.VerifiedCallback): void => {\n\t\tengine.userService.getByID(jwtPayload.id)\n\t\t\t.then(user => done(null, user ? user : false, jwtPayload))\n\t\t\t.catch(done);\n\t};\n\tpassport.use('jwt-header', new passportJWT.Strategy({\n\t\t\tjwtFromRequest: passportJWT.ExtractJwt.fromAuthHeaderAsBearerToken(),\n\t\t\tsecretOrKey: engine.config.server.jwt.secret\n\t\t}, resolvePayload\n\t));\n\tpassport.use('jwt-parameter', new passportJWT.Strategy({\n\t\t\tjwtFromRequest: passportJWT.ExtractJwt.fromUrlQueryParameter('bearer'),\n\t\t\tsecretOrKey: engine.config.server.jwt.secret\n\t\t}, resolvePayload\n\t));\n\n\tfunction jwtAuthMiddleware(req: UserRequest, res: express.Response, next: express.NextFunction): void {\n\t\tif (req.user) {\n\t\t\treturn next();\n\t\t}\n\t\tlet name = '';\n\t\tlet token: string | undefined = req.header('Authorization');\n\t\tif (token) {\n\t\t\ttoken = token.slice(7); // Bearer xyz\n\t\t\tname = 'jwt-header';\n\t\t} else {\n\t\t\ttoken = `${req.query.bearer}`;\n\t\t\tif (token) {\n\t\t\t\tname = 'jwt-parameter';\n\t\t\t}\n\t\t}\n\t\tif (!token || !name) {\n\t\t\t// no or not valid auth token, go to next login method (request will fail eventually if req.user is not set)\n\t\t\treturn next();\n\t\t}\n\t\tconst jwth = jwthash(token);\n\t\tpassport.authenticate(name, {session: false}, (err, user, info: any) => {\n\t\t\tif (err) {\n\t\t\t\tlog.error(err);\n\t\t\t\treturn next();\n\t\t\t}\n\t\t\tif (info instanceof Error || !user) {\n\t\t\t\treturn next();\n\t\t\t}\n\t\t\treq.engine.sessionService.isRevoked(jwth)\n\t\t\t\t.then(revoked => {\n\t\t\t\t\tif (!revoked) {\n\t\t\t\t\t\treq.jwt = !!user;\n\t\t\t\t\t\treq.jwth = jwth;\n\t\t\t\t\t\treq.client = info.client;\n\t\t\t\t\t\treq.user = user;\n\t\t\t\t\t}\n\t\t\t\t\tnext();\n\t\t\t\t})\n\t\t\t\t.catch(e => {\n\t\t\t\t\tthrow e;\n\t\t\t\t});\n\t\t})(req, res, next);\n\t}\n\n\trouter.use(jwtAuthMiddleware as express.RequestHandler);\n}\n\nfunction generateJWT(userID: string, client: string, req: UserRequest): string {\n\tconst maxAge = getMaxAge(req.engine.config.server.jwt.maxAge);\n\tconst tokenData: JWTPayload = {\n\t\tid: userID,\n\t\texp: maxAge > 0 ? Math.floor((Date.now() + maxAge) / 1000) : undefined,\n\t\tclient\n\t};\n\treturn jwt.sign(tokenData, req.engine.config.server.jwt.secret);\n}\n\nexport function CallSessionLoginHandler(req: UserRequest, res: express.Response, next: express.NextFunction): void {\n\tpassport.authenticate('local', (err, user) => {\n\t\tif (err || !user) {\n\t\t\treturn next();\n\t\t}\n\t\treq.login(user, err2 => {\n\t\t\tif (err2) {\n\t\t\t\tlog.error(err2);\n\t\t\t\treturn next();\n\t\t\t}\n\t\t\tconst client = req.body.client || 'Unknown Client';\n\t\t\treq.client = client;\n\t\t\tconst token = req.body.jwt ? generateJWT(user.id, client, req) : undefined;\n\t\t\tif (req.session) { // express session data obj\n\t\t\t\treq.session.client = client;\n\t\t\t\treq.session.userAgent = req.headers['user-agent'];\n\t\t\t\tif (token) {\n\t\t\t\t\treq.session.jwth = jwthash(token);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst result: Jam.Session = {version: JAMAPI_VERSION, allowedCookieDomains: req.engine.config.server.session.allowedCookieDomains, jwt: token, user: formatUser(req.user)};\n\t\t\tApiResponder.data(req, res, result);\n\t\t});\n\t})(req, res, next);\n}\n\nasync function destroySession(req: UserRequest): Promise<void> {\n\treturn new Promise<void>((resolve, reject) => {\n\t\tif (!req.session) {\n\t\t\treturn resolve();\n\t\t}\n\t\treq.session.destroy(err => {\n\t\t\tif (err) {\n\t\t\t\treturn reject(err);\n\t\t\t}\n\t\t\treturn resolve();\n\t\t});\n\t});\n}\n\nasync function clearSession(req: UserRequest): Promise<void> {\n\tif (req.jwth) {\n\t\tawait req.engine.sessionService.removeByJwth(req.jwth);\n\t}\n\tawait destroySession(req);\n\tawait req.engine.sessionService.clearCache();\n}\n\nexport function CallSessionLogoutHandler(req: UserRequest, res: express.Response, next: express.NextFunction): void {\n\treq.logout();\n\tclearSession(req).catch(e => {\n\t\tconsole.error(e);\n\t});\n\tres.clearCookie(req.engine.config.server.session.cookie.name, {path: '/'});\n\tApiResponder.ok(req, res);\n}\n","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"passport\");","module.exports = require(\"passport-jwt\");","module.exports = require(\"passport-local\");","import {User} from '../../engine/user/user.model';\nimport {UnauthError} from './error';\nimport {JamApiRole} from './routes';\n\nexport async function checkRoles(user?: User, roles?: Array<JamApiRole>): Promise<void> {\n\tif (!user) {\n\t\treturn Promise.reject(UnauthError());\n\t}\n\tif (roles && roles.length > 0) {\n\t\tfor (const role of roles) {\n\t\t\tif (!user.roles[role]) {\n\t\t\t\treturn Promise.reject(UnauthError());\n\t\t\t}\n\t\t}\n\t}\n}\n","// THIS FILE IS GENERATED, DO NOT EDIT MANUALLY\n\nimport express from 'express';\nimport {Jam} from '../../model/jam-rest-data';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {ApiBinaryResult} from '../../typings';\nimport {JamApi, JamRequest} from './api';\nimport {UserRequest} from './login';\nimport {ApiResponder} from './response';\n\nexport type JamApiRole = 'admin' | 'podcast' | 'stream';\nexport type RegisterCallback = (req: UserRequest, res: express.Response) => Promise<void>;\nexport interface Register {\n\tget(name: string, execute: RegisterCallback, roles?: Array<JamApiRole>, apiCheckName?: string): void;\n\tpost(name: string, execute: RegisterCallback, roles?: Array<JamApiRole>, apiCheckName?: string): void;\n\tupload(name: string, field: string, execute: RegisterCallback, roles?: Array<JamApiRole>, apiCheckName?: string): void;\n}\n\nexport function registerPublicApi(register: Register, api: JamApi): void {\n\tregister.get('/ping', async (req, res) => {\n\t\tconst options: JamRequest<{}> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.Ping = await api.sessionController.ping(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/session', async (req, res) => {\n\t\tconst options: JamRequest<{}> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.Session = await api.sessionController.session(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n}\n\nexport function registerAccessControlApi(register: Register, api: JamApi): void {\n\tregister.get('/lastfm/lookup', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.LastFMLookup> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.LastFMResponse = await api.metadataController.lastfmLookup(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/lyricsovh/search', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.LyricsOVHSearch> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.LyricsOVHResponse = await api.metadataController.lyricsovhSearch(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/acoustid/lookup', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.AcoustidLookup> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.AcoustidResponse> = await api.metadataController.acoustidLookup(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/musicbrainz/lookup', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.MusicBrainzLookup> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.MusicBrainzResponse = await api.metadataController.musicbrainzLookup(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/musicbrainz/search', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.MusicBrainzSearch> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.MusicBrainzResponse = await api.metadataController.musicbrainzSearch(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/acousticbrainz/lookup', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.AcousticBrainzLookup> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.AcousticBrainzResponse = await api.metadataController.acousticbrainzLookup(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/coverartarchive/lookup', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.CoverArtArchiveLookup> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.CoverArtArchiveResponse = await api.metadataController.coverartarchiveLookup(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/wikipedia/summary', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.WikipediaSummary> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.WikipediaSummaryResponse = await api.metadataController.wikipediaSummary(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/wikidata/summary', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.WikidataSummary> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.WikipediaSummaryResponse = await api.metadataController.wikidataSummary(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/wikidata/lookup', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.WikidataLookup> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.WikidataLookupResponse = await api.metadataController.wikidataLookup(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/autocomplete', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.AutoComplete> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.AutoComplete = await api.autocompleteController.autocomplete(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/genre/list', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Genres> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.GenreList = await api.genreController.list(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/stats', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Stats> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.Stats = await api.statsController.get(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/nowPlaying/list', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.NowPlaying> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.NowPlayingList = await api.nowPlayingController.list(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/chat/list', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Chat> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.ChatMessage> = await api.chatController.list(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/folder/index', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.FolderIndex> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.FolderIndex = await api.folderController.index(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/folder/id', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Folder> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.Folder = await api.folderController.id(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/folder/ids', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Folders> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Folder> = await api.folderController.ids(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/folder/tracks', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.FolderTracks> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.TrackList = await api.folderController.tracks(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/folder/subfolders', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.FolderSubFolders> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.FolderList = await api.folderController.subfolders(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/folder/artist/similar', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.SimilarFolders> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.FolderList = await api.folderController.artistSimilar(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/folder/artist/info', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.Info = await api.folderController.artistInfo(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/folder/album/info', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.Info = await api.folderController.albumInfo(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/folder/list', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.FolderList> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.FolderList = await api.folderController.list(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/folder/search', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.FolderSearch> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.FolderList = await api.folderController.search(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/folder/health', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.FolderHealth> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.FolderHealth> = await api.folderController.health(options);\n\t\tApiResponder.data(req, res, result);\n\t}, ['admin']);\n\tregister.get('/folder/state', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.State = await api.folderController.state(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/folder/states', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.IDs> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.States = await api.folderController.states(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/folder/artist/similar/tracks', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.SimilarTracks> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.TrackList = await api.folderController.artistSimilarTracks(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/folder/artworks', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.ArtworkImage> = await api.folderController.artworks(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/track/id', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Track> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.Track = await api.trackController.id(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/track/ids', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Tracks> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Track> = await api.trackController.ids(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/track/rawTag', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.RawTag = await api.trackController.rawTag(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/track/rawTags', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.IDs> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.RawTags = await api.trackController.rawTags(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/track/search', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.TrackSearch> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.TrackList = await api.trackController.search(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/track/state', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.State = await api.trackController.state(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/track/states', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.IDs> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.States = await api.trackController.states(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/track/list', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.TrackList> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.TrackList = await api.trackController.list(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/track/similar', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.SimilarTracks> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.TrackList = await api.trackController.similar(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/track/health', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.TrackHealth> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.TrackHealth> = await api.trackController.health(options);\n\t\tApiResponder.data(req, res, result);\n\t}, ['admin']);\n\tregister.get('/track/lyrics', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.TrackLyrics = await api.trackController.lyrics(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/episode/id', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Episode> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.PodcastEpisode = await api.episodeController.id(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/episode/ids', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Episodes> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.PodcastEpisode> = await api.episodeController.ids(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/episode/search', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.EpisodeSearch> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.PodcastEpisodeList = await api.episodeController.search(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/episode/retrieve', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query as any, user: req.user, client: req.client};\n\t\tawait api.episodeController.retrieve(options);\n\t\tApiResponder.ok(req, res);\n\t}, ['podcast']);\n\tregister.get('/episode/state', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.State = await api.episodeController.state(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/episode/states', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.IDs> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.States = await api.episodeController.states(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/episode/status', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.PodcastEpisodeStatus = await api.episodeController.status(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/episode/list', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.PodcastEpisodeList> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.PodcastEpisodeList = await api.episodeController.list(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/podcast/id', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Podcast> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.Podcast = await api.podcastController.id(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/podcast/ids', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Podcasts> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Podcast> = await api.podcastController.ids(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/podcast/status', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.PodcastStatus = await api.podcastController.status(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/podcast/search', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.PodcastSearch> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.PodcastList = await api.podcastController.search(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/podcast/episodes', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.PodcastEpisodes> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.PodcastEpisodeList = await api.podcastController.episodes(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/podcast/refreshAll', async (req, res) => {\n\t\tconst options: JamRequest<{}> = {query: req.query as any, user: req.user, client: req.client};\n\t\tawait api.podcastController.refreshAll(options);\n\t\tApiResponder.ok(req, res);\n\t}, ['podcast']);\n\tregister.get('/podcast/refresh', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query as any, user: req.user, client: req.client};\n\t\tawait api.podcastController.refresh(options);\n\t\tApiResponder.ok(req, res);\n\t}, ['podcast']);\n\tregister.get('/podcast/state', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.State = await api.podcastController.state(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/podcast/states', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.IDs> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.States = await api.podcastController.states(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/podcast/list', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.PodcastList> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.PodcastList = await api.podcastController.list(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/radio/id', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Radio> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.Radio = await api.radioController.id(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/radio/ids', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Radios> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Radio> = await api.radioController.ids(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/radio/search', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.RadioSearch> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.RadioList = await api.radioController.search(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/radio/state', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.State = await api.radioController.state(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/radio/states', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.IDs> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.States = await api.radioController.states(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/artist/id', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Artist> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.Artist = await api.artistController.id(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/artist/ids', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Artists> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Artist> = await api.artistController.ids(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/artist/search', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ArtistSearch> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.ArtistList = await api.artistController.search(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/artist/state', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.State = await api.artistController.state(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/artist/states', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.IDs> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.States = await api.artistController.states(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/artist/list', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ArtistList> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.ArtistList = await api.artistController.list(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/artist/similar/tracks', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.SimilarTracks> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.TrackList = await api.artistController.similarTracks(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/artist/similar', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.SimilarArtists> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.ArtistList = await api.artistController.similar(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/artist/index', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ArtistIndex> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.ArtistIndex = await api.artistController.index(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/artist/tracks', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ArtistTracks> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.TrackList = await api.artistController.tracks(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/artist/albums', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ArtistAlbums> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.AlbumList = await api.artistController.albums(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/artist/series', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ArtistSeries> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.SeriesList = await api.artistController.series(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/artist/info', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.Info = await api.artistController.info(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/album/id', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Album> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.Album = await api.albumController.id(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/album/ids', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Albums> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Album> = await api.albumController.ids(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/album/list', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.AlbumList> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.AlbumList = await api.albumController.list(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/album/search', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.AlbumSearch> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.AlbumList = await api.albumController.search(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/album/index', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.AlbumIndex> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.AlbumIndex = await api.albumController.index(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/album/state', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.State = await api.albumController.state(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/album/states', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.IDs> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.States = await api.albumController.states(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/album/similar/tracks', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.SimilarTracks> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.TrackList = await api.albumController.similarTracks(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/album/tracks', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.AlbumTracks> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.TrackList = await api.albumController.tracks(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/album/info', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.Info = await api.albumController.info(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/series/id', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Series> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.Series = await api.seriesController.id(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/series/ids', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Serieses> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Series> = await api.seriesController.ids(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/series/search', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.SeriesSearch> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.SeriesList = await api.seriesController.search(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/series/state', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.State = await api.seriesController.state(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/series/states', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.IDs> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.States = await api.seriesController.states(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/series/list', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.SeriesList> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.SeriesList = await api.seriesController.list(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/series/index', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.SeriesIndex> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.SeriesIndex = await api.seriesController.index(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/series/tracks', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.SeriesTracks> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.TrackList = await api.seriesController.tracks(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/series/albums', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.SeriesAlbums> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.AlbumList = await api.seriesController.albums(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/series/info', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.Info = await api.seriesController.info(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/playlist/id', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Playlist> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.Playlist = await api.playlistController.id(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/playlist/ids', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Playlists> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Playlist> = await api.playlistController.ids(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/playlist/search', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.PlaylistSearch> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.PlaylistList = await api.playlistController.search(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/playlist/state', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.State = await api.playlistController.state(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/playlist/states', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.IDs> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.States = await api.playlistController.states(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/playlist/tracks', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.PlaylistTracks> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.TrackList = await api.playlistController.tracks(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/playlist/list', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.PlaylistList> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.PlaylistList = await api.playlistController.list(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/user/id', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.User = await api.userController.id(options);\n\t\tApiResponder.data(req, res, result);\n\t}, ['admin']);\n\tregister.get('/user/ids', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.IDs> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.User> = await api.userController.ids(options);\n\t\tApiResponder.data(req, res, result);\n\t}, ['admin']);\n\tregister.get('/user/search', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.UserSearch> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.UserList = await api.userController.search(options);\n\t\tApiResponder.data(req, res, result);\n\t}, ['admin']);\n\tregister.get('/user/sessions/list', async (req, res) => {\n\t\tconst options: JamRequest<{}> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.UserSession> = await api.sessionController.sessions(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/playqueue/get', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.PlayQueue> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.PlayQueue = await api.playqueueController.get(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/bookmark/id', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Bookmark> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.Bookmark = await api.bookmarkController.id(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/bookmark/ids', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Bookmarks> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.BookmarkList = await api.bookmarkController.ids(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/bookmark/list', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.BookmarkList> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.BookmarkList = await api.bookmarkController.list(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/bookmark/byTrack/list', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.BookmarkListByTrack> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.BookmarkList = await api.bookmarkController.byTrackList(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/root/id', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.Root = await api.rootController.id(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/root/ids', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.IDs> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Root> = await api.rootController.ids(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/root/search', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.RootSearch> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.RootList = await api.rootController.search(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/root/status', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.RootStatus = await api.rootController.status(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.get('/admin/settings', async (req, res) => {\n\t\tconst options: JamRequest<{}> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.AdminSettings = await api.settingsController.admin(options);\n\t\tApiResponder.data(req, res, result);\n\t}, ['admin']);\n\tregister.get('/admin/queue/id', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.AdminChangeQueueInfo = await api.rootController.queueId(options);\n\t\tApiResponder.data(req, res, result);\n\t}, ['admin']);\n\tregister.get('/folder/download', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Download> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: ApiBinaryResult = await api.folderController.download(options);\n\t\tApiResponder.binary(req, res, result);\n\t}, ['stream']);\n\tregister.get('/folder/image', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Image> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: ApiBinaryResult = await api.folderController.image(options);\n\t\tApiResponder.binary(req, res, result);\n\t});\n\tregister.get('/folder/artwork/image', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Image> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: ApiBinaryResult = await api.folderController.artworkImage(options);\n\t\tApiResponder.binary(req, res, result);\n\t});\n\tregister.get('/track/stream', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Stream> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: ApiBinaryResult = await api.trackController.stream(options);\n\t\tApiResponder.binary(req, res, result);\n\t}, ['stream']);\n\tregister.get('/track/download', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Download> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: ApiBinaryResult = await api.trackController.download(options);\n\t\tApiResponder.binary(req, res, result);\n\t}, ['stream']);\n\tregister.get('/track/image', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Image> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: ApiBinaryResult = await api.trackController.image(options);\n\t\tApiResponder.binary(req, res, result);\n\t});\n\tregister.get('/episode/stream', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Stream> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: ApiBinaryResult = await api.episodeController.stream(options);\n\t\tApiResponder.binary(req, res, result);\n\t}, ['stream']);\n\tregister.get('/episode/download', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Download> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: ApiBinaryResult = await api.episodeController.download(options);\n\t\tApiResponder.binary(req, res, result);\n\t}, ['stream']);\n\tregister.get('/episode/image', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Image> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: ApiBinaryResult = await api.episodeController.image(options);\n\t\tApiResponder.binary(req, res, result);\n\t});\n\tregister.get('/podcast/image', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Image> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: ApiBinaryResult = await api.podcastController.image(options);\n\t\tApiResponder.binary(req, res, result);\n\t});\n\tregister.get('/podcast/download', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Download> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: ApiBinaryResult = await api.podcastController.download(options);\n\t\tApiResponder.binary(req, res, result);\n\t}, ['stream']);\n\tregister.get('/artist/image', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Image> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: ApiBinaryResult = await api.artistController.image(options);\n\t\tApiResponder.binary(req, res, result);\n\t});\n\tregister.get('/artist/download', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Download> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: ApiBinaryResult = await api.artistController.download(options);\n\t\tApiResponder.binary(req, res, result);\n\t}, ['stream']);\n\tregister.get('/album/image', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Image> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: ApiBinaryResult = await api.albumController.image(options);\n\t\tApiResponder.binary(req, res, result);\n\t});\n\tregister.get('/album/download', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Download> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: ApiBinaryResult = await api.albumController.download(options);\n\t\tApiResponder.binary(req, res, result);\n\t}, ['stream']);\n\tregister.get('/playlist/image', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Image> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: ApiBinaryResult = await api.playlistController.image(options);\n\t\tApiResponder.binary(req, res, result);\n\t});\n\tregister.get('/playlist/download', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Download> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: ApiBinaryResult = await api.playlistController.download(options);\n\t\tApiResponder.binary(req, res, result);\n\t}, ['stream']);\n\tregister.get('/user/image', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Image> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: ApiBinaryResult = await api.userController.image(options);\n\t\tApiResponder.binary(req, res, result);\n\t});\n\tregister.get('/root/image', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Image> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: ApiBinaryResult = await api.rootController.image(options);\n\t\tApiResponder.binary(req, res, result);\n\t});\n\tregister.get('/image/:pathParameter', async (req, res) => {\n\t\tconst options: JamRequest<{pathParameter: string}> = {query: req.params as any, user: req.user, client: req.client};\n\t\tconst result: ApiBinaryResult = await api.imageController.imageByPathParameter(options);\n\t\tApiResponder.binary(req, res, result);\n\t}, [], 'image/{pathParameter}');\n\tregister.get('/stream/:pathParameter', async (req, res) => {\n\t\tconst options: JamRequest<{pathParameter: string}> = {query: req.params as any, user: req.user, client: req.client};\n\t\tconst result: ApiBinaryResult = await api.streamController.streamByPathParameter(options);\n\t\tApiResponder.binary(req, res, result);\n\t}, ['stream'], 'stream/{pathParameter}');\n\tregister.get('/waveform/:pathParameter', async (req, res) => {\n\t\tconst options: JamRequest<{pathParameter: string}> = {query: req.params as any, user: req.user, client: req.client};\n\t\tconst result: ApiBinaryResult = await api.waveformController.waveformByPathParameter(options);\n\t\tApiResponder.binary(req, res, result);\n\t}, ['stream'], 'waveform/{pathParameter}');\n\tregister.get('/waveform_svg/:pathParameter', async (req, res) => {\n\t\tconst options: JamRequest<{pathParameter: string}> = {query: req.params as any, user: req.user, client: req.client};\n\t\tconst result: ApiBinaryResult = await api.waveformController.svgByPathParameter(options);\n\t\tApiResponder.binary(req, res, result);\n\t}, ['stream'], 'waveform_svg/{pathParameter}');\n\tregister.get('/waveform_json', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query as any, user: req.user, client: req.client};\n\t\tconst result: Jam.WaveFormData = await api.waveformController.json(options);\n\t\tApiResponder.data(req, res, result);\n\t}, ['stream']);\n\tregister.get('/download/:pathParameter', async (req, res) => {\n\t\tconst options: JamRequest<{pathParameter: string}> = {query: req.params as any, user: req.user, client: req.client};\n\t\tconst result: ApiBinaryResult = await api.downloadController.downloadByPathParameter(options);\n\t\tApiResponder.binary(req, res, result);\n\t}, ['stream'], 'download/{pathParameter}');\n\tregister.post('/stream/scrobble', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.body as any, user: req.user, client: req.client};\n\t\tawait api.streamController.scrobble(options);\n\t\tApiResponder.ok(req, res);\n\t});\n\tregister.post('/bookmark/create', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.BookmarkCreate> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.Bookmark = await api.bookmarkController.create(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.post('/bookmark/delete', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.BookmarkDelete> = {query: req.body as any, user: req.user, client: req.client};\n\t\tawait api.bookmarkController.delete(options);\n\t\tApiResponder.ok(req, res);\n\t});\n\tregister.post('/bookmark/byTrack/delete', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.BookmarkTrackDelete> = {query: req.body as any, user: req.user, client: req.client};\n\t\tawait api.bookmarkController.byTrackDelete(options);\n\t\tApiResponder.ok(req, res);\n\t});\n\tregister.post('/chat/create', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ChatNew> = {query: req.body as any, user: req.user, client: req.client};\n\t\tawait api.chatController.create(options);\n\t\tApiResponder.ok(req, res);\n\t});\n\tregister.post('/chat/delete', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ChatDelete> = {query: req.body as any, user: req.user, client: req.client};\n\t\tawait api.chatController.delete(options);\n\t\tApiResponder.ok(req, res);\n\t});\n\tregister.post('/radio/create', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.RadioNew> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.Radio = await api.radioController.create(options);\n\t\tApiResponder.data(req, res, result);\n\t}, ['admin']);\n\tregister.post('/radio/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.RadioUpdate> = {query: req.body as any, user: req.user, client: req.client};\n\t\tawait api.radioController.update(options);\n\t\tApiResponder.ok(req, res);\n\t}, ['admin']);\n\tregister.post('/radio/delete', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.body as any, user: req.user, client: req.client};\n\t\tawait api.radioController.delete(options);\n\t\tApiResponder.ok(req, res);\n\t}, ['admin']);\n\tregister.post('/track/fav/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Fav> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.State = await api.trackController.favUpdate(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.post('/track/rate/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Rate> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.State = await api.trackController.rateUpdate(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.post('/track/rawTag/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.RawTagUpdate> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.AdminChangeQueueInfo = await api.trackController.rawTagUpdate(options);\n\t\tApiResponder.data(req, res, result);\n\t}, ['admin']);\n\tregister.post('/track/name/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.TrackEditName> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.AdminChangeQueueInfo = await api.trackController.nameUpdate(options);\n\t\tApiResponder.data(req, res, result);\n\t}, ['admin']);\n\tregister.post('/track/parent/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.TrackMoveParent> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.AdminChangeQueueInfo = await api.trackController.parentUpdate(options);\n\t\tApiResponder.data(req, res, result);\n\t}, ['admin']);\n\tregister.post('/track/delete', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.AdminChangeQueueInfo = await api.trackController.delete(options);\n\t\tApiResponder.data(req, res, result);\n\t}, ['admin']);\n\tregister.post('/track/fix', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.TrackFix> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.AdminChangeQueueInfo = await api.trackController.fix(options);\n\t\tApiResponder.data(req, res, result);\n\t}, ['admin']);\n\tregister.post('/folder/artwork/create', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.FolderArtworkNew> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.AdminChangeQueueInfo = await api.folderController.artworkCreate(options);\n\t\tApiResponder.data(req, res, result);\n\t}, ['admin']);\n\tregister.post('/folder/artwork/delete', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.AdminChangeQueueInfo = await api.folderController.artworkDelete(options);\n\t\tApiResponder.data(req, res, result);\n\t}, ['admin']);\n\tregister.post('/folder/artwork/name/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.FolderArtworkEditName> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.AdminChangeQueueInfo = await api.folderController.artworkNameUpdate(options);\n\t\tApiResponder.data(req, res, result);\n\t}, ['admin']);\n\tregister.upload('/folder/artworkUpload/create', 'image', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.FolderArtworkUpload> = {query: req.body as any, user: req.user, client: req.client, file: req.file ? req.file.path : undefined, fileType: req.file ? req.file.mimetype : undefined};\n\t\tconst result: Jam.AdminChangeQueueInfo = await api.folderController.artworkUploadCreate(options);\n\t\tApiResponder.data(req, res, result);\n\t}, ['admin']);\n\tregister.upload('/folder/artworkUpload/update', 'image', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.body as any, user: req.user, client: req.client, file: req.file ? req.file.path : undefined, fileType: req.file ? req.file.mimetype : undefined};\n\t\tconst result: Jam.AdminChangeQueueInfo = await api.folderController.artworkUploadUpdate(options);\n\t\tApiResponder.data(req, res, result);\n\t}, ['admin']);\n\tregister.post('/folder/name/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.FolderEditName> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.AdminChangeQueueInfo = await api.folderController.nameUpdate(options);\n\t\tApiResponder.data(req, res, result);\n\t}, ['admin']);\n\tregister.post('/folder/fav/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Fav> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.State = await api.folderController.favUpdate(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.post('/folder/rate/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Rate> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.State = await api.folderController.rateUpdate(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.post('/folder/parent/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.FolderMoveParent> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.AdminChangeQueueInfo = await api.folderController.parentUpdate(options);\n\t\tApiResponder.data(req, res, result);\n\t}, ['admin']);\n\tregister.post('/folder/delete', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.AdminChangeQueueInfo = await api.folderController.delete(options);\n\t\tApiResponder.data(req, res, result);\n\t}, ['admin']);\n\tregister.post('/folder/create', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.FolderCreate> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.AdminChangeQueueInfo = await api.folderController.create(options);\n\t\tApiResponder.data(req, res, result);\n\t}, ['admin']);\n\tregister.post('/album/fav/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Fav> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.State = await api.albumController.favUpdate(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.post('/album/rate/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Rate> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.State = await api.albumController.rateUpdate(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.post('/artist/fav/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Fav> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.State = await api.artistController.favUpdate(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.post('/artist/rate/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Rate> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.State = await api.artistController.rateUpdate(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.post('/series/fav/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Fav> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.State = await api.seriesController.favUpdate(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.post('/series/rate/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Rate> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.State = await api.seriesController.rateUpdate(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.post('/episode/fav/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Fav> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.State = await api.episodeController.favUpdate(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.post('/episode/rate/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Rate> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.State = await api.episodeController.rateUpdate(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.post('/podcast/create', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.PodcastNew> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.Podcast = await api.podcastController.create(options);\n\t\tApiResponder.data(req, res, result);\n\t}, ['podcast']);\n\tregister.post('/podcast/fav/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Fav> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.State = await api.podcastController.favUpdate(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.post('/podcast/rate/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Rate> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.State = await api.podcastController.rateUpdate(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.post('/podcast/delete', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.body as any, user: req.user, client: req.client};\n\t\tawait api.podcastController.delete(options);\n\t\tApiResponder.ok(req, res);\n\t}, ['podcast']);\n\tregister.post('/playlist/create', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.PlaylistNew> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.Playlist = await api.playlistController.create(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.post('/playlist/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.PlaylistUpdate> = {query: req.body as any, user: req.user, client: req.client};\n\t\tawait api.playlistController.update(options);\n\t\tApiResponder.ok(req, res);\n\t});\n\tregister.post('/playlist/fav/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Fav> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.State = await api.playlistController.favUpdate(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.post('/playlist/rate/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Rate> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.State = await api.playlistController.rateUpdate(options);\n\t\tApiResponder.data(req, res, result);\n\t});\n\tregister.post('/playlist/delete', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.body as any, user: req.user, client: req.client};\n\t\tawait api.playlistController.delete(options);\n\t\tApiResponder.ok(req, res);\n\t});\n\tregister.post('/playqueue/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.PlayQueueSet> = {query: req.body as any, user: req.user, client: req.client};\n\t\tawait api.playqueueController.update(options);\n\t\tApiResponder.ok(req, res);\n\t});\n\tregister.post('/playqueue/delete', async (req, res) => {\n\t\tconst options: JamRequest<{}> = {query: req.body as any, user: req.user, client: req.client};\n\t\tawait api.playqueueController.delete(options);\n\t\tApiResponder.ok(req, res);\n\t});\n\tregister.post('/user/create', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.UserNew> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.User = await api.userController.create(options);\n\t\tApiResponder.data(req, res, result);\n\t}, ['admin']);\n\tregister.post('/user/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.UserUpdate> = {query: req.body as any, user: req.user, client: req.client};\n\t\tawait api.userController.update(options);\n\t\tApiResponder.ok(req, res);\n\t}, ['admin']);\n\tregister.post('/user/password/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.UserPasswordUpdate> = {query: req.body as any, user: req.user, client: req.client};\n\t\tawait api.userController.passwordUpdate(options);\n\t\tApiResponder.ok(req, res);\n\t});\n\tregister.post('/user/email/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.UserEmailUpdate> = {query: req.body as any, user: req.user, client: req.client};\n\t\tawait api.userController.emailUpdate(options);\n\t\tApiResponder.ok(req, res);\n\t});\n\tregister.post('/user/image/random', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.UserImageRandom> = {query: req.body as any, user: req.user, client: req.client};\n\t\tawait api.userController.imageRandom(options);\n\t\tApiResponder.ok(req, res);\n\t});\n\tregister.upload('/user/imageUpload/update', 'image', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.body as any, user: req.user, client: req.client, file: req.file ? req.file.path : undefined, fileType: req.file ? req.file.mimetype : undefined};\n\t\tawait api.userController.imageUploadUpdate(options);\n\t\tApiResponder.ok(req, res);\n\t});\n\tregister.post('/user/delete', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.body as any, user: req.user, client: req.client};\n\t\tawait api.userController.delete(options);\n\t\tApiResponder.ok(req, res);\n\t}, ['admin']);\n\tregister.post('/user/sessions/delete', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.body as any, user: req.user, client: req.client};\n\t\tawait api.sessionController.delete(options);\n\t\tApiResponder.ok(req, res);\n\t});\n\tregister.post('/root/create', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.RootNew> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.AdminChangeQueueInfo = await api.rootController.create(options);\n\t\tApiResponder.data(req, res, result);\n\t}, ['admin']);\n\tregister.post('/root/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.RootUpdate> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.AdminChangeQueueInfo = await api.rootController.update(options);\n\t\tApiResponder.data(req, res, result);\n\t}, ['admin']);\n\tregister.post('/root/delete', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.AdminChangeQueueInfo = await api.rootController.delete(options);\n\t\tApiResponder.data(req, res, result);\n\t}, ['admin']);\n\tregister.post('/root/refresh', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.RootRefresh> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Jam.AdminChangeQueueInfo = await api.rootController.refresh(options);\n\t\tApiResponder.data(req, res, result);\n\t}, ['admin']);\n\tregister.post('/root/refreshAll', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.RootRefreshAll> = {query: req.body as any, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.AdminChangeQueueInfo> = await api.rootController.refreshAll(options);\n\t\tApiResponder.data(req, res, result);\n\t}, ['admin']);\n\tregister.post('/admin/settings/update', async (req, res) => {\n\t\tconst options: JamRequest<Jam.AdminSettings> = {query: req.body as any, user: req.user, client: req.client};\n\t\tawait api.settingsController.adminUpdate(options);\n\t\tApiResponder.ok(req, res);\n\t}, ['admin']);\n}\n","import express from 'express';\nimport session from 'express-session';\nimport {Engine} from '../../engine/engine';\nimport {getMaxAge} from '../../utils/max-age';\nimport {ExpressSessionStore} from './session-store';\n\nfunction jamSession(engine: Engine): express.RequestHandler {\n\tconst maxAge = getMaxAge(engine.config.server.session.cookie.maxAge);\n\treturn session({\n\t\tname: engine.config.server.session.cookie.name,\n\t\tsecret: engine.config.server.session.secret,\n\t\t// store: new SessionJSONFileStore(engine.config.getDataPath(['session', 'sessions.json'])),\n\t\tstore: new ExpressSessionStore(engine.sessionService),\n\t\tresave: false,\n\t\tproxy: engine.config.server.session.cookie.proxy,\n\t\tsaveUninitialized: false,\n\t\tcookie: {\n\t\t\tsecure: engine.config.server.session.cookie.secure,\n\t\t\tmaxAge: maxAge > 0 ? maxAge : undefined\n\t\t}\n\t});\n}\n\nexport function registerSession(router: express.Router, engine: Engine): void {\n\trouter.use(jamSession(engine));\n}\n","import {Express} from 'express';\nimport {Store} from 'express-session';\nimport {DBObjectType} from '../../db/db.types';\nimport {Session} from '../../engine/session/session.model';\nimport {SessionNotifyEventObject, SessionService} from '../../engine/session/session.service';\nimport {SessionMode} from '../../engine/session/session.types';\n\ninterface ExpressSession extends Express.SessionData {\n\tpassport: { user: string };\n\tjwth: string;\n\tclient: string;\n\tuserAgent: string;\n}\n\nexport class ExpressSessionStore extends Store implements SessionNotifyEventObject {\n\tprivate cache = new Map<string, ExpressSession>();\n\n\tconstructor(public sessionService: SessionService) {\n\t\tsuper();\n\t\tsessionService.registerNotify(this); // TODO: better notify system in node? use RX?\n\t}\n\n\tasync clearCache(): Promise<void> {\n\t\tthis.cache.clear();\n\t}\n\n\tprivate expired(data: ExpressSession): boolean {\n\t\treturn (data.cookie.expires || 0) < Date.now();\n\t}\n\n\tprivate toJam(sessionID: string, session: ExpressSession): Session {\n\t\treturn {\n\t\t\tid: '',\n\t\t\tsessionID,\n\t\t\tjwth: session.jwth,\n\t\t\tagent: session.userAgent,\n\t\t\tmode: session.jwth ? SessionMode.jwt : SessionMode.browser,\n\t\t\tclient: session.client,\n\t\t\tcookie: JSON.stringify(session.cookie),\n\t\t\ttype: DBObjectType.session,\n\t\t\tuserID: session.passport.user,\n\t\t\texpires: session.cookie.expires.valueOf() as number\n\t\t};\n\t}\n\n\tprivate toExpress(session: Session): ExpressSession {\n\t\treturn {\n\t\t\tcookie: JSON.parse(session.cookie),\n\t\t\tclient: session.client,\n\t\t\tjwth: session.jwth,\n\t\t\tuserAgent: session.agent,\n\t\t\tpassport: {user: session.userID}\n\t\t};\n\t}\n\n\tprivate async _get(sid: string): Promise<ExpressSession | undefined> {\n\t\tconst result = this.cache.get(sid);\n\t\tif (result) {\n\t\t\tif (this.expired(result)) {\n\t\t\t\tawait this.sessionService.remove(sid);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\tconst session = await this.sessionService.get(sid);\n\t\tif (session) {\n\t\t\tconst r = this.toExpress(session);\n\t\t\tthis.cache.set(sid, r);\n\t\t\treturn r;\n\t\t}\n\t}\n\n\tget: (sid: string, callback: (err: any, data?: Express.SessionData | undefined) => void) => void = (sid, callback) => {\n\t\tthis._get(sid)\n\t\t\t.then(data => callback(null, data))\n\t\t\t.catch(callback);\n\t};\n\n\tset: (sid: string, data: Express.SessionData, callback?: (err?: any) => void) => void = (sid, data, callback) => {\n\t\tthis.cache.set(sid, data as ExpressSession);\n\t\tthis.sessionService.set(this.toJam(sid, data as ExpressSession))\n\t\t\t.then(callback)\n\t\t\t.catch(callback);\n\t};\n\n\tdestroy: (sid: string, callback?: (err?: any) => void) => void = (sid, callback) => {\n\t\tthis.sessionService.remove(sid)\n\t\t\t.then(callback)\n\t\t\t.catch(callback);\n\t};\n\n\tall: (callback: (err: any, obj?: { [sid: string]: Express.SessionData } | null) => void) => void = callback => {\n\t\tthis.sessionService.all()\n\t\t\t.then(data => {\n\t\t\t\tconst result: { [id: string]: ExpressSession } = {};\n\t\t\t\tfor (const item of data) {\n\t\t\t\t\tresult[item.sessionID] = this.toExpress(item);\n\t\t\t\t}\n\t\t\t\tcallback(null, result);\n\t\t\t})\n\t\t\t.catch(e => callback(e, undefined));\n\t};\n\n\tlength: (callback: (err: any, length?: number | null) => void) => void = callback => {\n\t\tthis.sessionService.count()\n\t\t\t.then(data => callback(null, data))\n\t\t\t.catch(e => callback(e, undefined));\n\t};\n\n\tclear: (callback?: (err?: any) => void) => void = callback => {\n\t\tthis.cache.clear();\n\t\tthis.sessionService.clear()\n\t\t\t.then(callback)\n\t\t\t.catch(callback);\n\t};\n\n\t// touch: (sid: string, session: Express.Session, callback?: (err?: any) => void) => void = (sid, session, callback) => {\n\t// \tthis.set(sid, session, callback);\n\t// };\n\n}\n","export enum SessionMode {\n\tbrowser = 'browser',\n\tjwt = 'jwt'\n}\n","import express from 'express';\nimport multer from 'multer';\n\nimport finishedRequest from 'on-finished';\nimport {fileDeleteIfExists} from '../../utils/fs-utils';\nimport {logger} from '../../utils/logger';\n\nconst log = logger('Jam.Api.Upload');\n\nfunction registerAutoClean(req: express.Request, res: express.Response): void {\n\tfinishedRequest(res, err => {\n\t\tif (err && req.file && req.file.path) {\n\t\t\tfileDeleteIfExists(req.file.path).catch(e => {\n\t\t\t\tlog.error(e);\n\t\t\t});\n\t\t}\n\t});\n}\n\nclass JamUpload {\n\tupload: any; // import Multer from 'multer'; TODO: type not importable?\n\n\tconstructor(tmpPath: string) {\n\t\tconst dest = `${tmpPath}/`;\n\t\tthis.upload = multer({dest});\n\t}\n\n\thandler(field: string, autoClean: boolean = true): express.RequestHandler {\n\t\tconst mu = this.upload.single(field);\n\t\treturn (req: express.Request, res: express.Response, next: express.NextFunction): void => {\n\t\t\tif (autoClean) {\n\t\t\t\tregisterAutoClean(req, res);\n\t\t\t}\n\t\t\tmu(req, res, next);\n\t\t};\n\t}\n}\n\nexport function jamUpload(tmpPath: string): JamUpload {\n\treturn new JamUpload(tmpPath);\n}\n","module.exports = require(\"multer\");","module.exports = require(\"on-finished\");","import path from 'path';\nimport {FirstStartConfig} from './firststart.config';\nimport {JamServeConfig} from './jamserve.config';\n\nexport interface Config extends JamServeConfig {\n\tfirstStart?: FirstStartConfig;\n\n\tgetDataPath(parts: Array<string>): string;\n}\n\nexport function validateConfig(config: Config): void {\n\t// TODO: validate full config with a json schema\n\tif (!config.server) {\n\t\tthrow new Error('JamServe Config: Missing server settings');\n\t}\n\tif (!config.database) {\n\t\tthrow new Error('JamServe Config: Missing database settings');\n\t}\n\tif (!config.server.limit) {\n\t\tconsole.error('JamServe Config: Missing server limit settings, using default values');\n\t\tconfig.server.limit = {login: {max: 5, window: 60}, api: {max: 20, window: 60}};\n\t}\n}\n\nexport function extendConfig(jamServe: JamServeConfig, firstStart: FirstStartConfig): Config {\n\treturn {...jamServe, firstStart, getDataPath: (parts: Array<string>): string => path.resolve(jamServe.paths.data, ...parts)};\n}\n\n// eslint-disable-next-line no-var\ndeclare var __non_webpack_require__: any;\n\nexport function loadConfig(configPath?: string): Config {\n\tconfigPath = configPath && configPath.length > 0 ? configPath : path.join(process.cwd(), 'config');\n\tconst configFile = path.join(configPath, 'config.js');\n\tconst configFirstStartFile = path.join(configPath, 'firststart.config.js');\n\tlet jamServe: JamServeConfig;\n\tlet firstStart: FirstStartConfig;\n\tif (__non_webpack_require__) {\n\t\tjamServe = __non_webpack_require__(configFile);\n\t\tfirstStart = __non_webpack_require__(configFirstStartFile);\n\t} else {\n\t\tjamServe = require(configFile);\n\t\tfirstStart = require(configFirstStartFile);\n\t}\n\tconst result = extendConfig(jamServe, firstStart);\n\tvalidateConfig(result);\n\treturn result;\n}\n","import {ApiResponse, Client} from '@elastic/elasticsearch';\nimport {DBObject} from '../../engine/base/base.model';\nimport {logger} from '../../utils/logger';\nimport {wait} from '../../utils/wait';\nimport {Database} from '../db.model';\nimport {DBObjectType} from '../db.types';\nimport {DBIndexElastic} from './db-elastic.index';\nimport {mapping} from './db-elastic.mapping';\nimport {DbElasticSequence} from './db-elastic.sequence';\nimport {ElasticIndexRefresh, ElasticsearchConfig} from './db-elastic.types';\n\nconst log = logger('DB.elastic');\n\nexport class DBElastic implements Database {\n\tclient: Client;\n\tsequence: DbElasticSequence;\n\tindexPrefix: string;\n\tindexRefresh?: ElasticIndexRefresh;\n\n\tconstructor(config: ElasticsearchConfig) {\n\t\tthis.client = new Client({node: config.host});\n\t\tthis.sequence = new DbElasticSequence(this.client);\n\t\tthis.indexPrefix = config.indexPrefix;\n\t\tthis.indexRefresh = config.indexRefresh as ElasticIndexRefresh;\n\t}\n\n\tasync drop(): Promise<void> {\n\t\tfor (const type of this.getTypes()) {\n\t\t\tawait this.resetIndex(type);\n\t\t}\n\t}\n\n\tasync close(): Promise<void> {\n\t\tawait this.client.close();\n\t}\n\n\tasync ping(): Promise<void> {\n\t\ttry {\n\t\t\tawait this.client.ping({});\n\t\t} catch (e) {\n\t\t\tlog.error('elasticsearch could not be contacted', e);\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n\n\tasync open(): Promise<void> {\n\t\tlog.debug('Open connection to elasticsearch');\n\t\tawait this.ping();\n\t\tawait this.sequence.init(this.client);\n\t\tawait this.check();\n\t}\n\n\tasync getNewId(): Promise<string> {\n\t\tconst id: number = await this.sequence.get(this.indexName('id'));\n\t\treturn id.toString();\n\t}\n\n\tindexName(name: string): string {\n\t\treturn `${this.indexPrefix}_${name}`;\n\t}\n\n\tprivate getTypes(): Array<DBObjectType> {\n\t\treturn Object.keys(DBObjectType)\n\t\t\t.filter(key => !isNaN(Number(key)))\n\t\t\t.map(Number);\n\t}\n\n\tprivate async resetIndex(type: DBObjectType): Promise<void> {\n\t\tconst index = this.indexName(DBObjectType[type]);\n\t\tconst exists = await this.client.indices.exists({index});\n\t\tif (exists) {\n\t\t\tawait this.client.indices.delete({index});\n\t\t}\n\t}\n\n\tasync reset(): Promise<void> {\n\t\tfor (const type of this.getTypes()) {\n\t\t\tawait this.resetIndex(type);\n\t\t}\n\t}\n\n\tprivate async createIndex(type: DBObjectType): Promise<void> {\n\t\tconst name = DBObjectType[type];\n\t\tif (!mapping[name]) {\n\t\t\treturn Promise.reject(Error(`Missing Elasticsearch Mapping for type ${name}`));\n\t\t}\n\t\tconst index = this.indexName(name);\n\t\tconst m: any = {};\n\t\tm._default_ = {_default_: {date_detection: false}};\n\t\tm[name] = mapping[name];\n\t\tawait this.client.indices.create({index, body: {mappings: m}});\n\t}\n\n\tprivate async checkIndex(type: DBObjectType): Promise<boolean> {\n\t\tconst name = DBObjectType[type];\n\t\tconst index = this.indexName(name);\n\t\tconst res: ApiResponse<boolean> = await this.client.indices.exists({index});\n\t\tif (!res.body) {\n\t\t\tawait this.createIndex(type);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tasync check(): Promise<void> {\n\t\tlet waitAfter = false;\n\t\tfor (const type of this.getTypes()) {\n\t\t\twaitAfter = await this.checkIndex(type) || waitAfter;\n\t\t}\n\t\tif (waitAfter) {\n\t\t\tawait wait(1000);\n\t\t}\n\t}\n\n\tpublic getDBIndex<T extends DBObject>(type: DBObjectType): DBIndexElastic<T> {\n\t\treturn new DBIndexElastic<T>(type, this);\n\t}\n}\n","module.exports = require(\"@elastic/elasticsearch\");","export async function wait(ms: number): Promise<void> {\n\treturn new Promise<void>(res => setTimeout(res, ms));\n}\n","import {ApiResponse, RequestParams} from '@elastic/elasticsearch';\nimport {DBObject} from '../../engine/base/base.model';\nimport {ListResult} from '../../engine/base/list-result';\nimport {DatabaseIndex, DatabaseQuery} from '../db.model';\nimport {DBObjectType} from '../db.types';\nimport {DBElastic} from './db-elastic';\nimport {mapping} from './db-elastic.mapping';\nimport {DeleteByQueryResponse, GetResponse, Hit, MgetResponse, SearchResponse} from './db-elastic.types';\n\nexport class DBIndexElastic<T extends DBObject> implements DatabaseIndex<T> {\n\tprotected _index: string;\n\tprotected _type: string;\n\tprotected _map: any;\n\tpublic type: DBObjectType;\n\tpublic db: DBElastic;\n\n\tconstructor(type: DBObjectType, db: DBElastic) {\n\t\tthis.type = type;\n\t\tif (type === undefined) {\n\t\t\tthis._index = db.indexName('*'); // 'all';\n\t\t\tthis._type = '';\n\t\t} else {\n\t\t\tthis._type = DBObjectType[type];\n\t\t\tthis._index = db.indexName(DBObjectType[type]);\n\t\t}\n\t\tthis._map = mapping[this._type];\n\t\tthis.db = db;\n\t}\n\n\tprivate hit2Obj(hit: Hit<any>): T {\n\t\thit._source.id = hit._source.id.toString();\n\t\thit._source.type = this.type;\n\t\treturn hit._source as T;\n\t}\n\n\tprivate filterProperties(o: T): any {\n\t\treturn {...o, type: undefined};\n\t}\n\n\tprivate getPropertyMapping(key: string): any {\n\t\tconst parts = key.split('.');\n\t\tlet o = this._map;\n\t\tfor (const p of parts) {\n\t\t\to = o.properties[p];\n\t\t}\n\t\treturn o;\n\t}\n\n\tprivate translateElasticQuery(query: DatabaseQuery): any {\n\t\tif (query.all) {\n\t\t\treturn {match_all: {}};\n\t\t}\n\t\tlet must: Array<any> = [];\n\t\tif (query.term) {\n\t\t\tconst o = query.term;\n\t\t\tmust = must.concat(\n\t\t\t\tObject.keys(o).map(key => {\n\t\t\t\t\tconst term: any = {};\n\t\t\t\t\tconst prop = this.getPropertyMapping(key);\n\t\t\t\t\tif (!prop) {\n\t\t\t\t\t\tconsole.log('Unknown prop', this._type, key);\n\t\t\t\t\t}\n\t\t\t\t\tif (prop && prop.type === 'text') {\n\t\t\t\t\t\tterm[`${key}.keyword`] = o[key];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tterm[key] = o[key];\n\t\t\t\t\t}\n\t\t\t\t\treturn {term};\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\tif (query.terms) {\n\t\t\tconst o = query.terms;\n\t\t\tmust = must.concat(\n\t\t\t\tObject.keys(o).map(key => {\n\t\t\t\t\tconst term: any = {};\n\t\t\t\t\tconst prop = this.getPropertyMapping(key);\n\t\t\t\t\tif (!prop) {\n\t\t\t\t\t\tconsole.log('Unknown prop', this._type, key);\n\t\t\t\t\t}\n\t\t\t\t\tif (prop && prop.type === 'text') {\n\t\t\t\t\t\tterm[`${key}.keyword`] = o[key];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tterm[key] = o[key];\n\t\t\t\t\t}\n\t\t\t\t\treturn {terms: term};\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\tif (query.match) {\n\t\t\tconst o = query.match;\n\t\t\tmust = must.concat(\n\t\t\t\tObject.keys(o).map(key => {\n\t\t\t\t\tconst term: any = {};\n\t\t\t\t\tterm[key] = o[key];\n\t\t\t\t\treturn {match_phrase_prefix: term};\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\tif (query.startsWith) {\n\t\t\tconst o = query.startsWith;\n\t\t\tmust = must.concat(\n\t\t\t\tObject.keys(o).map(key => {\n\t\t\t\t\tconst term: any = {};\n\t\t\t\t\tterm[key] = o[key];\n\t\t\t\t\treturn {prefix: term};\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\tif (query.startsWiths) {\n\t\t\tconst o = query.startsWiths;\n\t\t\tObject.keys(o).forEach(key => {\n\t\t\t\to[key].forEach(s => {\n\t\t\t\t\tconst term: any = {};\n\t\t\t\t\tterm[key] = s;\n\t\t\t\t\tmust.push({prefix: term});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\tif (query.range) {\n\t\t\tconst o = query.range;\n\t\t\tmust = must.concat(\n\t\t\t\tObject.keys(o).map(key => {\n\t\t\t\t\tconst vals = o[key];\n\t\t\t\t\tconst term: any = {};\n\t\t\t\t\tterm[key] = {gte: vals.gte, lte: vals.lte};\n\t\t\t\t\treturn {range: term};\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\tif (query.notNull) {\n\t\t\tconst o = query.notNull;\n\t\t\tmust = must.concat(o.map(key => {\n\t\t\t\treturn {exists: {field: key}};\n\t\t\t}));\n\t\t}\n\t\treturn {\n\t\t\tbool: {\n\t\t\t\tmust\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate async scroll(response: SearchResponse<T>, onHits: (hits: Array<any>) => Promise<void>): Promise<void> {\n\t\tlet count = 0;\n\n\t\tconst getMoreUntilDone = async (res: SearchResponse<T>): Promise<void> => {\n\t\t\tcount += res.hits.hits.length;\n\t\t\tawait onHits(res.hits.hits);\n\t\t\tif (res.hits.total !== count && res._scroll_id) {\n\t\t\t\t// now we can call scroll over and over\n\t\t\t\tconst next: ApiResponse<SearchResponse<T>> = await this.db.client.scroll({scroll_id: res._scroll_id, scroll: '30s'});\n\t\t\t\tawait getMoreUntilDone(next.body);\n\t\t\t}\n\t\t};\n\n\t\tawait getMoreUntilDone(response);\n\t}\n\n\tprivate async indexItem(body: T, id: string): Promise<void> {\n\t\tawait this.db.client.index({\n\t\t\tindex: this._index,\n\t\t\ttype: this._type,\n\t\t\tbody: this.filterProperties(body),\n\t\t\tid,\n\t\t\trefresh: this.db.indexRefresh\n\t\t});\n\t}\n\n\tprivate async search(query: DatabaseQuery, params: RequestParams.Search): Promise<SearchResponse<T>> {\n\t\tparams.body = {...(params.body || {}), query: this.translateElasticQuery(query)};\n\t\tconst res: ApiResponse<SearchResponse<T>> = await this.db.client.search({...params, index: this._index, type: this._type});\n\t\treturn res.body;\n\t}\n\n\tasync add(body: T): Promise<string> {\n\t\tif (!body.id || body.id.length === 0) {\n\t\t\tbody.id = await this.getNewId();\n\t\t}\n\t\tawait this.indexItem(body, body.id);\n\t\treturn body.id;\n\t}\n\n\tasync aggregate(query: DatabaseQuery, field: string): Promise<number> {\n\t\tconst response = await this.search(query, {body: {aggs: {_count: {cardinality: {field}}}}});\n\t\treturn response.aggregations._count.value;\n\t}\n\n\tasync bulk(bodies: Array<T>): Promise<void> {\n\t\tfor (const body of bodies) {\n\t\t\tawait this.add(body);\n\t\t}\n\t}\n\n\tasync byId(id: string): Promise<T | undefined> {\n\t\tif (this.type === undefined) {\n\t\t\treturn this.queryOne({term: {id}});\n\t\t}\n\t\ttry {\n\t\t\tconst response: ApiResponse<GetResponse<T>> = await this.db.client.get({\n\t\t\t\tindex: this._index,\n\t\t\t\ttype: this._type,\n\t\t\t\tid\n\t\t\t});\n\t\t\tif (!response.body.found) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn this.hit2Obj(response.body);\n\t\t} catch (e) {\n\t\t\tif (e.statusCode !== 404) {\n\t\t\t\treturn Promise.reject(e);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync byIds(ids: Array<string>): Promise<Array<T>> {\n\t\tif (ids.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\tconst response: ApiResponse<MgetResponse<T>> = await this.db.client.mget({\n\t\t\tindex: this._index,\n\t\t\ttype: this._type,\n\t\t\tbody: {ids}\n\t\t});\n\t\tif (!response.body.docs) {\n\t\t\treturn [];\n\t\t}\n\t\treturn response.body.docs\n\t\t\t.filter(doc => doc.found)\n\t\t\t.map(doc => this.hit2Obj(doc));\n\t}\n\n\tasync count(query: DatabaseQuery): Promise<number> {\n\t\tconst response = await this.search(query, {size: 0});\n\t\treturn response.hits.total;\n\t}\n\n\tasync distinct(query: DatabaseQuery, field: string): Promise<Array<string>> {\n\t\tconst response = await this.search(query, {body: {aggs: {distinct: {terms: {field}}}}});\n\t\treturn response.aggregations.distinct.buckets.map((hit: any) => hit.key);\n\t}\n\n\tasync getNewId(): Promise<string> {\n\t\treturn this.db.getNewId();\n\t}\n\n\tasync query(query: DatabaseQuery): Promise<ListResult<T>> {\n\t\tif (query.amount && query.offset) {\n\t\t\tconst response = await this.search(query, {from: query.offset, size: query.amount});\n\t\t\treturn {\n\t\t\t\tamount: query.amount,\n\t\t\t\toffset: query.offset,\n\t\t\t\ttotal: response.hits.total,\n\t\t\t\titems: response.hits.hits.map(o => this.hit2Obj(o))\n\t\t\t};\n\t\t}\n\t\treturn this.queryScroll(query);\n\t}\n\n\tprivate async queryScroll(query: DatabaseQuery): Promise<ListResult<T>> {\n\t\tlet docs: Array<Hit<T>> = [];\n\t\tconst response = await this.search(query, {scroll: '30s', size: 100});\n\t\tawait this.scroll(response, async hits => {\n\t\t\tdocs = docs.concat(hits);\n\t\t});\n\t\treturn {\n\t\t\ttotal: docs.length,\n\t\t\titems: docs.map(o => this.hit2Obj(o))\n\t\t};\n\t}\n\n\tasync queryOne(query: DatabaseQuery): Promise<T | undefined> {\n\t\tconst response = await this.search(query, {size: 1});\n\t\tif (response.hits.total > 0) {\n\t\t\treturn this.hit2Obj(response.hits.hits[0]);\n\t\t}\n\t\treturn;\n\t}\n\n\tasync queryIds(query: DatabaseQuery): Promise<Array<string>> {\n\t\tlet list: Array<string> = [];\n\t\tconst response = await this.search(query, {scroll: '30s', body: {stored_fields: []}});\n\t\tawait this.scroll(response, async hits => {\n\t\t\tlist = list.concat(hits.map(hit => hit._id.toString()));\n\t\t});\n\t\treturn list;\n\t}\n\n\tasync iterate(query: DatabaseQuery, onItem: (items: Array<T>) => Promise<void>): Promise<void> {\n\t\tconst response = await this.search(query, {scroll: '30s', size: 100});\n\t\tawait this.scroll(response, async hits => {\n\t\t\tawait onItem(hits.map(o => this.hit2Obj(o)));\n\t\t});\n\t}\n\n\tasync remove(id: string | Array<string>): Promise<number> {\n\t\tif (id.length === 0) {\n\t\t\treturn Promise.resolve(0);\n\t\t}\n\t\tif (Array.isArray(id)) {\n\t\t\tconst response: ApiResponse<DeleteByQueryResponse> = await this.db.client.deleteByQuery({\n\t\t\t\tindex: this._index,\n\t\t\t\ttype: this._type,\n\t\t\t\tbody: {query: {terms: {_id: id}}},\n\t\t\t\trefresh: !this.db.indexRefresh || this.db.indexRefresh !== 'false'\n\t\t\t});\n\t\t\treturn response.body.deleted;\n\t\t}\n\t\tawait this.db.client.delete({\n\t\t\tid, index: this._index, type: this._type,\n\t\t\trefresh: this.db.indexRefresh\n\t\t});\n\t\treturn 1;\n\t}\n\n\tasync removeByQuery(query: DatabaseQuery): Promise<number> {\n\t\tconst response: ApiResponse<DeleteByQueryResponse> = await this.db.client.deleteByQuery({\n\t\t\tindex: this._index,\n\t\t\ttype: this._type,\n\t\t\tbody: {\n\t\t\t\tquery: this.translateElasticQuery(query)\n\t\t\t},\n\t\t\trefresh: !this.db.indexRefresh || this.db.indexRefresh !== 'false'\n\t\t});\n\t\treturn response.body.deleted;\n\t}\n\n\tasync replace(id: string, body: T): Promise<void> {\n\t\tawait this.indexItem(body, id);\n\t}\n\n\tasync upsert(id: string, body: T): Promise<void> {\n\t\tif (!id || id.length === 0) {\n\t\t\tawait this.add(body);\n\t\t\treturn;\n\t\t}\n\t\tawait this.indexItem(body, id);\n\t}\n\n}\n","/***\n * based on https://github.com/analog-nico/es-sequence\n * MIT\n */\n\nimport {ApiResponse, Client} from '@elastic/elasticsearch';\n\nconst esTypeMapping = {\n\t_source: {enabled: false},\n\t_all: {enabled: false},\n\tenabled: false\n};\n\nexport class DbElasticSequence {\n\tprivate initPromise: Promise<any> | null = null;\n\tprivate initError: Promise<any> | null = null;\n\tprivate cacheFillPromise: Promise<any> | null = null;\n\tprivate cache: { [sequenceName: string]: Array<string> } = {};\n\tprivate cacheSize = 100;\n\tprivate options = {esIndex: 'sequences', esType: 'sequence'};\n\n\tconstructor(private client: Client) {\n\t}\n\n\tprivate static isObject(val: any): boolean {\n\t\treturn typeof val === 'object';\n\t}\n\n\tprivate static isInjectedCacheSizeValid(cacheSize: number | any): boolean {\n\t\treturn ((cacheSize === undefined) || (typeof cacheSize === 'number' && isFinite(cacheSize) && Math.floor(cacheSize) === cacheSize));\n\t}\n\n\tasync init(options?: any, cacheSize?: number): Promise<any> {\n\t\t// The following checks are done before the init promise is created\n\t\t// because errors thrown in the init promise are stored in _initError.\n\t\t// If a check fails it should look as if init was not called.\n\t\tif (this.initPromise !== null) {\n\t\t\treturn Promise.reject(new Error('Init was called while a previous init is pending.'));\n\t\t}\n\t\tif (this.cacheFillPromise !== null) {\n\t\t\treturn Promise.reject(new Error('Init was called while get requests are pending.'));\n\t\t}\n\t\tif (!DbElasticSequence.isInjectedCacheSizeValid(cacheSize)) {\n\t\t\treturn Promise.reject(new Error('Init was called with an invalid cacheSize parameter value.'));\n\t\t}\n\t\tthis.initPromise = new Promise(resolve => {\n\t\t\tthis.cache = {}; // In case init is called multiple times.\n\t\t\tthis.cacheSize = 100;\n\t\t\tthis.initError = null;\n\t\t\tif (cacheSize !== undefined) {\n\t\t\t\tthis.cacheSize = cacheSize;\n\t\t\t}\n\t\t\tif (DbElasticSequence.isObject(options)) {\n\t\t\t\tthis.options = {...this.options, ...options};\n\t\t\t}\n\t\t\tresolve(this.initEsIndexIfNeeded());\n\t\t})\n\t\t\t.catch(e => {\n\t\t\t\tthis.initError = e;\n\t\t\t\tthrow e;\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\tthis.initPromise = null;\n\t\t\t});\n\t\treturn this.initPromise;\n\t}\n\n\tasync addMappingToEsIndexIfMissing(): Promise<ApiResponse> {\n\t\tconst mapping: any = {};\n\t\tmapping[this.options.esType] = esTypeMapping;\n\t\treturn this.client.indices.putMapping({\n\t\t\tindex: this.options.esIndex,\n\t\t\ttype: this.options.esType,\n\t\t\t// ignore_conflicts: true,\n\t\t\tbody: mapping\n\t\t});\n\t}\n\n\tasync initEsIndexIfNeeded(): Promise<ApiResponse> {\n\t\tconst response: ApiResponse<boolean> = await this.client.indices.exists({index: this.options.esIndex});\n\t\tif (response.body) {\n\t\t\treturn this.addMappingToEsIndexIfMissing();\n\t\t}\n\t\tconst config: any = {\n\t\t\tsettings: {\n\t\t\t\tnumber_of_shards: 1,\n\t\t\t\tauto_expand_replicas: '0-all'\n\t\t\t},\n\t\t\tmappings: {}\n\t\t};\n\t\tconfig.mappings[this.options.esType] = esTypeMapping;\n\t\treturn this.client.indices.create({\n\t\t\tindex: this.options.esIndex,\n\t\t\tbody: config\n\t\t});\n\t}\n\n\tprivate async fillCache(sequenceName: string): Promise<any> {\n\t\tthis.cacheFillPromise = new Promise(resolve => {\n\t\t\tif (!this.cache[sequenceName]) {\n\t\t\t\tthis.cache[sequenceName] = [];\n\t\t\t}\n\t\t\tconst bulkParams: any = {body: []}; // todo: new elastic types for Bulkparameter\n\t\t\tfor (let i = 0; i < this.cacheSize; i += 1) {\n\t\t\t\t// Action\n\t\t\t\tbulkParams.body.push({index: {_index: this.options.esIndex, _type: this.options.esType, _id: sequenceName}});\n\t\t\t\t// Empty document\n\t\t\t\tbulkParams.body.push({});\n\t\t\t}\n\t\t\tresolve(\n\t\t\t\tthis.client.bulk(bulkParams).then(response => {\n\t\t\t\t\tfor (const item of response.body.items) {\n\t\t\t\t\t\t// This is the core trick: The document's version is an auto-incrementing integer.\n\t\t\t\t\t\tthis.cache[sequenceName].push(item.index._version);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t}).then(() => {\n\t\t\tthis.cacheFillPromise = null;\n\t\t});\n\t\treturn this.cacheFillPromise;\n\t}\n\n\tprivate async interal_get(sequenceName: string): Promise<any> {\n\t\tif (this.initError !== null) {\n\t\t\treturn Promise.reject(this.initError);\n\t\t}\n\t\tif (this.cache[sequenceName] && this.cache[sequenceName].length > 0) {\n\t\t\treturn Promise.resolve(this.cache[sequenceName].shift());\n\t\t}\n\n\t\tconst returnValue = async (): Promise<any> => {\n\t\t\treturn this.interal_get(sequenceName);\n\t\t};\n\n\t\tif (this.cacheFillPromise !== null) {\n\t\t\treturn this.cacheFillPromise.then(returnValue);\n\t\t}\n\t\treturn this.fillCache(sequenceName).then(returnValue);\n\t}\n\n\tpublic async get(sequenceName: string): Promise<any> {\n\t\tif (!this.client) {\n\t\t\tthrow new Error('Please run init(...) first to provide an elasticsearch client.');\n\t\t}\n\t\tif ((!sequenceName) || sequenceName.length === 0) {\n\t\t\tthrow new Error('The parameter value for sequenceName is invalid.');\n\t\t}\n\t\tif (this.initPromise !== null) {\n\t\t\t// Defer until init is done\n\t\t\treturn this.initPromise.then(() => this.interal_get(sequenceName));\n\t\t}\n\t\treturn this.interal_get(sequenceName);\n\t}\n\n\tpublic getCacheSize(sequenceName: string): number {\n\t\tif (!this.cache[sequenceName]) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn this.cache[sequenceName].length;\n\t}\n}\n","import Nedb from 'nedb';\nimport path from 'path';\nimport {DBObject} from '../../engine/base/base.model';\nimport {fileDeleteIfExists} from '../../utils/fs-utils';\nimport {Database} from '../db.model';\nimport {DBObjectType} from '../db.types';\nimport {DBIndexNedb} from './db-nedb.index';\n\ninterface NebDBClient {\n\tclient: Nedb;\n\tfilename: string;\n}\n\nexport class DBNedb implements Database {\n\tclients: { [type: string]: NebDBClient } = {};\n\tsequenceId = 99999;\n\n\tconstructor(dbPath: string) {\n\t\tthis.getTypes().map(type => DBObjectType[type]).forEach(type => {\n\t\t\tthis.clients[type] = this.initClient(type, dbPath);\n\t\t});\n\t}\n\n\tprivate initClient(type: string, dbPath: string): NebDBClient {\n\t\tconst filename = path.resolve(dbPath, `${type}.db`);\n\t\treturn {client: new Nedb({filename}), filename};\n\t}\n\n\tasync drop(): Promise<void> {\n\t\tfor (const type of this.getTypes()) {\n\t\t\tconst db = this.clients[DBObjectType[type]];\n\t\t\tawait fileDeleteIfExists(db.filename);\n\t\t}\n\t}\n\n\tprivate async checkMaxSequence(db: NebDBClient): Promise<void> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tdb.client.find({}).sort({id: -1}).exec((err, docs) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn reject(err);\n\t\t\t\t}\n\t\t\t\tif (docs.length > 0) {\n\t\t\t\t\tconst nr = Number(docs[0].id);\n\t\t\t\t\tif (!isNaN(nr)) {\n\t\t\t\t\t\tthis.sequenceId = Math.max(this.sequenceId, nr);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresolve();\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate async loadDatabase(db: NebDBClient): Promise<void> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tdb.client.loadDatabase(err => {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn reject(err);\n\t\t\t\t}\n\t\t\t\tresolve();\n\t\t\t});\n\t\t});\n\t}\n\n\tasync open(): Promise<void> {\n\t\tfor (const type of this.getTypes()) {\n\t\t\tconst db = this.clients[DBObjectType[type]];\n\t\t\tawait this.loadDatabase(db);\n\t\t\tawait this.checkMaxSequence(db);\n\t\t}\n\t\tawait this.check();\n\t}\n\n\tasync close(): Promise<void> {\n\t\treturn;\n\t}\n\n\tprivate getTypes(): Array<DBObjectType> {\n\t\treturn Object.keys(DBObjectType)\n\t\t\t.filter(key => !isNaN(Number(key)))\n\t\t\t.map(key => parseInt(key, 10));\n\t}\n\n\tprivate async resetIndex(db: Nedb): Promise<void> {\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tdb.remove({}, {multi: true}, err => {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn reject(err);\n\t\t\t\t}\n\t\t\t\tdb.loadDatabase(err2 => {\n\t\t\t\t\tif (err2) {\n\t\t\t\t\t\treject(err2);\n\t\t\t\t\t}\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tasync reset(): Promise<void> {\n\t\tfor (const type of this.getTypes()) {\n\t\t\tconst db = this.clients[DBObjectType[type]];\n\t\t\tawait this.resetIndex(db.client);\n\t\t}\n\t}\n\n\tprivate async checkIndex(db: Nedb): Promise<void> {\n\t\treturn;\n\t}\n\n\tasync check(): Promise<void> {\n\t\tfor (const type of this.getTypes()) {\n\t\t\tconst db = this.clients[DBObjectType[type]];\n\t\t\tawait this.checkIndex(db.client);\n\t\t}\n\t}\n\n\tgetNewID(): string {\n\t\tthis.sequenceId++;\n\t\treturn this.sequenceId.toString();\n\t}\n\n\tgetDBIndex<T extends DBObject>(type: DBObjectType): DBIndexNedb<T> {\n\t\treturn new DBIndexNedb<T>(type, this.clients[DBObjectType[type]].client, () => this.getNewID());\n\t}\n}\n","module.exports = require(\"nedb\");","import Nedb from 'nedb';\nimport {DBObject} from '../../engine/base/base.model';\nimport {ListResult} from '../../engine/base/list-result';\nimport {DatabaseQuerySortType} from '../../model/jam-types';\nimport {paginate} from '../../utils/paginate';\nimport {DatabaseIndex, DatabaseQuery} from '../db.model';\nimport {DBObjectType} from '../db.types';\n\nfunction regExpEscape(literal: string): string {\n\treturn literal.replace(/[-[\\]{}()*+!<=:?./\\\\^$|#\\s,]/g, '\\\\$&');\n}\n\nexport class DBIndexNedb<T extends DBObject> implements DatabaseIndex<T> {\n\tprotected _index: string;\n\tprotected _type: string;\n\n\tconstructor(public type: DBObjectType, public client: Nedb, private getGlobalNewID: () => string) {\n\t\tthis._type = DBObjectType[type];\n\t\tthis._index = `jam_${DBObjectType[type]}`;\n\t}\n\n\tprivate hit2Obj(hit: T): T {\n\t\tdelete (hit as any)._id;\n\t\treturn hit;\n\t}\n\n\tprivate hits2Objs(hits: Array<T>): Array<T> {\n\t\treturn hits.map(hit => {\n\t\t\treturn this.hit2Obj(hit);\n\t\t});\n\t}\n\n\tasync getNewId(): Promise<string> {\n\t\treturn this.getGlobalNewID();\n\t}\n\n\tprivate translateSortQuery(query: DatabaseQuery): { [name: string]: number } | undefined {\n\t\tif (query.sort) {\n\t\t\tconst result: { [name: string]: number } = {};\n\t\t\tconst sort = query.sort;\n\t\t\tObject.keys(sort).forEach(key => {\n\t\t\t\tresult[key] = sort[key] === DatabaseQuerySortType.ascending ? 1 : -1;\n\t\t\t});\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tprivate translateQuery(query: DatabaseQuery): any {\n\t\tif (query.all) {\n\t\t\treturn {};\n\t\t}\n\t\tlet must: Array<any> = [];\n\t\tif (query.term) {\n\t\t\tconst o = query.term;\n\t\t\tmust = must.concat(\n\t\t\t\tObject.keys(o).map(key => {\n\t\t\t\t\tconst term: any = {};\n\t\t\t\t\tterm[key] = o[key];\n\t\t\t\t\treturn term;\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\tif (query.match) {\n\t\t\tconst o = query.match;\n\t\t\tmust = must.concat(\n\t\t\t\tObject.keys(o).map(key => {\n\t\t\t\t\tconst term: any = {};\n\t\t\t\t\tterm[key] = {$regex: new RegExp(regExpEscape(o[key].toString()), 'i')};\n\t\t\t\t\treturn term;\n\t\t\t\t})\n\t\t\t);\n\n\t\t}\n\t\tif (query.terms) {\n\t\t\tconst o = query.terms;\n\t\t\tmust = must.concat(\n\t\t\t\tObject.keys(o).map(key => {\n\t\t\t\t\tconst term: any = {};\n\t\t\t\t\tterm[key] = {$in: o[key]};\n\t\t\t\t\treturn term;\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\tif (query.startsWith) {\n\t\t\tconst o = query.startsWith;\n\t\t\tmust = must.concat(\n\t\t\t\tObject.keys(o).map((key: string): any => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t$where(): boolean {\n\t\t\t\t\t\t\treturn this[key].startsWith(o[key]);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\tif (query.startsWiths) {\n\t\t\tconst o = query.startsWiths;\n\t\t\tmust = must.concat(\n\t\t\t\tObject.keys(o).map((key: string): any => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t$where(): boolean {\n\t\t\t\t\t\t\treturn !!o[key].find(entry => this[key].startsWith(entry));\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\tif (query.range) {\n\t\t\tconst o = query.range;\n\t\t\tObject.keys(o).forEach(key => {\n\t\t\t\tconst vals = o[key];\n\t\t\t\tif (vals.gte !== undefined) {\n\t\t\t\t\tconst term: any = {};\n\t\t\t\t\tterm[key] = {$gte: vals.gte};\n\t\t\t\t\tmust.push(term);\n\t\t\t\t}\n\t\t\t\tif (vals.lte !== undefined) {\n\t\t\t\t\tconst term: any = {};\n\t\t\t\t\tterm[key] = {$lte: vals.lte};\n\t\t\t\t\tmust.push(term);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (query.notNull) {\n\t\t\tconst o = query.notNull;\n\t\t\tmust = must.concat(o.map(key => {\n\t\t\t\tconst term: any = {};\n\t\t\t\tterm[key] = {$exists: true};\n\t\t\t\treturn term;\n\t\t\t}));\n\t\t}\n\t\treturn {$and: must};\n\t}\n\n\tasync add(body: T): Promise<string> {\n\t\tif (!body.id || body.id.length === 0) {\n\t\t\tbody.id = await this.getNewId();\n\t\t}\n\t\treturn new Promise<string>((resolve, reject) => {\n\t\t\tthis.client.insert(body, err => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(body.id);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tasync bulk(bodies: Array<T>): Promise<void> {\n\t\tfor (const body of bodies) {\n\t\t\tawait this.add(body);\n\t\t}\n\t}\n\n\tasync replace(id: string, body: T): Promise<void> {\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tthis.client.update({id}, body, {}, (err, numReplaced) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else if (numReplaced !== 1) {\n\t\t\t\t\treject(Error(`Could not find ${this._type} doc with id ${id}`));\n\t\t\t\t} else {\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tasync upsert(id: string, body: T): Promise<void> {\n\t\tif (!id || id.length === 0) {\n\t\t\tawait this.add(body);\n\t\t\treturn;\n\t\t}\n\t\tawait this.replace(id, body);\n\t}\n\n\tasync remove(id: string | Array<string>): Promise<number> {\n\t\tconst ids = Array.isArray(id) ? id : [id];\n\t\tif (ids.length === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn new Promise<number>((resolve, reject) => {\n\t\t\tthis.client.remove({id: {$in: ids}}, {multi: true}, (err, count) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else if (count !== ids.length) {\n\t\t\t\t\treject(Error(`Found nr of items ${count} does not match nr. of ids ${ids.length}`));\n\t\t\t\t} else {\n\t\t\t\t\tresolve(count);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tasync removeByQuery(query: DatabaseQuery): Promise<number> {\n\t\treturn new Promise<number>((resolve, reject) => {\n\t\t\tthis.client.remove(this.translateQuery(query), {multi: true}, (err, count) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(count);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tasync byId(id: string): Promise<T | undefined> {\n\t\tif (this.type === undefined) {\n\t\t\treturn this.queryOne({term: {id}});\n\t\t}\n\t\treturn new Promise<T>((resolve, reject) => {\n\t\t\tthis.client.find<T>({id}, (err, docs) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else if (docs.length === 0) {\n\t\t\t\t\tresolve();\n\t\t\t\t} else {\n\t\t\t\t\tresolve(this.hit2Obj(docs[0]));\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tasync byIds(ids: Array<string>): Promise<Array<T>> {\n\t\tif (ids.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\treturn new Promise<Array<T>>((resolve, reject) => {\n\t\t\tthis.client.find<T>({id: {$in: ids}}, (err, docs) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(this.hits2Objs(docs));\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tasync query(query: DatabaseQuery): Promise<ListResult<T>> {\n\t\tlet dbquery = this.client.find<T>(this.translateQuery(query));\n\t\tconst sort = this.translateSortQuery(query);\n\t\tif (sort) {\n\t\t\tdbquery = dbquery.sort(sort);\n\t\t}\n\t\treturn new Promise<ListResult<T>>((resolve, reject) => {\n\t\t\tdbquery.exec((err, docs) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tconst list = paginate(docs, query.amount, query.offset);\n\t\t\t\t\tresolve({items: this.hits2Objs(list.items), offset: list.offset, amount: list.amount, total: list.total});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tasync queryOne(query: DatabaseQuery): Promise<T | undefined> {\n\t\treturn new Promise<T>((resolve, reject) => {\n\t\t\tthis.client.find<T>(this.translateQuery(query)).limit(1).exec((err, docs) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else if (docs.length === 0) {\n\t\t\t\t\tresolve();\n\t\t\t\t} else {\n\t\t\t\t\tresolve(this.hit2Obj(docs[0]));\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate prepareFindCursor(query: DatabaseQuery): Nedb.Cursor<T> {\n\t\tlet dbquery = this.client.find<T>(this.translateQuery(query));\n\t\tconst sort = this.translateSortQuery(query);\n\t\tif (sort) {\n\t\t\tdbquery = dbquery.sort(sort);\n\t\t}\n\t\tif (query.offset) {\n\t\t\tdbquery = dbquery.skip(query.offset);\n\t\t}\n\t\tif (query.amount) {\n\t\t\tdbquery = dbquery.limit(query.amount);\n\t\t}\n\t\treturn dbquery;\n\t}\n\n\tasync iterate(query: DatabaseQuery, onItems: (items: Array<T>) => Promise<void>): Promise<void> {\n\t\tconst dbquery = this.prepareFindCursor(query);\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tdbquery.exec((err, docs) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tonItems(this.hits2Objs(docs)).then(resolve).catch(reject);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tasync queryIds(query: DatabaseQuery): Promise<Array<string>> {\n\t\tconst dbquery = this.prepareFindCursor(query);\n\t\treturn new Promise<Array<string>>((resolve, reject) => {\n\t\t\tdbquery.exec((err, docs) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(docs.map(o => o.id));\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate getDotFieldValues(field: string, o: T): Array<string> {\n\t\tconst result: Array<any> = [];\n\n\t\tconst getFieldValueR = (fields: Array<string>, obj: any): void => {\n\t\t\tconst sub = obj[fields[0]];\n\t\t\tif (sub === undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (Array.isArray(sub)) {\n\t\t\t\tif (fields.length === 1) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tsub.forEach(child => {\n\t\t\t\t\tgetFieldValueR(fields.slice(1), child);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (fields.length === 1) {\n\t\t\t\t\tresult.push(sub.toString());\n\t\t\t\t} else if (typeof sub === 'object') {\n\t\t\t\t\tgetFieldValueR(fields.slice(1), sub);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tgetFieldValueR(field.split('.'), o);\n\t\treturn result;\n\t}\n\n\tprivate collectDistinctValues(field: string, docs: Array<T>): Array<string> {\n\t\tconst list: Array<string> = [];\n\t\tdocs.forEach(doc => {\n\t\t\tconst vals = this.getDotFieldValues(field, doc);\n\t\t\tvals.forEach(val => {\n\t\t\t\tif (!list.includes(val)) {\n\t\t\t\t\tlist.push(val);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\treturn list;\n\t}\n\n\tasync aggregate(query: DatabaseQuery, field: string): Promise<number> {\n\t\tconst dbquery = this.prepareFindCursor(query);\n\t\treturn new Promise<number>((resolve, reject) => {\n\t\t\tdbquery.exec((err, docs) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(this.collectDistinctValues(field, docs).length);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tasync count(query: DatabaseQuery): Promise<number> {\n\t\treturn new Promise<number>((resolve, reject) => {\n\t\t\tthis.client.count(this.translateQuery(query), (err, count) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(count);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tasync distinct(query: DatabaseQuery, field: string): Promise<Array<string>> {\n\t\treturn new Promise<Array<string>>((resolve, reject) => {\n\t\t\tthis.client.find<T>(this.translateQuery(query), (err, docs) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(this.collectDistinctValues(field, docs));\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n}\n","import fse from 'fs-extra';\nimport path from 'path';\nimport {Config} from '../config/config';\nimport {ThirdPartyConfig} from '../config/thirdparty.config';\nimport {DBObjectType} from '../db/db.types';\nimport {Jam} from '../model/jam-rest-data';\nimport {RootScanStrategy} from '../model/jam-types';\nimport {AudioModule} from '../modules/audio/audio.module';\nimport {ImageModule} from '../modules/image/image.module';\nimport {pathDeleteIfExists} from '../utils/fs-utils';\nimport {hashAndSaltSHA512} from '../utils/hash';\nimport {logger} from '../utils/logger';\nimport {AlbumService} from './album/album.service';\nimport {ArtistService} from './artist/artist.service';\nimport {BookmarkService} from './bookmark/bookmark.service';\nimport {ChatService} from './chat/chat.service';\nimport {DownloadService} from './download/download.service';\nimport {EpisodeService} from './episode/episode.service';\nimport {FolderService} from './folder/folder.service';\nimport {GenreService} from './genre/genre.service';\nimport {ImageService} from './image/image.service';\nimport {IndexService} from './index/index.service';\nimport {IoService} from './io/io.service';\nimport {MetaDataService} from './metadata/metadata.service';\nimport {NowPlayingService} from './nowplaying/nowplaying.service';\nimport {PlaylistService} from './playlist/playlist.service';\nimport {PlayQueueService} from './playqueue/playqueue.service';\nimport {PodcastService} from './podcast/podcast.service';\nimport {RadioService} from './radio/radio.service';\nimport {Root} from './root/root.model';\nimport {RootService} from './root/root.service';\nimport {SeriesService} from './series/series.service';\nimport {SessionService} from './session/session.service';\nimport {SettingsService} from './settings/settings.service';\nimport {StateService} from './state/state.service';\nimport {StatsService} from './stats/stats.service';\nimport {Store} from './store/store';\nimport {StreamService} from './stream/stream.service';\nimport {TrackService} from './track/track.service';\nimport {User} from './user/user.model';\nimport {UserService} from './user/user.service';\nimport {WaveformService} from './waveform/waveform.service';\nimport {WorkerService} from './worker/worker.service';\n\nconst log = logger('Engine');\n\nexport class Engine {\n\tpublic ioService: IoService;\n\tpublic audioModule: AudioModule;\n\tpublic imageModule: ImageModule;\n\tpublic waveformService: WaveformService;\n\tpublic metaDataService: MetaDataService;\n\tpublic indexService: IndexService;\n\tpublic workerService: WorkerService;\n\tpublic userService: UserService;\n\tpublic rootService: RootService;\n\tpublic chatService: ChatService;\n\tpublic genreService: GenreService;\n\tpublic playQueueService: PlayQueueService;\n\tpublic podcastService: PodcastService;\n\tpublic episodeService: EpisodeService;\n\tpublic playlistService: PlaylistService;\n\tpublic nowPlayingService: NowPlayingService;\n\tpublic streamService: StreamService;\n\tpublic bookmarkService: BookmarkService;\n\tpublic stateService: StateService;\n\tpublic imageService: ImageService;\n\tpublic downloadService: DownloadService;\n\tpublic radioService: RadioService;\n\tpublic folderService: FolderService;\n\tpublic trackService: TrackService;\n\tpublic artistService: ArtistService;\n\tpublic albumService: AlbumService;\n\tpublic statsService: StatsService;\n\tpublic settingsService: SettingsService;\n\tpublic sessionService: SessionService;\n\tpublic seriesService: SeriesService;\n\n\tconstructor(public config: Config, public store: Store, public version: string, modules?: { image: ImageModule; audio: AudioModule }) {\n\t\tthis.imageModule = modules && modules.image ? modules.image : new ImageModule(config.getDataPath(['cache', 'images']));\n\t\tthis.audioModule = modules && modules.audio ? modules.audio : new AudioModule(\n\t\t\tconfig.getDataPath(['cache', 'waveforms']),\n\t\t\tconfig.getDataPath(['cache', 'transcode']),\n\t\t\tThirdPartyConfig, this.imageModule\n\t\t);\n\t\tthis.chatService = new ChatService();\n\t\tthis.waveformService = new WaveformService(this.audioModule);\n\t\tthis.streamService = new StreamService(this.audioModule);\n\t\tthis.stateService = new StateService(this.store.stateStore);\n\t\tthis.folderService = new FolderService(this.store.folderStore, this.store.trackStore, this.stateService, this.imageModule);\n\t\tthis.trackService = new TrackService(this.store.trackStore, this.folderService, this.audioModule, this.imageModule, this.stateService);\n\t\tthis.albumService = new AlbumService(this.store.albumStore, this.trackService, this.folderService, this.stateService);\n\t\tthis.indexService = new IndexService(this.store.artistStore, this.store.albumStore, this.store.folderStore, this.store.trackStore, this.store.seriesStore);\n\t\tthis.workerService = new WorkerService(this.store, this.audioModule, this.imageModule);\n\t\tthis.settingsService = new SettingsService(store.settingsStore, this.chatService, this.indexService, this.workerService, this.audioModule, version);\n\t\tthis.artistService = new ArtistService(this.store.artistStore, this.store.trackStore, this.folderService, this.stateService);\n\t\tthis.userService = new UserService(this.config.getDataPath(['images']), this.store.userStore, this.store.stateStore, this.store.playlistStore,\n\t\t\tthis.store.bookmarkStore, this.store.playQueueStore, this.store.sessionStore, this.imageModule);\n\t\tthis.genreService = new GenreService(this.store.trackStore);\n\t\tthis.statsService = new StatsService(this.store);\n\t\tthis.ioService = new IoService(this.store.rootStore, this.workerService, async () => {\n\t\t\tthis.refresh().catch(e => {\n\t\t\t\tlog.error('Error on Refresh Indexes & Stats', e);\n\t\t\t});\n\t\t});\n\t\tthis.downloadService = new DownloadService(this.store.trackStore, this.store.episodeStore);\n\t\tthis.nowPlayingService = new NowPlayingService(this.stateService);\n\t\tthis.playlistService = new PlaylistService(this.store.playlistStore, this.store.trackStore, this.stateService);\n\t\tthis.playQueueService = new PlayQueueService(this.store.playQueueStore);\n\t\tthis.bookmarkService = new BookmarkService(this.store.bookmarkStore);\n\t\tthis.episodeService = new EpisodeService(config.getDataPath(['podcasts']), this.store.episodeStore, this.stateService, this.audioModule, this.imageModule);\n\t\tthis.podcastService = new PodcastService(config.getDataPath(['podcasts']), this.store.podcastStore, this.episodeService, this.imageModule, this.stateService);\n\t\tthis.seriesService = new SeriesService(this.store.seriesStore, this.store.trackStore, this.folderService, this.stateService);\n\t\tthis.imageService = new ImageService(this.imageModule, this.trackService, this.folderService, this.artistService,\n\t\t\tthis.albumService, this.userService, this.podcastService, this.episodeService, this.seriesService);\n\t\tthis.metaDataService = new MetaDataService(this.store.metaStore, this.store.folderStore, this.store.trackStore, this.store.albumStore, this.store.artistStore, this.audioModule);\n\t\tthis.rootService = new RootService(this.store.rootStore);\n\t\tthis.radioService = new RadioService(this.store.radioStore);\n\t\tthis.sessionService = new SessionService(this.store.sessionStore);\n\t}\n\n\tasync refresh(): Promise<void> {\n\t\tlog.info('Refresh Indexes & Stats');\n\t\tawait this.indexService.buildDefaultIndexes();\n\t\tawait this.genreService.refresh();\n\t\tawait this.statsService.refresh();\n\t\tawait this.metaDataService.cleanUp();\n\t\tawait this.sessionService.clearExpired();\n\t}\n\n\tprivate async buildAdminUser(admin: { name: string; pass: string; mail: string }): Promise<void> {\n\t\tconst pw = hashAndSaltSHA512(admin.pass || '');\n\t\tconst user: User = {\n\t\t\tid: '',\n\t\t\tname: admin.name,\n\t\t\tsalt: pw.salt,\n\t\t\thash: pw.hash,\n\t\t\temail: admin.mail || '',\n\t\t\ttype: DBObjectType.user,\n\t\t\tscrobblingEnabled: true,\n\t\t\tcreated: Date.now(),\n\t\t\troles: {stream: true, upload: true, admin: true, podcast: true}\n\t\t};\n\t\tawait this.userService.create(user);\n\t}\n\n\tprivate async buildRoots(roots: Array<{ name: string; path: string; strategy?: Jam.RootScanStrategy }>): Promise<void> {\n\t\tfor (const first of roots) {\n\t\t\tconst root: Root = {\n\t\t\t\tid: '',\n\t\t\t\tcreated: Date.now(),\n\t\t\t\ttype: DBObjectType.root,\n\t\t\t\tname: first.name,\n\t\t\t\tpath: first.path,\n\t\t\t\tstrategy: first.strategy as RootScanStrategy || RootScanStrategy.auto\n\t\t\t};\n\t\t\tawait this.store.rootStore.add(root);\n\t\t}\n\t}\n\n\tprivate async checkFirstStart(): Promise<void> {\n\t\tif (!this.config.firstStart) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.config.firstStart.adminUser) {\n\t\t\tconst count = await this.store.userStore.count();\n\t\t\tif (count === 0) {\n\t\t\t\tawait this.buildAdminUser(this.config.firstStart.adminUser);\n\t\t\t}\n\t\t}\n\t\tif (this.config.firstStart.roots) {\n\t\t\tconst count = await this.store.rootStore.count();\n\t\t\tif (count === 0) {\n\t\t\t\tawait this.buildRoots(this.config.firstStart.roots);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate resolveCachePaths(): Array<string> {\n\t\treturn [\n\t\t\tpath.resolve(this.config.paths.data, 'cache', 'waveforms'),\n\t\t\tpath.resolve(this.config.paths.data, 'cache', 'uploads'),\n\t\t\tpath.resolve(this.config.paths.data, 'cache', 'images'),\n\t\t\tpath.resolve(this.config.paths.data, 'cache', 'transcode'),\n\t\t\tpath.resolve(this.config.paths.data, 'images'),\n\t\t\tpath.resolve(this.config.paths.data, 'podcasts')\n\t\t];\n\t}\n\n\tprivate async checkDataPaths(): Promise<void> {\n\t\tawait fse.ensureDir(path.resolve(this.config.paths.data));\n\t\tconst paths = this.resolveCachePaths();\n\t\tfor (const p of paths) {\n\t\t\tawait fse.ensureDir(p);\n\t\t}\n\t}\n\n\tasync start(): Promise<void> {\n\t\t// check paths\n\t\tawait this.checkDataPaths();\n\t\t// open store\n\t\tawait this.store.open();\n\t\t// load settings\n\t\tawait this.settingsService.loadSettings();\n\t\t// first start?\n\t\tawait this.checkFirstStart();\n\t}\n\n\tasync stop(): Promise<void> {\n\t\tawait this.store.close();\n\t}\n\n\tasync clearLocalFiles(): Promise<void> {\n\t\tconst paths = this.resolveCachePaths();\n\t\tfor (const p of paths) {\n\t\t\tawait pathDeleteIfExists(p);\n\t\t}\n\t}\n}\n","/*\n\tThird Party Web Services\n */\n\nimport {JAMSERVE_VERSION} from '../version';\n\nexport interface ThirdpartyToolsConfig {\n\tacoustid: {\n\t\tapiKey: string;\n\t\tuserAgent: string;\n\t};\n\tlastfm: {\n\t\tapiKey: string;\n\t\tuserAgent: string;\n\t};\n\tmusicbrainz: {\n\t\tuserAgent: string;\n\t};\n\tacousticbrainz: {\n\t\tuserAgent: string;\n\t};\n\tcoverartarchive: {\n\t\tuserAgent: string;\n\t};\n\tchartlyrics: {\n\t\tuserAgent: string;\n\t};\n\twikipedia: {\n\t\tuserAgent: string;\n\t};\n}\n\nexport const userAgent = `JamServe/${JAMSERVE_VERSION}`;\n\nexport const ThirdPartyConfig: ThirdpartyToolsConfig = {\n\t/*\n\t\tAcoustid\n\t\thttps://acoustid.org/\n\t\taudio identification via fingerprinting\n\t */\n\tacoustid: {apiKey: 'bLwTKyNczi', userAgent},\n\t/*\n\t\tLastFM\n\t\thttps://www.last.fm/api\n\t\tmusic database\n\t */\n\tlastfm: {apiKey: 'ead198fb293eefea29e8a5b8f0908e55', userAgent},\n\t/*\n\t\tMusicBrainz\n\t\thttps://musicbrainz.org/\n\t\topen music encyclopedia\n\t */\n\tmusicbrainz: {userAgent: `${userAgent} ( jamserve@protonmail.com )`},\n\t/*\n\t\tAcousticBrainz\n\t\thttps://acousticbrainz.org/\n\t\tcrowd sourced acoustic information\n \t*/\n\tacousticbrainz: {userAgent: `${userAgent} ( jamserve@protonmail.com )`},\n\t/*\n\t\tCoverArtArchive\n\t\thttps://coverartarchive.org/\n\t\tcover art from Internet Archive (archive.org) via musicbrainz ids\n \t*/\n\tcoverartarchive: {userAgent: `${userAgent} ( jamserve@protonmail.com )`},\n\t/*\n\t\tWikipedia\n\t\thttps://en.wikipedia.org/api/rest_v1/#/\n \t*/\n\twikipedia: {userAgent: `${userAgent} ( jamserve@protonmail.com )`},\n\t/*\n\t\tChart Lyrics\n\t\thttp://www.chartlyrics.com/\n\t\tlyrics database\n\t */\n\tchartlyrics: {userAgent}\n};\n","import fse from 'fs-extra';\nimport Jimp from 'jimp';\nimport mimeTypes from 'mime-types';\nimport path from 'path';\nimport sharp from 'sharp';\nimport {ApiBinaryResult} from '../../typings';\nimport {downloadFile} from '../../utils/download';\nimport {SupportedWriteImageFormat} from '../../utils/filetype';\nimport {fileDeleteIfExists, fileSuffix} from '../../utils/fs-utils';\nimport {IDFolderCache} from '../../utils/id-file-cache';\nimport {logger} from '../../utils/logger';\nimport {randomString} from '../../utils/random';\nimport {AvatarGen} from './image.avatar';\n\nexport interface ImageInfo {\n\twidth: number;\n\theight: number;\n\tcolorDepth: number;\n\tcolors: number;\n\tformat: string;\n}\n\ntype JimpFont = any;\n\nconst log = logger('Images');\nsharp.cache(false);\nsharp.simd(false);\n\n/**\n * Handles image access/reading/writing/transforming\n */\n\nexport class ImageModule {\n\tprivate format = 'png';\n\tprivate font: JimpFont | undefined;\n\tprivate cache: IDFolderCache<{ size?: number; format?: string }>;\n\tprivate readonly avatarPartsLocation: string;\n\n\tconstructor(private imageCachePath: string, avatarPartsLocation?: string) {\n\t\tthis.avatarPartsLocation = avatarPartsLocation || path.join(__dirname, 'static', 'avatar');\n\t\tthis.cache = new IDFolderCache<{ size?: number; format?: string }>(imageCachePath, 'thumb', (params: { size?: number; format?: string }) => {\n\t\t\treturn `${params.size !== undefined ? `-${params.size}` : ''}.${params.format || this.format}`;\n\t\t});\n\t}\n\n\tasync storeImage(filepath: string, name: string, imageUrl: string): Promise<string> {\n\t\tlog.debug('Requesting image', imageUrl);\n\t\tconst imageext = path.extname(imageUrl).split('?')[0].trim().toLowerCase();\n\t\tif (imageext.length === 0) {\n\t\t\treturn Promise.reject(Error('Invalid Image Url'));\n\t\t}\n\t\tlet filename = name + imageext;\n\t\tlet nr = 2;\n\t\twhile (await fse.pathExists(path.join(filepath, filename))) {\n\t\t\tfilename = `${name}-${nr}${imageext}`;\n\t\t\tnr++;\n\t\t}\n\t\tawait downloadFile(imageUrl, path.join(filepath, filename));\n\t\tlog.info('image downloaded', filename);\n\t\treturn filename;\n\t}\n\n\tasync paint(text: string, size: number | undefined, format: string | undefined): Promise<ApiBinaryResult> {\n\t\tsize = size || 320;\n\t\tconst image = new Jimp(360, 360, '#282828');\n\t\tif (!this.font) {\n\t\t\tthis.font = await Jimp.loadFont(Jimp.FONT_SANS_32_WHITE);\n\t\t}\n\t\timage.print(this.font, 10, 10, {\n\t\t\ttext,\n\t\t\talignmentX: Jimp.HORIZONTAL_ALIGN_CENTER,\n\t\t\talignmentY: Jimp.VERTICAL_ALIGN_MIDDLE\n\t\t}, 340, 340);\n\t\timage.resize(size, size);\n\t\tconst mime = mimeTypes.lookup(format ? format : this.format);\n\t\tif (!mime) {\n\t\t\treturn Promise.reject('Unknown Image Format Request');\n\t\t}\n\t\tconst buffer = await image.getBufferAsync(mime);\n\t\treturn {buffer: {buffer, contentType: mime}};\n\t}\n\n\tprivate async getImage(filename: string, size: number | undefined, name: string): Promise<ApiBinaryResult> {\n\t\tif (!size) {\n\t\t\treturn {file: {filename, name}};\n\t\t}\n\t\tlet fileFormat = fileSuffix(filename);\n\t\tif (!SupportedWriteImageFormat.includes(fileFormat)) {\n\t\t\tfileFormat = this.format;\n\t\t}\n\t\treturn this.getImageAs(filename, fileFormat, size, name);\n\t}\n\n\tprivate async getImageAs(filename: string, format: string, size: number | undefined, name: string): Promise<ApiBinaryResult> {\n\t\tconst fileFormat = fileSuffix(filename);\n\t\tconst exists = await fse.pathExists(filename);\n\t\tif (!exists) {\n\t\t\treturn Promise.reject(Error('File not found'));\n\t\t}\n\t\tif (size || (fileFormat !== format)) {\n\t\t\tconst mime = mimeTypes.lookup(format);\n\t\t\tif (!mime) {\n\t\t\t\treturn Promise.reject(`Unknown Image Format Request: ${format} ${filename}`);\n\t\t\t}\n\t\t\tconst sharpy = sharp(filename, {failOnError: false});\n\t\t\tif (size) {\n\t\t\t\tsharpy.resize(size, size, {fit: sharp.fit.cover, position: sharp.strategy.entropy});\n\t\t\t}\n\t\t\tsharpy.toFormat(format);\n\t\t\tconst buffer = await sharpy.toBuffer();\n\t\t\treturn {buffer: {buffer, contentType: mime}};\n\t\t}\n\t\treturn {file: {filename, name}};\n\t}\n\n\tprivate async getImageBufferAs(buffer: Buffer, format: string | undefined, size: number | undefined): Promise<ApiBinaryResult> {\n\t\tconst info = await this.getImageInfoBuffer(buffer);\n\t\tformat = format || info.format;\n\t\tconst mime = mimeTypes.lookup(format);\n\t\tif (!mime) {\n\t\t\treturn Promise.reject(`Unknown Image Format Request: ${format}`);\n\t\t}\n\t\tif (size) {\n\t\t\treturn {\n\t\t\t\tbuffer: {\n\t\t\t\t\tbuffer: await sharp(buffer, {failOnError: false})\n\t\t\t\t\t\t.resize(size, size,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfit: sharp.fit.cover // ,position: sharp.strategy.entropy\n\t\t\t\t\t\t\t}).toFormat(format)\n\t\t\t\t\t\t.toBuffer(),\n\t\t\t\t\tcontentType: mime\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\tif (format && info.format !== format) {\n\t\t\treturn {\n\t\t\t\tbuffer: {\n\t\t\t\t\tbuffer: await sharp(buffer, {failOnError: false})\n\t\t\t\t\t\t.toFormat(format)\n\t\t\t\t\t\t.toBuffer(),\n\t\t\t\t\tcontentType: mime\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\tbuffer: {\n\t\t\t\tbuffer,\n\t\t\t\tcontentType: mimeTypes.lookup(info.format) || 'image'\n\t\t\t}\n\t\t};\n\t}\n\n\tasync getExisting(id: string, size: number | undefined, format?: string): Promise<ApiBinaryResult | undefined> {\n\t\treturn this.cache.getExisting(id, {size, format});\n\t}\n\n\tasync getBuffer(id: string, buffer: Buffer, size: number | undefined, format?: string): Promise<ApiBinaryResult> {\n\t\tif (format && !SupportedWriteImageFormat.includes(format)) {\n\t\t\treturn Promise.reject(Error('Invalid Format'));\n\t\t}\n\t\treturn this.cache.get(id, {size, format}, async cachefile => {\n\t\t\tconst result = await this.getImageBufferAs(buffer, format, size);\n\t\t\tif (result.buffer) {\n\t\t\t\tlog.debug('Writing image cache file', cachefile);\n\t\t\t\tawait fse.writeFile(cachefile, result.buffer.buffer);\n\t\t\t} else {\n\t\t\t\treturn Promise.reject(Error('Error while writing image cache file'));\n\t\t\t}\n\t\t});\n\t}\n\n\tasync get(id: string, filename: string, size: number | undefined, format?: string): Promise<ApiBinaryResult> {\n\t\tif (!filename) {\n\t\t\treturn Promise.reject(Error('Invalid Path'));\n\t\t}\n\t\tif (format && !SupportedWriteImageFormat.includes(format)) {\n\t\t\treturn Promise.reject(Error('Invalid Format'));\n\t\t}\n\t\tif (format && format === this.format) {\n\t\t\tformat = undefined;\n\t\t}\n\t\tif (format || size) {\n\t\t\treturn this.cache.get(id, {size, format}, async cachefile => {\n\t\t\t\tconst name = path.basename(cachefile);\n\t\t\t\tconst result = format ?\n\t\t\t\t\tawait this.getImageAs(filename, format, size, name) :\n\t\t\t\t\tawait this.getImage(filename, size, name);\n\t\t\t\tif (result.buffer) {\n\t\t\t\t\tlog.debug('Writing image cache file', cachefile);\n\t\t\t\t\tawait fse.writeFile(cachefile, result.buffer.buffer);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this.getImage(filename, size, `${id}.${this.format}`);\n\t}\n\n\t// async resizeImage(filename: string, destination: string, size: number): Promise<void> {\n\t// \tawait sharp(filename)\n\t// \t\t.resize(size, size, {fit: sharp.fit.cover})\n\t// \t\t.toFile(destination);\n\t// }\n\n\tasync resizeImagePNG(filename: string, destination: string, size: number): Promise<void> {\n\t\tawait sharp(filename, {failOnError: false})\n\t\t\t.resize(size, size, {fit: sharp.fit.cover})\n\t\t\t.png()\n\t\t\t.toFile(destination);\n\t}\n\n\tasync clearImageCacheByIDs(ids: Array<string>): Promise<void> {\n\t\tawait this.cache.removeByIDs(ids);\n\t}\n\n\tasync createAvatar(filename: string, destination: string): Promise<void> {\n\t\tif ((!filename)) {\n\t\t\treturn Promise.reject(Error('Invalid Path'));\n\t\t}\n\t\tconst exists = await fse.pathExists(filename);\n\t\tif (!exists) {\n\t\t\treturn Promise.reject(Error('File not found'));\n\t\t}\n\t\tconst tempFile = `${filename}.new${randomString(8)}.png`;\n\t\tawait this.resizeImagePNG(filename, tempFile, 300);\n\t\tawait fileDeleteIfExists(destination);\n\t\tawait fse.rename(tempFile, destination);\n\t}\n\n\tasync generateAvatar(seed: string, destination: string): Promise<void> {\n\t\tconst avatarGenerator = new AvatarGen(this.avatarPartsLocation);\n\t\tconst avatar = await avatarGenerator.generate(seed);\n\t\tawait fse.writeFile(destination, avatar);\n\t}\n\n\tprivate async formatImageInfo(sharpy: sharp.Sharp): Promise<ImageInfo> {\n\t\ttry {\n\t\t\tconst metadata = await sharpy.metadata();\n\t\t\treturn {\n\t\t\t\twidth: metadata.width || 0,\n\t\t\t\theight: metadata.height || 0,\n\t\t\t\tformat: metadata.format || '',\n\t\t\t\tcolorDepth: metadata.density || 0,\n\t\t\t\tcolors: 0\n\t\t\t};\n\t\t} catch (e) {\n\t\t\treturn {width: 0, height: 0, format: 'invalid', colorDepth: 0, colors: 0};\n\t\t}\n\t}\n\n\tasync getImageInfo(filename: string): Promise<ImageInfo> {\n\t\treturn this.formatImageInfo(sharp(filename, {failOnError: false}));\n\t}\n\n\tasync getImageInfoBuffer(bin: Buffer): Promise<ImageInfo> {\n\t\treturn this.formatImageInfo(sharp(bin, {failOnError: false}));\n\t}\n}\n","module.exports = require(\"jimp\");","module.exports = require(\"mime-types\");","module.exports = require(\"http\");","import {AvatarGenerator, defaultAvatarSettings} from './avatar-generator/avatar-generator';\n\nexport class AvatarGen {\n\tavatar: AvatarGenerator;\n\n\tconstructor(avatarPartsLocation?: string) {\n\t\tif (avatarPartsLocation) {\n\t\t\tdefaultAvatarSettings.partsLocation = avatarPartsLocation;\n\t\t}\n\t\tthis.avatar = new AvatarGenerator(defaultAvatarSettings);\n\t}\n\n\tpublic async generate(id: string): Promise<Buffer> {\n\t\tconst image = await this.avatar.generate(id, 'parts');\n\t\treturn image.png().toBuffer();\n\t}\n}\n","/***\n * avatar-generator\n * https://github.com/arusanov/avatar-generator\n *\n * Copyright (c) 2018 arusanov\n * Licensed under the MIT license.\n */\n\n/* This is included because jamserve uses a newer version of sharp */\n\nimport fs from 'fs';\nimport path from 'path';\nimport seedrandom from 'seedrandom';\nimport sharp from 'sharp';\n\nexport type AvatarPart =\n\t| 'background'\n\t| 'face'\n\t| 'clothes'\n\t| 'head'\n\t| 'hair'\n\t| 'eye'\n\t| 'mouth';\n\nexport interface AvatarGenearatorSettings {\n\tparts: Array<AvatarPart>;\n\timageExtension: string;\n\tpartsLocation: string;\n}\n\nexport const defaultAvatarSettings: AvatarGenearatorSettings = {\n\tparts: ['background', 'face', 'clothes', 'head', 'hair', 'eye', 'mouth'],\n\tpartsLocation: path.join(__dirname),\n\timageExtension: '.png'\n};\n\ntype PartsMap = { [key in AvatarPart]: Array<string> };\n\ninterface VariantsMap {\n\t[key: string]: PartsMap;\n}\n\nexport class AvatarGenerator {\n\tprivate readonly _variants: VariantsMap;\n\tprivate _parts: Array<AvatarPart>;\n\n\tconstructor(settings: Partial<AvatarGenearatorSettings> = {}) {\n\t\tconst cfg = {\n\t\t\t...defaultAvatarSettings,\n\t\t\t...settings\n\t\t};\n\t\tthis._variants = AvatarGenerator.BuildVariantsMap(cfg);\n\t\tthis._parts = cfg.parts;\n\t}\n\n\tget variants(): Array<string> {\n\t\treturn Object.keys(this._variants);\n\t}\n\n\tprivate static BuildVariantsMap({parts, partsLocation, imageExtension}: AvatarGenearatorSettings): VariantsMap {\n\t\tconst fileRegex = new RegExp(`(${parts.join('|')})(\\\\d+)${imageExtension}`);\n\t\tconst discriminators = fs\n\t\t\t.readdirSync(partsLocation)\n\t\t\t.filter(partsDir =>\n\t\t\t\tfs.statSync(path.join(partsLocation, partsDir)).isDirectory()\n\t\t\t);\n\n\t\treturn discriminators.reduce(\n\t\t\t(variants, discriminator) => {\n\t\t\t\tconst dir = path.join(partsLocation, discriminator);\n\t\t\t\tvariants[discriminator] = fs.readdirSync(dir).reduce((ps: PartsMap, fileName: string) => {\n\t\t\t\t\t\tconst match = fileRegex.exec(fileName);\n\t\t\t\t\t\tif (match) {\n\t\t\t\t\t\t\tconst part = match[1] as AvatarPart;\n\t\t\t\t\t\t\tif (!ps[part]) {\n\t\t\t\t\t\t\t\tps[part] = [];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tps[part][Number(match[2])] = path.join(dir, fileName);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ps;\n\t\t\t\t\t},\n\t\t\t\t\t{} as PartsMap\n\t\t\t\t);\n\t\t\t\treturn variants;\n\t\t\t},\n\t\t\t{} as VariantsMap\n\t\t);\n\t}\n\n\tprivate getParts(id: string, variant: string): Array<string> {\n\t\tconst variantParts = this._variants[variant];\n\t\tif (!variantParts) {\n\t\t\tthrow new Error(\n\t\t\t\t`variant '${variant}' is not supported. Supported variants: ${Object.keys(\n\t\t\t\t\tthis._variants\n\t\t\t\t)}`\n\t\t\t);\n\t\t}\n\t\tconst rng = seedrandom(id);\n\t\treturn this._parts\n\t\t\t.map(\n\t\t\t\t(partName: AvatarPart): string => {\n\t\t\t\t\tconst partVariants = variantParts[partName];\n\t\t\t\t\treturn (\n\t\t\t\t\t\tpartVariants &&\n\t\t\t\t\t\tpartVariants[Math.floor(rng() * partVariants.length)]\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t)\n\t\t\t.filter(Boolean);\n\t}\n\n\tpublic async generate(id: string, variant: string): Promise<sharp.Sharp> {\n\t\tconst parts = this.getParts(id, variant);\n\t\tif (!parts.length) {\n\t\t\tthrow new Error(`variant '${variant}'does not contain any parts`);\n\t\t}\n\t\tconst {width, height} = await sharp(parts[0]).metadata();\n\t\tif (width === undefined || height === undefined) {\n\t\t\tthrow new Error(`Invalid part file found`);\n\t\t}\n\t\tconst options = {\n\t\t\traw: {\n\t\t\t\twidth,\n\t\t\t\theight,\n\t\t\t\tchannels: 4 as 4\n\t\t\t}\n\t\t};\n\t\tconst composite = parts.shift();\n\t\tif (!composite) {\n\t\t\tthrow new Error(`variant '${variant}'does not contain any parts`);\n\t\t}\n\t\treturn sharp(composite, options)\n\t\t\t.composite(parts.map(p => {\n\t\t\t\treturn {input: p};\n\t\t\t}));\n\t}\n}\n","module.exports = require(\"seedrandom\");","import {FolderTypesAlbum} from '../../model/jam-types';\nimport {ApiBinaryResult} from '../../typings';\nimport {BaseListService} from '../base/dbobject-list.service';\nimport {Folder} from '../folder/folder.model';\nimport {FolderService} from '../folder/folder.service';\nimport {StateService} from '../state/state.service';\nimport {TrackService} from '../track/track.service';\nimport {Album} from './album.model';\nimport {AlbumStore, SearchQueryAlbum} from './album.store';\n\nexport class AlbumService extends BaseListService<Album, SearchQueryAlbum> {\n\n\tconstructor(public albumStore: AlbumStore, private trackService: TrackService, private folderService: FolderService, stateService: StateService) {\n\t\tsuper(albumStore, stateService);\n\t}\n\n\tdefaultSort(items: Array<Album>): Array<Album> {\n\t\treturn items.sort((a, b) => a.name.localeCompare(b.name));\n\t}\n\n\tasync getAlbumFolder(album: Album): Promise<Folder | undefined> {\n\t\tif (album.folderIDs.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tif (album.folderIDs.length === 1) {\n\t\t\treturn this.folderService.folderStore.byId(album.folderIDs[0]);\n\t\t}\n\n\t\tconst cachedFolders: Array<Folder> = [];\n\n\t\tconst tryFolderID: (folderID: string) => Promise<Folder | undefined> = async folderID => {\n\t\t\tlet folders = await this.folderService.collectFolderPath(folderID, cachedFolders);\n\t\t\tif (folders.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfolders = folders.sort((a, b) => b.tag.level - a.tag.level);\n\t\t\tlet folder = folders[0];\n\t\t\tfor (const f of folders) {\n\t\t\t\tif (FolderTypesAlbum.includes(f.tag.type)) {\n\t\t\t\t\tfolder = f;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (folder && (FolderTypesAlbum.includes(folder.tag.type))) {\n\t\t\t\treturn folder;\n\t\t\t}\n\t\t};\n\t\tfor (const folderID of album.folderIDs) {\n\t\t\tconst folder = await tryFolderID(folderID);\n\t\t\tif (folder) {\n\t\t\t\treturn folder;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync getAlbumTrackImage(album: Album, size?: number, format?: string): Promise<ApiBinaryResult | undefined> {\n\t\tif (album.trackIDs.length > 0) {\n\t\t\tconst track = await this.trackService.trackStore.byId(album.trackIDs[0]);\n\t\t\tif (track) {\n\t\t\t\treturn this.trackService.getImage(track, size, format);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync getAlbumFolderImage(album: Album, size?: number, format?: string): Promise<ApiBinaryResult | undefined> {\n\t\tconst folder = await this.getAlbumFolder(album);\n\t\tif (folder) {\n\t\t\tconst result = this.folderService.getImage(folder, size, format);\n\t\t\tif (result) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync getImage(album: Album, size?: number, format?: string): Promise<ApiBinaryResult | undefined> {\n\t\tlet result: ApiBinaryResult | undefined;\n\t\tif (album.seriesID) {\n\t\t\tresult = await this.getAlbumTrackImage(album, size, format);\n\t\t}\n\t\tif (!result) {\n\t\t\tresult = await this.getAlbumFolderImage(album, size, format);\n\t\t}\n\t\tif (!result) {\n\t\t\tresult = await this.getAlbumTrackImage(album, size, format);\n\t\t}\n\t\treturn result;\n\t}\n}\n","import {FolderType, MUSICBRAINZ_VARIOUS_ARTISTS_ID} from '../../model/jam-types';\nimport {ApiBinaryResult} from '../../typings';\nimport {slugify} from '../../utils/slug';\nimport {BaseListService} from '../base/dbobject-list.service';\nimport {Folder} from '../folder/folder.model';\nimport {FolderService} from '../folder/folder.service';\nimport {StateService} from '../state/state.service';\nimport {TrackStore} from '../track/track.store';\nimport {Artist} from './artist.model';\nimport {ArtistStore, SearchQueryArtist} from './artist.store';\n\nexport class ArtistService extends BaseListService<Artist, SearchQueryArtist> {\n\n\tconstructor(public artistStore: ArtistStore, private trackStore: TrackStore, private folderService: FolderService, stateService: StateService) {\n\t\tsuper(artistStore, stateService);\n\t}\n\n\tdefaultSort(items: Array<Artist>): Array<Artist> {\n\t\treturn items.sort((a, b) => a.name.localeCompare(b.name));\n\t}\n\n\tcanHaveArtistImage(artist: Artist): boolean {\n\t\treturn (artist.albumTypes.length > 0 && artist.mbArtistID !== MUSICBRAINZ_VARIOUS_ARTISTS_ID);\n\t}\n\n\tasync getArtistFolder(artist: Artist): Promise<Folder | undefined> {\n\t\tif (artist.folderIDs.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst cachedFolders: Array<Folder> = [];\n\t\tconst tryFolderID: (folderID: string) => Promise<Folder | undefined> = async folderID => {\n\t\t\tconst folders = await this.folderService.collectFolderPath(folderID, cachedFolders);\n\t\t\tif (folders.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst artistFolder = folders.find(f => f.tag.type === FolderType.artist);\n\t\t\tif (artistFolder &&\n\t\t\t\t((artistFolder.tag.mbArtistID && artistFolder.tag.mbArtistID === artist.mbArtistID) || (artistFolder.tag.artist && slugify(artistFolder.tag.artist) === artist.slug))\n\t\t\t) {\n\t\t\t\treturn artistFolder;\n\t\t\t}\n\t\t};\n\t\tfor (const folderID of artist.folderIDs) {\n\t\t\tconst folder = await tryFolderID(folderID);\n\t\t\tif (folder) {\n\t\t\t\treturn folder;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync getImage(artist: Artist, size?: number, format?: string): Promise<ApiBinaryResult | undefined> {\n\t\tif (this.canHaveArtistImage(artist)) {\n\t\t\tconst folder = await this.getArtistFolder(artist);\n\t\t\tif (folder) {\n\t\t\t\treturn this.folderService.getImage(folder, size, format);\n\t\t\t}\n\t\t}\n\t\treturn this.folderService.imageModule.paint(artist.name, size, format);\n\t}\n\n}\n","import {DBObjectType} from '../../db/db.types';\nimport {BaseStoreService} from '../base/base.service';\nimport {ListResult} from '../base/list-result';\nimport {Bookmark} from './bookmark.model';\nimport {BookmarkStore, SearchQueryBookmark} from './bookmark.store';\n\nexport class BookmarkService extends BaseStoreService<Bookmark, SearchQueryBookmark> {\n\n\tconstructor(public bookmarkStore: BookmarkStore) {\n\t\tsuper(bookmarkStore);\n\t}\n\n\tdefaultSort(items: Array<Bookmark>): Array<Bookmark> {\n\t\treturn items.sort((a, b) => b.changed - a.changed);\n\t}\n\n\tasync byUser(userID: string, amount?: number, offset?: number): Promise<ListResult<Bookmark>> {\n\t\treturn this.bookmarkStore.search({userID, amount, offset});\n\t}\n\n\tasync byTrack(destID: string, userID: string): Promise<ListResult<Bookmark>> {\n\t\treturn this.bookmarkStore.search({userID, destID});\n\t}\n\n\tasync create(destID: string, userID: string, position: number, comment: string | undefined): Promise<Bookmark> {\n\t\tlet bookmark = await this.bookmarkStore.searchOne({destID, userID, position});\n\t\tif (!bookmark) {\n\t\t\tbookmark = {\n\t\t\t\tid: '',\n\t\t\t\ttype: DBObjectType.bookmark,\n\t\t\t\tdestID,\n\t\t\t\tuserID,\n\t\t\t\tposition,\n\t\t\t\tcomment,\n\t\t\t\tcreated: Date.now(),\n\t\t\t\tchanged: Date.now()\n\t\t\t};\n\t\t\tbookmark.id = await this.bookmarkStore.add(bookmark);\n\t\t} else {\n\t\t\tbookmark.comment = comment;\n\t\t\tbookmark.changed = Date.now();\n\t\t\tawait this.bookmarkStore.replace(bookmark);\n\t\t}\n\t\treturn bookmark;\n\t}\n\n\tasync remove(id: string, userID: string): Promise<void> {\n\t\tawait this.bookmarkStore.removeByQuery({id, userID});\n\t}\n\n\tasync removeByTrack(destID: string, userID: string): Promise<void> {\n\t\tawait this.bookmarkStore.removeByQuery({destID, userID});\n\t}\n\n\tasync byID(id: string, userID: string): Promise<Bookmark | undefined> {\n\t\treturn this.bookmarkStore.searchOne({id, userID});\n\t}\n\n\tasync byIDs(ids: Array<string>, userID: string, amount?: number, offset?: number): Promise<ListResult<Bookmark>> {\n\t\treturn this.bookmarkStore.search({ids, userID, amount, offset});\n\t}\n}\n","import moment from 'moment';\nimport {Jam} from '../../model/jam-rest-data';\nimport {User} from '../user/user.model';\nimport {ChatMessage} from './chat.model';\n\nexport class ChatService {\n\tprivate messages: Array<ChatMessage> = [];\n\tprivate duration: moment.Duration = moment.duration(0, 's');\n\tprivate chatConfig: Jam.AdminSettingsChat = {maxMessages: 0, maxAge: {value: 0, unit: 's'}};\n\n\tsetSettings(chatConfig: Jam.AdminSettingsChat): void {\n\t\tthis.chatConfig = chatConfig;\n\t\tthis.duration = moment.duration(this.chatConfig.maxAge.value, this.chatConfig.maxAge.unit as moment.unitOfTime.Base);\n\t}\n\n\tasync cleanOld(): Promise<void> {\n\t\tconst d = moment().subtract(this.duration).valueOf();\n\t\tthis.messages = this.messages.filter(c => d < c.time);\n\t}\n\n\tasync find(time: number): Promise<ChatMessage | undefined> {\n\t\treturn this.messages.find(msg => msg.time === time);\n\t}\n\n\tasync remove(message: ChatMessage): Promise<void> {\n\t\tthis.messages = this.messages.filter(msg => msg.time !== message.time);\n\t}\n\n\tasync get(since?: number): Promise<Array<ChatMessage>> {\n\t\tawait this.cleanOld();\n\t\tlet list: Array<ChatMessage> = this.messages;\n\t\tif (since !== undefined && !isNaN(since)) {\n\t\t\tlist = list.filter(msg => msg.time > since);\n\t\t}\n\t\treturn list;\n\t}\n\n\tasync add(message: string, user: User): Promise<ChatMessage> {\n\t\tawait this.cleanOld();\n\t\tconst c = {\n\t\t\tmessage,\n\t\t\ttime: Date.now(),\n\t\t\tusername: user.name,\n\t\t\tuserID: user.id\n\t\t};\n\t\tthis.messages.push(c);\n\t\tif (this.messages.length > this.chatConfig.maxMessages) {\n\t\t\tthis.messages.shift();\n\t\t}\n\t\treturn c;\n\t}\n\n}\n","import path from 'path';\nimport {Errors} from '../../api/jam/error';\nimport {DBObjectType} from '../../db/db.types';\nimport {ApiBinaryResult} from '../../typings';\nimport {CompressFolderStream} from '../../utils/compress-folder-stream';\nimport {CompressListStream} from '../../utils/compress-list-stream';\nimport {Album} from '../album/album.model';\nimport {Artist} from '../artist/artist.model';\nimport {DBObject} from '../base/base.model';\nimport {Episode} from '../episode/episode.model';\nimport {EpisodeStore} from '../episode/episode.store';\nimport {Folder} from '../folder/folder.model';\nimport {Playlist} from '../playlist/playlist.model';\nimport {Podcast} from '../podcast/podcast.model';\nimport {Series} from '../series/series.model';\nimport {Track} from '../track/track.model';\nimport {TrackStore} from '../track/track.store';\nimport {User} from '../user/user.model';\n\nexport class DownloadService {\n\n\tconstructor(private trackStore: TrackStore, private episodeStore: EpisodeStore) {\n\t}\n\n\tprivate async downloadEpisode(episode: Episode, format?: string): Promise<ApiBinaryResult> {\n\t\tif (!episode.path) {\n\t\t\treturn Promise.reject(Error('Podcast episode not ready'));\n\t\t}\n\t\treturn {pipe: new CompressListStream([episode.path], path.basename(episode.path), format)};\n\t}\n\n\tprivate async downloadTrack(track: Track, format?: string): Promise<ApiBinaryResult> {\n\t\treturn {pipe: new CompressListStream([path.join(track.path, track.name)], path.basename(track.name), format)};\n\t}\n\n\tprivate async downloadFolder(folder: Folder, format?: string): Promise<ApiBinaryResult> {\n\t\treturn {pipe: new CompressFolderStream(folder.path, path.basename(folder.path), format)};\n\t}\n\n\tprivate async downloadArtist(artist: Artist, format?: string): Promise<ApiBinaryResult> {\n\t\tconst tracks = await this.trackStore.byIds(artist.trackIDs);\n\t\tconst fileList = tracks.map(t => path.join(t.path, t.name));\n\t\treturn {pipe: new CompressListStream(fileList, artist.name, format)};\n\t}\n\n\tprivate async downloadSeries(series: Series, format?: string): Promise<ApiBinaryResult> {\n\t\tconst tracks = await this.trackStore.byIds(series.trackIDs);\n\t\tconst fileList = tracks.map(t => path.join(t.path, t.name));\n\t\treturn {pipe: new CompressListStream(fileList, series.name, format)};\n\t}\n\n\tprivate async downloadAlbum(album: Album, format?: string): Promise<ApiBinaryResult> {\n\t\tconst tracks = await this.trackStore.byIds(album.trackIDs);\n\t\tconst fileList = tracks.map(t => path.join(t.path, t.name));\n\t\treturn {pipe: new CompressListStream(fileList, album.name, format)};\n\t}\n\n\tprivate async downloadPodcast(podcast: Podcast, format: string | undefined): Promise<ApiBinaryResult> {\n\t\tconst episodes = await this.episodeStore.search({podcastID: podcast.id});\n\t\tconst fileList: Array<string> = episodes.items.filter(e => !!e.path).map(e => e.path as string);\n\t\treturn {pipe: new CompressListStream(fileList, podcast.id, format)};\n\t}\n\n\tprivate async downloadPlaylist(playlist: Playlist, format: string | undefined, user: User): Promise<ApiBinaryResult> {\n\t\tif (playlist.userID !== user.id && !playlist.isPublic) {\n\t\t\treturn Promise.reject(Error(Errors.unauthorized));\n\t\t}\n\t\tconst tracks = await this.trackStore.byIds(playlist.trackIDs);\n\t\tconst fileList = tracks.map(t => path.join(t.path, t.name));\n\t\t// TODO: add playlist index file m3u/pls\n\t\treturn {pipe: new CompressListStream(fileList, playlist.name, format)};\n\t}\n\n\tasync getObjDownload(o: DBObject, format: string | undefined, user: User): Promise<ApiBinaryResult> {\n\t\tswitch (o.type) {\n\t\t\tcase DBObjectType.track:\n\t\t\t\treturn this.downloadTrack(o as Track, format);\n\t\t\tcase DBObjectType.folder:\n\t\t\t\treturn this.downloadFolder(o as Folder, format);\n\t\t\tcase DBObjectType.artist:\n\t\t\t\treturn this.downloadArtist(o as Artist, format);\n\t\t\tcase DBObjectType.series:\n\t\t\t\treturn this.downloadSeries(o as Series, format);\n\t\t\tcase DBObjectType.album:\n\t\t\t\treturn this.downloadAlbum(o as Album, format);\n\t\t\tcase DBObjectType.episode:\n\t\t\t\treturn this.downloadEpisode(o as Episode, format);\n\t\t\tcase DBObjectType.podcast:\n\t\t\t\treturn this.downloadPodcast(o as Podcast, format);\n\t\t\tcase DBObjectType.playlist:\n\t\t\t\treturn this.downloadPlaylist(o as Playlist, format, user);\n\t\t\tdefault:\n\t\t}\n\t\treturn Promise.reject(Error('Invalid Download Type'));\n\t}\n\n}\n","import archiver from 'archiver';\nimport {BaseCompressStream} from './compress-base-stream';\n\nexport class CompressFolderStream extends BaseCompressStream {\n\n\tconstructor(public folder: string, filename: string, format?: string) {\n\t\tsuper(filename, format);\n\t}\n\n\tprotected run(archive: archiver.Archiver): void {\n\t\tarchive.directory(this.folder, false);\n\t}\n}\n","module.exports = require(\"archiver\");","import archiver from 'archiver';\nimport path from 'path';\nimport {BaseCompressStream} from './compress-base-stream';\n\nexport class CompressListStream extends BaseCompressStream {\n\tpublic list: Array<string> = [];\n\n\tconstructor(list: Array<string>, filename: string, format?: string) {\n\t\tsuper(filename, format);\n\t\tthis.list = list;\n\t}\n\n\tprotected run(archive: archiver.Archiver): void {\n\t\tthis.list.forEach(file => {\n\t\t\tarchive.file(file, {name: path.basename(file)});\n\t\t});\n\t}\n\n}\n","import fse from 'fs-extra';\nimport path from 'path';\nimport {AudioFormatType, PodcastStatus} from '../../model/jam-types';\nimport {AudioModule} from '../../modules/audio/audio.module';\nimport {ImageModule} from '../../modules/image/image.module';\nimport {ApiBinaryResult} from '../../typings';\nimport {DebouncePromises} from '../../utils/debounce-promises';\nimport {downloadFile} from '../../utils/download';\nimport {SupportedAudioFormat} from '../../utils/filetype';\nimport {fileDeleteIfExists, fileSuffix} from '../../utils/fs-utils';\nimport {logger} from '../../utils/logger';\nimport {BaseListService} from '../base/dbobject-list.service';\nimport {StateService} from '../state/state.service';\nimport {Episode} from './episode.model';\nimport {EpisodeStore, SearchQueryEpisode} from './episode.store';\n\nconst log = logger('EpisodeService');\n\nexport class EpisodeService extends BaseListService<Episode, SearchQueryEpisode> {\n\tprivate episodeDownloadDebounce = new DebouncePromises<void>();\n\n\tconstructor(private podcastsPath: string, public episodeStore: EpisodeStore, stateService: StateService, private audioModule: AudioModule, private imageModule: ImageModule) {\n\t\tsuper(episodeStore, stateService);\n\t}\n\n\tdefaultSort(items: Array<Episode>): Array<Episode> {\n\t\treturn items.sort((a, b) => {\n\t\t\t\tif (!a.tag) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tif (!b.tag) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\tif (a.tag.track !== undefined && b.tag.track !== undefined) {\n\t\t\t\t\tconst res = a.tag.track - b.tag.track;\n\t\t\t\t\tif (res !== 0) {\n\t\t\t\t\t\treturn res;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn b.date - a.date;\n\t\t\t}\n\t\t);\n\t}\n\n\tisDownloading(podcastEpisodeId: string): boolean {\n\t\treturn this.episodeDownloadDebounce.isPending(podcastEpisodeId);\n\t}\n\n\tprivate async downloadEpisodeFile(episode: Episode): Promise<string> {\n\t\tlet url = '';\n\t\tif (episode.enclosures && episode.enclosures.length > 0) {\n\t\t\turl = episode.enclosures[0].url;\n\t\t} else {\n\t\t\tthrow new Error('No podcast episode url found');\n\t\t}\n\t\tlet suffix = fileSuffix(url);\n\t\tif (suffix.includes('?')) {\n\t\t\tsuffix = suffix.slice(0, suffix.indexOf('?'));\n\t\t}\n\t\tif (!SupportedAudioFormat.includes(suffix as AudioFormatType)) {\n\t\t\tthrow new Error(`Unsupported Podcast audio format .${suffix}`);\n\t\t}\n\t\tconst p = path.resolve(this.podcastsPath, episode.podcastID);\n\t\tawait fse.ensureDir(p);\n\t\tconst filename = path.join(p, `${episode.id}.${suffix}`);\n\t\tlog.info('retrieving file', url);\n\t\tawait downloadFile(url, filename);\n\t\treturn filename;\n\t}\n\n\tasync downloadEpisode(episode: Episode): Promise<void> {\n\t\tif (this.episodeDownloadDebounce.isPending(episode.id)) {\n\t\t\treturn this.episodeDownloadDebounce.append(episode.id);\n\t\t}\n\t\tthis.episodeDownloadDebounce.setPending(episode.id);\n\t\ttry {\n\t\t\ttry {\n\t\t\t\tconst filename = await this.downloadEpisodeFile(episode);\n\t\t\t\tconst stat = await fse.stat(filename);\n\t\t\t\tconst result = await this.audioModule.read(filename);\n\t\t\t\tepisode.status = PodcastStatus.completed;\n\t\t\t\tepisode.tag = result.tag;\n\t\t\t\tepisode.media = result.media;\n\t\t\t\tepisode.stat = {\n\t\t\t\t\tcreated: stat.ctime.valueOf(),\n\t\t\t\t\tmodified: stat.mtime.valueOf(),\n\t\t\t\t\tsize: stat.size\n\t\t\t\t};\n\t\t\t\tepisode.path = filename;\n\t\t\t} catch (e) {\n\t\t\t\tepisode.status = PodcastStatus.error;\n\t\t\t\tepisode.error = (e || '').toString();\n\t\t\t}\n\t\t\tawait this.episodeStore.replace(episode);\n\t\t\tthis.episodeDownloadDebounce.resolve(episode.id, undefined);\n\t\t} catch (e) {\n\t\t\tthis.episodeDownloadDebounce.resolve(episode.id, undefined);\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n\n\tasync removeEpisodes(podcastID: string): Promise<void> {\n\t\tconst removeEpisodes = await this.episodeStore.search({podcastID});\n\t\tconst ids = removeEpisodes.items.map(episode => episode.id);\n\t\tawait this.episodeStore.remove(ids);\n\t\tfor (const episode of removeEpisodes.items) {\n\t\t\tif (episode.path) {\n\t\t\t\tawait fileDeleteIfExists(episode.path);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync deleteEpisode(episode: Episode): Promise<void> {\n\t\tif (!episode.path) {\n\t\t\treturn;\n\t\t}\n\t\tawait fileDeleteIfExists(episode.path);\n\t\tepisode.path = undefined;\n\t\tepisode.stat = undefined;\n\t\tepisode.media = undefined;\n\t\tepisode.status = PodcastStatus.deleted;\n\t\tawait this.episodeStore.replace(episode);\n\t}\n\n\tasync mergeEpisodes(podcastID: string, podcast: string, episodes: Array<Episode>): Promise<Array<Episode>> {\n\t\tif ((!episodes) || (!episodes.length)) {\n\t\t\treturn [];\n\t\t}\n\t\tconst storeEpisodes: Array<Episode> = [];\n\t\tconst newEpisodes: Array<Episode> = [];\n\t\tconst oldEpisodes = await this.episodeStore.search({podcastID});\n\t\tfor (const epi of episodes) {\n\t\t\tconst update = oldEpisodes.items.find(e => e.guid === epi.guid);\n\t\t\tif (update) {\n\t\t\t\tupdate.podcast = podcast;\n\t\t\t\tupdate.duration = epi.duration;\n\t\t\t\tupdate.chapters = epi.chapters;\n\t\t\t\tupdate.date = epi.date;\n\t\t\t\tupdate.summary = epi.summary;\n\t\t\t\tupdate.name = epi.name;\n\t\t\t\tupdate.guid = epi.guid;\n\t\t\t\tupdate.author = epi.author;\n\t\t\t\tupdate.enclosures = epi.enclosures;\n\t\t\t\tstoreEpisodes.push(update);\n\t\t\t} else {\n\t\t\t\tepi.podcast = podcast;\n\t\t\t\tstoreEpisodes.push(epi);\n\t\t\t\tnewEpisodes.push(epi);\n\t\t\t}\n\t\t}\n\t\tawait this.episodeStore.upsert(storeEpisodes);\n\t\treturn newEpisodes;\n\t}\n\n\tasync getImage(episode: Episode, size?: number, format?: string): Promise<ApiBinaryResult | undefined> {\n\t\tif (episode.tag && episode.tag.nrTagImages && episode.path) {\n\t\t\tconst result = await this.imageModule.getExisting(episode.id, size, format);\n\t\t\tif (result) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst buffer = await this.audioModule.extractTagImage(episode.path);\n\t\t\t\tif (buffer) {\n\t\t\t\t\treturn await this.imageModule.getBuffer(episode.id, buffer, size, format);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tlog.error('getImage', 'Extracting image from audio failed: ' + episode.path);\n\t\t\t}\n\t\t}\n\t}\n\n}\n","import {TrackStore} from '../track/track.store';\nimport {Genre} from './genre.model';\n\nexport interface GenreInfo {\n\tname: string;\n\tsections: Array<{\n\t\trootID: string;\n\t\ttrackCount: number;\n\t\tartistCount: number;\n\t\talbumCount: number;\n\t}>;\n}\n\nexport class GenreService {\n\tprivate genres: Array<GenreInfo> = [];\n\n\tconstructor(private trackStore: TrackStore) {\n\t}\n\n\tasync refresh(): Promise<void> {\n\t\t// logger.info('Build Genres');\n\t\tconst genreHash: {\n\t\t\t[name: string]: {\n\t\t\t\troots: {\n\t\t\t\t\t[id: string]: {\n\t\t\t\t\t\tcount: number;\n\t\t\t\t\t\tartists: { [name: string]: number };\n\t\t\t\t\t\talbums: { [name: string]: number };\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t};\n\t\t} = {};\n\n\t\tawait this.trackStore.iterate(async tracks => {\n\t\t\tfor (const track of tracks) {\n\t\t\t\tconst genre = track.tag.genre || '[No genre]';\n\t\t\t\tconst data = genreHash[genre] || {roots: {}};\n\t\t\t\tconst section = data.roots[track.rootID] || {count: 0, artists: {}, albums: {}};\n\t\t\t\tsection.count++;\n\t\t\t\tif (track.artistID) {\n\t\t\t\t\tsection.artists[track.artistID] = (section.artists[track.artistID] || 0) + 1;\n\t\t\t\t}\n\t\t\t\tif (track.albumID) {\n\t\t\t\t\tsection.albums[track.albumID] = (section.albums[track.albumID] || 0) + 1;\n\t\t\t\t}\n\t\t\t\tdata.roots[track.rootID] = section;\n\t\t\t\tgenreHash[genre] = data;\n\t\t\t}\n\t\t});\n\n\t\tthis.genres = Object.keys(genreHash).map(key => {\n\t\t\tconst data = genreHash[key];\n\t\t\treturn {\n\t\t\t\tname: key,\n\t\t\t\tsections: Object.keys(data.roots).map(sec => {\n\t\t\t\t\tconst section = data.roots[sec];\n\t\t\t\t\treturn {\n\t\t\t\t\t\trootID: sec,\n\t\t\t\t\t\tartistCount: Object.keys(section.artists).length,\n\t\t\t\t\t\talbumCount: Object.keys(section.albums).length,\n\t\t\t\t\t\ttrackCount: section.count\n\t\t\t\t\t};\n\t\t\t\t})\n\t\t\t};\n\t\t});\n\t}\n\n\tasync getGenres(rootID?: string): Promise<Array<Genre>> {\n\t\tif (this.genres.length === 0) {\n\t\t\tawait this.refresh();\n\t\t}\n\t\treturn this.genres.map(g => {\n\t\t\tconst genre = {\n\t\t\t\tname: g.name,\n\t\t\t\talbumCount: 0,\n\t\t\t\tartistCount: 0,\n\t\t\t\ttrackCount: 0\n\t\t\t};\n\t\t\tg.sections.forEach(section => {\n\t\t\t\tif (!rootID || section.rootID === rootID) {\n\t\t\t\t\tgenre.albumCount += section.albumCount;\n\t\t\t\t\tgenre.artistCount += section.artistCount;\n\t\t\t\t\tgenre.trackCount += section.trackCount;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn genre;\n\t\t}).filter(genre => genre.trackCount > 0).sort((a, b) => {\n\t\t\treturn a.name.localeCompare(b.name);\n\t\t});\n\t}\n\n}\n","import path from 'path';\nimport {DBObjectType} from '../../db/db.types';\nimport {FolderType} from '../../model/jam-types';\nimport {ImageModule} from '../../modules/image/image.module';\nimport {ApiBinaryResult} from '../../typings';\nimport {Album} from '../album/album.model';\nimport {AlbumService} from '../album/album.service';\nimport {Artist} from '../artist/artist.model';\nimport {ArtistService} from '../artist/artist.service';\nimport {DBObject} from '../base/base.model';\nimport {Episode} from '../episode/episode.model';\nimport {EpisodeService} from '../episode/episode.service';\nimport {Folder} from '../folder/folder.model';\nimport {FolderService} from '../folder/folder.service';\nimport {Playlist} from '../playlist/playlist.model';\nimport {Podcast} from '../podcast/podcast.model';\nimport {PodcastService} from '../podcast/podcast.service';\nimport {Root} from '../root/root.model';\nimport {Series} from '../series/series.model';\nimport {SeriesService} from '../series/series.service';\nimport {Track} from '../track/track.model';\nimport {TrackService} from '../track/track.service';\nimport {User} from '../user/user.model';\nimport {UserService} from '../user/user.service';\n\nexport class ImageService {\n\n\tconstructor(\n\t\tprivate imageModule: ImageModule, private trackService: TrackService,\n\t\tprivate folderService: FolderService, private artistService: ArtistService,\n\t\tprivate albumService: AlbumService, private userService: UserService,\n\t\tprivate podcastService: PodcastService, private episodeService: EpisodeService,\n\t\tprivate seriesService: SeriesService) {\n\t}\n\n\tprivate static getCoverArtTextFolder(folder: Folder): string {\n\t\tlet result: string | undefined;\n\t\tif (folder.tag) {\n\t\t\tif (folder.tag.type === FolderType.artist) {\n\t\t\t\tresult = folder.tag.artist;\n\t\t\t} else if ([FolderType.multialbum, FolderType.album].includes(folder.tag.type)) {\n\t\t\t\tresult = folder.tag.album;\n\t\t\t}\n\t\t}\n\t\tif (!result || result.length === 0) {\n\t\t\tresult = path.basename(folder.path);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static getCoverArtTextEpisode(episode: Episode): string {\n\t\tlet text: string | undefined = episode.tag ? episode.tag.title : undefined;\n\t\tif (!text && episode.path) {\n\t\t\ttext = path.basename(episode.path);\n\t\t}\n\t\tif (!text) {\n\t\t\ttext = episode.name;\n\t\t}\n\t\tif (!text) {\n\t\t\ttext = 'Podcast Episode';\n\t\t}\n\t\treturn text;\n\t}\n\n\tprivate static getCoverArtTextTrack(track: Track): string {\n\t\treturn track.tag && track.tag.title ? track.tag.title : path.basename(track.path);\n\t}\n\n\tprivate static getCoverArtTextPodcast(podcast: Podcast): string {\n\t\treturn podcast.tag ? podcast.tag.title : podcast.url;\n\t}\n\n\tprivate getCoverArtText(o: DBObject): string {\n\t\tswitch (o.type) {\n\t\t\tcase DBObjectType.track:\n\t\t\t\treturn ImageService.getCoverArtTextTrack(o as Track);\n\t\t\tcase DBObjectType.folder:\n\t\t\t\treturn ImageService.getCoverArtTextFolder(o as Folder);\n\t\t\tcase DBObjectType.episode:\n\t\t\t\treturn ImageService.getCoverArtTextEpisode(o as Episode);\n\t\t\tcase DBObjectType.playlist:\n\t\t\t\treturn (o as Playlist).name;\n\t\t\tcase DBObjectType.series:\n\t\t\t\treturn (o as Series).name;\n\t\t\tcase DBObjectType.podcast:\n\t\t\t\treturn ImageService.getCoverArtTextPodcast(o as Podcast);\n\t\t\tcase DBObjectType.album:\n\t\t\t\treturn (o as Album).name;\n\t\t\tcase DBObjectType.artist:\n\t\t\t\treturn (o as Artist).name;\n\t\t\tcase DBObjectType.user:\n\t\t\t\treturn (o as User).name;\n\t\t\tcase DBObjectType.root:\n\t\t\t\treturn (o as Root).name;\n\t\t\tdefault:\n\t\t\t\treturn DBObjectType[o.type];\n\t\t}\n\t}\n\n\tasync getObjImage(o: DBObject, size?: number, format?: string): Promise<ApiBinaryResult> {\n\t\tlet result: ApiBinaryResult | undefined;\n\t\tswitch (o.type) {\n\t\t\tcase DBObjectType.track:\n\t\t\t\tresult = await this.trackService.getImage(o as Track, size, format);\n\t\t\t\tbreak;\n\t\t\tcase DBObjectType.folder:\n\t\t\t\tresult = await this.folderService.getImage(o as Folder, size, format);\n\t\t\t\tbreak;\n\t\t\tcase DBObjectType.artist:\n\t\t\t\tresult = await this.artistService.getImage(o as Artist, size, format);\n\t\t\t\tbreak;\n\t\t\tcase DBObjectType.album:\n\t\t\t\tresult = await this.albumService.getImage(o as Album, size, format);\n\t\t\t\tbreak;\n\t\t\tcase DBObjectType.user:\n\t\t\t\tresult = await this.userService.getImage(o as User, size, format);\n\t\t\t\tbreak;\n\t\t\tcase DBObjectType.podcast:\n\t\t\t\tresult = await this.podcastService.getImage(o as Podcast, size, format);\n\t\t\t\tbreak;\n\t\t\tcase DBObjectType.episode:\n\t\t\t\tresult = await this.podcastService.getEpisodeImage(o as Episode, size, format);\n\t\t\t\tbreak;\n\t\t\tcase DBObjectType.series:\n\t\t\t\tresult = await this.seriesService.getImage(o as Series, size, format);\n\t\t\t\tbreak;\n\t\t\tcase DBObjectType.root: {\n\t\t\t\tconst rootFolder = await this.folderService.folderStore.searchOne({rootID: (o as Root).id, level: 0});\n\t\t\t\tif (rootFolder) {\n\t\t\t\t\tresult = await this.folderService.getImage(rootFolder, size, format);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\tif (!result) {\n\t\t\treturn this.paintImage(o, size, format);\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync paintImage(obj: DBObject, size?: number, format?: string): Promise<ApiBinaryResult> {\n\t\tconst s = this.getCoverArtText(obj);\n\t\treturn this.imageModule.paint(s, size || 128, format);\n\t}\n\n}\n","import {Jam} from '../../model/jam-rest-data';\nimport {AlbumType} from '../../model/jam-types';\nimport {DebouncePromises} from '../../utils/debounce-promises';\nimport {AlbumStore, SearchQueryAlbum} from '../album/album.store';\nimport {ArtistStore, SearchQueryArtist} from '../artist/artist.store';\nimport {FolderStore, SearchQueryFolder} from '../folder/folder.store';\nimport {SearchQuerySeries, SeriesStore} from '../series/series.store';\nimport {TrackStore} from '../track/track.store';\nimport {IndexAlbumTreeBuilder, IndexArtistTreeBuilder, IndexFolderTreeBuilder, IndexSeriesTreeBuilder} from './index.builder';\nimport {AlbumIndex, ArtistIndex, FolderIndex, SeriesIndex} from './index.model';\n\nexport class IndexService {\n\tprivate cached: {\n\t\tfolder: {\n\t\t\t[id: string]: FolderIndex;\n\t\t};\n\t\tartist: {\n\t\t\t[id: string]: ArtistIndex;\n\t\t};\n\t\tseries: {\n\t\t\t[id: string]: SeriesIndex;\n\t\t};\n\t\talbum: {\n\t\t\t[id: string]: AlbumIndex;\n\t\t};\n\t} = {\n\t\tfolder: {},\n\t\tartist: {},\n\t\tseries: {},\n\t\talbum: {}\n\t};\n\tprivate indexCacheFolderDebounce = new DebouncePromises<FolderIndex>();\n\tprivate indexCacheArtistDebounce = new DebouncePromises<ArtistIndex>();\n\tprivate indexCacheSeriesDebounce = new DebouncePromises<SeriesIndex>();\n\tprivate indexCacheAlbumDebounce = new DebouncePromises<AlbumIndex>();\n\tpublic indexConfig: Jam.AdminSettingsIndex = {ignoreArticles: []};\n\n\tconstructor(\n\t\tprivate artistStore: ArtistStore, private albumStore: AlbumStore,\n\t\tprivate folderStore: FolderStore, private trackStore: TrackStore,\n\t\tprivate seriesStore: SeriesStore\n\t) {\n\t}\n\n\tpublic clearCache(): void {\n\t\tthis.cached = {\n\t\t\tfolder: {},\n\t\t\tartist: {},\n\t\t\tseries: {},\n\t\t\talbum: {}\n\t\t};\n\t}\n\n\tpublic setSettings(indexConfig: Jam.AdminSettingsIndex): void {\n\t\tthis.indexConfig = indexConfig;\n\t\tthis.clearCache();\n\t}\n\n\tasync getFolderIndex(query: SearchQueryFolder): Promise<FolderIndex> {\n\t\tconst id = JSON.stringify(query);\n\t\tif (this.cached.folder[id]) {\n\t\t\treturn this.cached.folder[id];\n\t\t}\n\t\tif (this.indexCacheFolderDebounce.isPending(id)) {\n\t\t\treturn this.indexCacheFolderDebounce.append(id);\n\t\t}\n\t\tthis.indexCacheFolderDebounce.setPending(id);\n\t\ttry {\n\t\t\tconst builder = new IndexFolderTreeBuilder(this.indexConfig, this.folderStore, this.trackStore);\n\t\t\tconst result = await builder.buildFolderIndex(query);\n\t\t\tthis.indexCacheFolderDebounce.resolve(id, result);\n\t\t\tthis.cached.folder[id] = result;\n\t\t\treturn result;\n\t\t} catch (e) {\n\t\t\tthis.indexCacheFolderDebounce.reject(id, e);\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n\n\tasync getArtistIndex(query: SearchQueryArtist): Promise<ArtistIndex> {\n\t\tconst id = JSON.stringify(query);\n\t\tif (this.cached.artist[id]) {\n\t\t\treturn this.cached.artist[id];\n\t\t}\n\t\tif (this.indexCacheArtistDebounce.isPending(id)) {\n\t\t\treturn this.indexCacheArtistDebounce.append(id);\n\t\t}\n\t\tthis.indexCacheArtistDebounce.setPending(id);\n\t\ttry {\n\t\t\tconst builder = new IndexArtistTreeBuilder(this.indexConfig, this.artistStore);\n\t\t\tconst result = await builder.buildArtistIndex(query);\n\t\t\tthis.indexCacheArtistDebounce.resolve(id, result);\n\t\t\tthis.cached.artist[id] = result;\n\t\t\treturn result;\n\t\t} catch (e) {\n\t\t\tthis.indexCacheArtistDebounce.reject(id, e);\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n\n\tasync getSeriesIndex(query: SearchQuerySeries): Promise<SeriesIndex> {\n\t\tconst id = JSON.stringify(query);\n\t\tif (this.cached.series[id]) {\n\t\t\treturn this.cached.series[id];\n\t\t}\n\t\tif (this.indexCacheSeriesDebounce.isPending(id)) {\n\t\t\treturn this.indexCacheSeriesDebounce.append(id);\n\t\t}\n\t\tthis.indexCacheSeriesDebounce.setPending(id);\n\t\ttry {\n\t\t\tconst builder = new IndexSeriesTreeBuilder(this.indexConfig, this.seriesStore);\n\t\t\tconst result = await builder.buildSeriesIndex(query);\n\t\t\tthis.indexCacheSeriesDebounce.resolve(id, result);\n\t\t\tthis.cached.series[id] = result;\n\t\t\treturn result;\n\t\t} catch (e) {\n\t\t\tthis.indexCacheSeriesDebounce.reject(id, e);\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n\n\tasync getAlbumIndex(query: SearchQueryAlbum): Promise<AlbumIndex> {\n\t\tconst id = JSON.stringify(query);\n\t\tif (this.cached.album[id]) {\n\t\t\treturn this.cached.album[id];\n\t\t}\n\t\tif (this.indexCacheAlbumDebounce.isPending(id)) {\n\t\t\treturn this.indexCacheAlbumDebounce.append(id);\n\t\t}\n\t\tthis.indexCacheAlbumDebounce.setPending(id);\n\t\ttry {\n\t\t\tconst builder = new IndexAlbumTreeBuilder(this.indexConfig, this.albumStore);\n\t\t\tconst result = await builder.buildAlbumIndex(query);\n\t\t\tthis.indexCacheAlbumDebounce.resolve(id, result);\n\t\t\tthis.cached.album[id] = result;\n\t\t\treturn result;\n\t\t} catch (e) {\n\t\t\tthis.indexCacheAlbumDebounce.reject(id, e);\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n\n\tasync buildDefaultIndexes(): Promise<void> {\n\t\tthis.clearCache();\n\t\tawait this.getFolderIndex({level: 1});\n\t\tawait this.getArtistIndex({albumType: AlbumType.album});\n\t}\n}\n","import path from 'path';\nimport {Jam} from '../../model/jam-rest-data';\nimport {AlbumStore, SearchQueryAlbum} from '../album/album.store';\nimport {ArtistStore, SearchQueryArtist} from '../artist/artist.store';\nimport {Folder} from '../folder/folder.model';\nimport {FolderStore, SearchQueryFolder} from '../folder/folder.store';\nimport {SearchQuerySeries, SeriesStore} from '../series/series.store';\nimport {TrackStore} from '../track/track.store';\nimport {AlbumIndex, AlbumIndexEntry, ArtistIndex, ArtistIndexEntry, FolderIndex, FolderIndexEntry, SeriesIndex, SeriesIndexEntry} from './index.model';\n\nexport class IndexTreeBuilder {\n\tprivate ignore: string;\n\n\tconstructor(indexConfig: Jam.AdminSettingsIndex) {\n\t\tthis.ignore = indexConfig.ignoreArticles.join('|');\n\t}\n\n\tremoveArticles(name: string): string {\n\t\t// /^(?:(?:the|los|les)\\s+)?(.*)/gi\n\t\tconst matches = new RegExp(`^(?:(?:${this.ignore})\\\\s+)?(.*)`, 'gi').exec(name);\n\t\treturn matches ? matches[1] : name;\n\t}\n\n\tgetIndexChar(name: string): string {\n\t\tconst s = name.replace(/[¿…¡?[\\]{}<>‘`“'&_~=:./;@#«!%$*()+\\-\\\\|]/g, '').trim();\n\t\tif (s.length === 0) {\n\t\t\treturn '#';\n\t\t}\n\t\tconst c = s.charAt(0).toUpperCase();\n\t\tif (!isNaN(Number(c))) {\n\t\t\treturn '#';\n\t\t}\n\t\treturn c;\n\t}\n}\n\nexport class IndexFolderTreeBuilder extends IndexTreeBuilder {\n\tconstructor(indexConfig: Jam.AdminSettingsIndex, private folderStore: FolderStore, private trackStore: TrackStore) {\n\t\tsuper(indexConfig);\n\t}\n\n\tprivate async getTotalTrackCount(folder: Folder): Promise<number> {\n\t\treturn this.trackStore.searchCount({inPath: folder.path});\n\t}\n\n\tasync buildFolderIndex(query: SearchQueryFolder): Promise<FolderIndex> {\n\t\tconst result: FolderIndex = {groups: [], lastModified: Date.now()};\n\t\tconst folders = await this.folderStore.search(query);\n\t\tfor (const folder of folders.items) {\n\t\t\tconst trackCount = await this.getTotalTrackCount(folder);\n\t\t\tconst entry: FolderIndexEntry = {\n\t\t\t\tname: path.basename(folder.path),\n\t\t\t\tnameSort: folder.tag.artistSort || this.removeArticles(path.basename(folder.path)),\n\t\t\t\ttrackCount: trackCount || 0,\n\t\t\t\tfolder\n\t\t\t};\n\t\t\tconst indexChar = this.getIndexChar(entry.nameSort);\n\t\t\tlet group = result.groups.find(g => g.name === indexChar);\n\t\t\tif (!group) {\n\t\t\t\tgroup = {name: indexChar, entries: []};\n\t\t\t\tresult.groups.push(group);\n\t\t\t}\n\t\t\tgroup.entries.push(entry);\n\t\t}\n\t\tresult.groups.forEach(group => {\n\t\t\tgroup.entries.sort((a, b) => {\n\t\t\t\treturn a.nameSort.localeCompare(b.nameSort);\n\t\t\t});\n\t\t});\n\t\tresult.groups.sort((a, b) => {\n\t\t\treturn a.name.localeCompare(b.name);\n\t\t});\n\t\treturn result;\n\t}\n}\n\nexport class IndexArtistTreeBuilder extends IndexTreeBuilder {\n\tconstructor(indexConfig: Jam.AdminSettingsIndex, private artistStore: ArtistStore) {\n\t\tsuper(indexConfig);\n\t}\n\n\tasync buildArtistIndex(query: SearchQueryArtist): Promise<ArtistIndex> {\n\t\tconst result: ArtistIndex = {groups: [], lastModified: Date.now()};\n\t\tconst artists = await this.artistStore.search(query);\n\t\tartists.items.forEach(artist => {\n\t\t\tconst entry: ArtistIndexEntry = {artist};\n\t\t\tconst indexChar = this.getIndexChar(artist.nameSort || this.removeArticles(artist.name) || '');\n\t\t\tlet group = result.groups.find(g => g.name === indexChar);\n\t\t\tif (!group) {\n\t\t\t\tgroup = {name: indexChar, entries: []};\n\t\t\t\tresult.groups.push(group);\n\t\t\t}\n\t\t\tgroup.entries.push(entry);\n\t\t});\n\t\tresult.groups.forEach(group => {\n\t\t\tgroup.entries = group.entries.sort((a, b) => {\n\t\t\t\treturn (a.artist.nameSort || this.removeArticles(a.artist.name)).localeCompare(b.artist.nameSort || this.removeArticles(b.artist.name));\n\t\t\t});\n\t\t});\n\t\tresult.groups = result.groups.sort((a, b) => {\n\t\t\treturn a.name.localeCompare(b.name);\n\t\t});\n\t\treturn result;\n\t}\n\n}\n\nexport class IndexSeriesTreeBuilder extends IndexTreeBuilder {\n\tconstructor(indexConfig: Jam.AdminSettingsIndex, private seriesStore: SeriesStore) {\n\t\tsuper(indexConfig);\n\t}\n\n\tasync buildSeriesIndex(query: SearchQuerySeries): Promise<SeriesIndex> {\n\t\tconst result: SeriesIndex = {groups: [], lastModified: Date.now()};\n\t\tconst series = await this.seriesStore.search(query);\n\t\tseries.items.forEach(item => {\n\t\t\tconst entry: SeriesIndexEntry = {series: item};\n\t\t\tconst indexChar = this.getIndexChar(this.removeArticles(item.name) || '');\n\t\t\tlet group = result.groups.find(g => g.name === indexChar);\n\t\t\tif (!group) {\n\t\t\t\tgroup = {name: indexChar, entries: []};\n\t\t\t\tresult.groups.push(group);\n\t\t\t}\n\t\t\tgroup.entries.push(entry);\n\t\t});\n\t\tresult.groups.forEach(group => {\n\t\t\tgroup.entries = group.entries.sort((a, b) => {\n\t\t\t\treturn (this.removeArticles(a.series.name)).localeCompare(this.removeArticles(b.series.name));\n\t\t\t});\n\t\t});\n\t\tresult.groups = result.groups.sort((a, b) => {\n\t\t\treturn a.name.localeCompare(b.name);\n\t\t});\n\t\treturn result;\n\t}\n\n}\n\nexport class IndexAlbumTreeBuilder extends IndexTreeBuilder {\n\tconstructor(indexConfig: Jam.AdminSettingsIndex, private albumStore: AlbumStore) {\n\t\tsuper(indexConfig);\n\t}\n\n\tasync buildAlbumIndex(query: SearchQueryAlbum): Promise<AlbumIndex> {\n\t\tconst result: AlbumIndex = {groups: [], lastModified: Date.now()};\n\t\tconst albums = await this.albumStore.search(query);\n\t\talbums.items.forEach(album => {\n\t\t\tconst entry: AlbumIndexEntry = {album};\n\t\t\tconst indexChar = this.getIndexChar(album.name);\n\t\t\tlet group = result.groups.find(g => g.name === indexChar);\n\t\t\tif (!group) {\n\t\t\t\tgroup = {name: indexChar, entries: []};\n\t\t\t\tresult.groups.push(group);\n\t\t\t}\n\t\t\tgroup.entries.push(entry);\n\t\t});\n\t\tresult.groups.forEach(group => {\n\t\t\tgroup.entries.sort((a, b) => {\n\t\t\t\treturn a.album.name.localeCompare(b.album.name);\n\t\t\t});\n\t\t});\n\t\tresult.groups.sort((a, b) => {\n\t\t\treturn a.name.localeCompare(b.name);\n\t\t});\n\t\treturn result;\n\t}\n\n}\n","import {Jam} from '../../model/jam-rest-data';\nimport {ArtworkImageType, RootScanStrategy, TrackHealthID} from '../../model/jam-types';\nimport {logger} from '../../utils/logger';\nimport {RootStatus} from '../root/root.model';\nimport {RootStore} from '../root/root.store';\nimport {Changes} from '../worker/changes/changes';\nimport {logChanges} from '../worker/changes/changes.logger';\nimport {\n\tWorkerRequestCreateArtwork,\n\tWorkerRequestCreateFolder,\n\tWorkerRequestCreateRoot,\n\tWorkerRequestDeleteArtwork,\n\tWorkerRequestDeleteFolders,\n\tWorkerRequestDownloadArtwork,\n\tWorkerRequestFixTrack,\n\tWorkerRequestMoveFolders,\n\tWorkerRequestMoveTracks,\n\tWorkerRequestParameters,\n\tWorkerRequestRefreshRoot,\n\tWorkerRequestRemoveRoot,\n\tWorkerRequestRemoveTracks,\n\tWorkerRequestRenameArtwork,\n\tWorkerRequestRenameFolder,\n\tWorkerRequestRenameTrack,\n\tWorkerRequestUpdateArtwork,\n\tWorkerRequestUpdateRoot,\n\tWorkerRequestWriteTrackTags,\n\tWorkerService\n} from '../worker/worker.service';\n\nconst log = logger('IO');\n\nexport enum WorkerRequestMode {\n\trefreshRoot,\n\tremoveRoot,\n\tupdateRoot,\n\tcreateRoot,\n\n\tfixTrack,\n\tmoveTracks,\n\tremoveTracks,\n\trenameTrack,\n\twriteTrackTags,\n\n\tcreateFolder,\n\tdeleteFolders,\n\tmoveFolders,\n\trenameFolder,\n\n\tdeleteArtwork,\n\tdownloadArtwork,\n\tupdateArtwork,\n\tcreateArtwork,\n\trenameArtwork\n}\n\nclass WorkerRequest<T extends WorkerRequestParameters> {\n\n\tconstructor(\n\t\tpublic id: string, public mode: WorkerRequestMode,\n\t\tpublic execute: (parameters: T) => Promise<Changes>, public parameters: T\n\t) {\n\t}\n\n\tasync run(): Promise<Changes> {\n\t\ttry {\n\t\t\treturn await this.execute(this.parameters);\n\t\t} catch (e) {\n\t\t\tconsole.error(e.stack);\n\t\t\t// log.error('Scanning Error', this.rootID, e.toString());\n\t\t\tif (['EACCES', 'ENOENT'].includes(e.code)) {\n\t\t\t\treturn Promise.reject(Error('Directory not found/no access/error in filesystem'));\n\t\t\t}\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\nexport class IoService {\n\tpublic scanning = false;\n\tprivate scanningCount: undefined | number;\n\tprivate rootstatus = new Map<string, RootStatus>();\n\tprivate current: WorkerRequest<WorkerRequestParameters> | undefined;\n\tprivate queue: Array<WorkerRequest<WorkerRequestParameters>> = [];\n\tprivate delayedTrackTagWrite = new Map<string, { request: WorkerRequest<WorkerRequestWriteTrackTags>; timeout?: NodeJS.Timeout }>();\n\tprivate delayedTrackFix = new Map<string, { request: WorkerRequest<WorkerRequestFixTrack>; timeout?: NodeJS.Timeout }>();\n\tprivate nextID: number = Date.now();\n\tprivate afterScanTimeout: NodeJS.Timeout | undefined;\n\tprivate history: Array<{ id: string; error?: string; date: number }> = [];\n\n\tconstructor(private rootStore: RootStore, private workerService: WorkerService, private onRefresh: () => Promise<void>) {\n\t}\n\n\tprivate generateRequestID(): string {\n\t\tthis.nextID += 1;\n\t\treturn this.nextID.toString();\n\t}\n\n\tprivate async runRequest(cmd: WorkerRequest<WorkerRequestParameters>): Promise<void> {\n\t\tthis.clearAfterRefresh();\n\t\tthis.rootstatus.set(cmd.parameters.rootID, {lastScan: Date.now(), scanning: true});\n\t\ttry {\n\t\t\tthis.current = cmd;\n\t\t\tconst changes = await cmd.run();\n\t\t\tlogChanges(changes);\n\t\t\tthis.rootstatus.set(cmd.parameters.rootID, {lastScan: Date.now()});\n\t\t\tthis.history.push({id: cmd.id, date: Date.now()});\n\t\t\tthis.current = undefined;\n\t\t} catch (e) {\n\t\t\tthis.current = undefined;\n\t\t\tlet msg = e.toString();\n\t\t\tif (msg.startsWith('Error:')) {\n\t\t\t\tmsg = msg.slice(6).trim();\n\t\t\t}\n\t\t\tthis.rootstatus.set(cmd.parameters.rootID, {lastScan: Date.now(), error: msg});\n\t\t\tthis.history.push({id: cmd.id, error: msg, date: Date.now()});\n\t\t}\n\t\tif (this.queue.length === 0) {\n\t\t\tthis.runAfterRefresh();\n\t\t}\n\t}\n\n\tprivate runAfterRefresh(): void {\n\t\tthis.clearAfterRefresh();\n\t\tthis.afterScanTimeout = setTimeout(() => {\n\t\t\tthis.clearAfterRefresh();\n\t\t\tthis.onRefresh()\n\t\t\t\t.catch(e => {\n\t\t\t\t\tconsole.error(e);\n\t\t\t\t});\n\t\t}, 10000);\n\t}\n\n\tprivate clearAfterRefresh(): void {\n\t\tif (this.afterScanTimeout) {\n\t\t\tclearTimeout(this.afterScanTimeout);\n\t\t}\n\t\tthis.afterScanTimeout = undefined;\n\t}\n\n\tprivate findRequest(rootID: string, mode: WorkerRequestMode): WorkerRequest<WorkerRequestParameters> | undefined {\n\t\treturn this.queue.find(c => !!c.parameters.rootID && (c.parameters.rootID === rootID && c.mode === mode));\n\t}\n\n\tprivate async next(): Promise<void> {\n\t\tconst cmd = this.queue.shift();\n\t\tif (cmd) {\n\t\t\tawait this.runRequest(cmd);\n\t\t\tawait this.next();\n\t\t}\n\t}\n\n\tprivate run(): void {\n\t\tif (this.scanning) {\n\t\t\treturn;\n\t\t}\n\t\tthis.scanning = true;\n\t\tlog.info('Start Processing');\n\t\tthis.next()\n\t\t\t.then(() => {\n\t\t\t\tthis.scanning = false;\n\t\t\t\tlog.info('Stop Processing');\n\t\t\t})\n\t\t\t.catch(e => {\n\t\t\t\tthis.scanning = false;\n\t\t\t\tlog.info('Stop Processing');\n\t\t\t\tlog.error(e);\n\t\t\t});\n\n\t}\n\n\tprivate addRequest(req: WorkerRequest<any>): Jam.AdminChangeQueueInfo {\n\t\tthis.queue.push(req);\n\t\tthis.run();\n\t\treturn this.getRequestInfo(req);\n\t}\n\n\tprivate getRequestInfo(req: WorkerRequest<any>): Jam.AdminChangeQueueInfo {\n\t\tconst pos = this.queue.indexOf(req);\n\t\treturn {id: req.id, pos: pos >= 0 ? pos : undefined};\n\t}\n\n\tprivate newRequest<T extends WorkerRequestParameters>(mode: WorkerRequestMode, execute: (parameters: T) => Promise<Changes>, parameters: T): Jam.AdminChangeQueueInfo {\n\t\treturn this.addRequest(new WorkerRequest<T>(this.generateRequestID(), mode, execute, parameters));\n\t}\n\n\tgetAdminChangeQueueInfoStatus(id: string): Jam.AdminChangeQueueInfo {\n\t\tif (this.current && this.current.id === id) {\n\t\t\treturn {id};\n\t\t}\n\t\tconst cmd = this.queue.find(c => c.id === id);\n\t\tif (cmd) {\n\t\t\tconst pos = this.queue.indexOf(cmd);\n\t\t\treturn {id, pos: pos >= 0 ? pos : undefined};\n\t\t}\n\t\tconst done = this.history.find(c => c.id === id);\n\t\tif (done) {\n\t\t\treturn {id, error: done.error, done: done.date};\n\t\t}\n\t\tfor (const d of this.delayedTrackTagWrite) {\n\t\t\tif (d[1].request.id === id) {\n\t\t\t\treturn {id};\n\t\t\t}\n\t\t}\n\t\tfor (const d of this.delayedTrackFix) {\n\t\t\tif (d[1].request.id === id) {\n\t\t\t\treturn {id};\n\t\t\t}\n\t\t}\n\t\treturn {id, error: 'ID not found', done: Date.now()};\n\t}\n\n\tgetRootStatus(id: string): RootStatus {\n\t\tlet status = this.rootstatus.get(id);\n\t\tif (!status) {\n\t\t\tstatus = {lastScan: Date.now()};\n\t\t}\n\t\tif (!status.scanning) {\n\t\t\tconst cmd = this.queue.find(c => c.parameters.rootID === id);\n\t\t\tstatus.scanning = !!cmd;\n\t\t}\n\t\treturn status;\n\t}\n\n\tasync refresh(forceMetaRefresh?: boolean): Promise<Array<Jam.AdminChangeQueueInfo>> {\n\t\tconst rootIDs = await this.rootStore.allIds();\n\t\tconst result: Array<Jam.AdminChangeQueueInfo> = [];\n\t\tfor (const rootID of rootIDs) {\n\t\t\tresult.push(await this.refreshRoot(rootID, forceMetaRefresh));\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync refreshRoot(rootID: string, forceMetaRefresh?: boolean): Promise<Jam.AdminChangeQueueInfo> {\n\t\tconst oldRequest = this.findRequest(rootID, WorkerRequestMode.refreshRoot);\n\t\tif (oldRequest) {\n\t\t\tif (forceMetaRefresh) {\n\t\t\t\t(oldRequest.parameters as WorkerRequestRefreshRoot).forceMetaRefresh = true;\n\t\t\t}\n\t\t\treturn this.getRequestInfo(oldRequest);\n\t\t}\n\t\treturn this.newRequest<WorkerRequestRefreshRoot>(\n\t\t\tWorkerRequestMode.refreshRoot, p => this.workerService.refreshRoot(p), {rootID, forceMetaRefresh: !!forceMetaRefresh}\n\t\t);\n\t}\n\n\tasync removeRoot(rootID: string): Promise<Jam.AdminChangeQueueInfo> {\n\t\tconst oldRequest = this.findRequest(rootID, WorkerRequestMode.removeRoot);\n\t\tif (oldRequest) {\n\t\t\treturn this.getRequestInfo(oldRequest);\n\t\t}\n\t\treturn this.newRequest<WorkerRequestRemoveRoot>(\n\t\t\tWorkerRequestMode.removeRoot, p => this.workerService.removeRoot(p), {rootID}\n\t\t);\n\t}\n\n\tasync moveFolders(folderIDs: Array<string>, newParentID: string, rootID: string): Promise<Jam.AdminChangeQueueInfo> {\n\t\tconst oldRequest = this.queue.find(c =>\n\t\t\t(!!c.parameters.rootID) && (c.parameters.rootID === rootID) &&\n\t\t\t(c.mode === WorkerRequestMode.moveFolders) && ((c.parameters as WorkerRequestMoveFolders).newParentID === newParentID)\n\t\t);\n\t\tif (oldRequest) {\n\t\t\tfor (const id of folderIDs) {\n\t\t\t\tif (!(oldRequest.parameters as WorkerRequestMoveFolders).folderIDs.includes(id)) {\n\t\t\t\t\t(oldRequest.parameters as WorkerRequestMoveFolders).folderIDs.push(id);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this.getRequestInfo(oldRequest);\n\t\t}\n\t\treturn this.newRequest<WorkerRequestMoveFolders>(\n\t\t\tWorkerRequestMode.moveFolders, p => this.workerService.moveFolders(p), {rootID, newParentID, folderIDs}\n\t\t);\n\t}\n\n\tasync deleteFolder(id: string, rootID: string): Promise<Jam.AdminChangeQueueInfo> {\n\t\tconst oldRequest = this.findRequest(rootID, WorkerRequestMode.deleteFolders);\n\t\tif (oldRequest) {\n\t\t\tif (!(oldRequest.parameters as WorkerRequestDeleteFolders).folderIDs.includes(id)) {\n\t\t\t\t(oldRequest.parameters as WorkerRequestDeleteFolders).folderIDs.push(id);\n\t\t\t}\n\t\t\treturn this.getRequestInfo(oldRequest);\n\t\t}\n\t\treturn this.newRequest<WorkerRequestDeleteFolders>(\n\t\t\tWorkerRequestMode.deleteFolders, p => this.workerService.deleteFolders(p), {rootID, folderIDs: [id]}\n\t\t);\n\t}\n\n\tasync renameArtwork(folderID: string, artworkID: string, newname: string, rootID: string): Promise<Jam.AdminChangeQueueInfo> {\n\t\treturn this.newRequest<WorkerRequestRenameArtwork>(\n\t\t\tWorkerRequestMode.renameArtwork, p => this.workerService.renameArtwork(p), {rootID, folderID, artworkID, name: newname}\n\t\t);\n\t}\n\n\tasync updateArtwork(folderID: string, artworkID: string, artworkFilename: string, artworkMimeType: string, rootID: string): Promise<Jam.AdminChangeQueueInfo> {\n\t\treturn this.newRequest<WorkerRequestUpdateArtwork>(\n\t\t\tWorkerRequestMode.updateArtwork, p => this.workerService.updateArtwork(p), {rootID, folderID, artworkID, artworkFilename, artworkMimeType}\n\t\t);\n\t}\n\n\tasync createArtwork(folderID: string, artworkFilename: string, artworkMimeType: string, types: Array<ArtworkImageType>, rootID: string): Promise<Jam.AdminChangeQueueInfo> {\n\t\treturn this.newRequest<WorkerRequestCreateArtwork>(\n\t\t\tWorkerRequestMode.createArtwork, p => this.workerService.createArtwork(p), {rootID, folderID, artworkFilename, artworkMimeType, types}\n\t\t);\n\t}\n\n\tasync downloadArtwork(folderID: string, artworkURL: string, types: Array<ArtworkImageType>, rootID: string): Promise<Jam.AdminChangeQueueInfo> {\n\t\treturn this.newRequest<WorkerRequestDownloadArtwork>(\n\t\t\tWorkerRequestMode.downloadArtwork, p => this.workerService.downloadArtwork(p), {rootID, folderID, artworkURL, types}\n\t\t);\n\t}\n\n\tasync deleteArtwork(folderID: string, artworkID: string, rootID: string): Promise<Jam.AdminChangeQueueInfo> {\n\t\treturn this.newRequest<WorkerRequestDeleteArtwork>(\n\t\t\tWorkerRequestMode.deleteArtwork, p => this.workerService.deleteArtwork(p), {rootID, folderID, artworkID}\n\t\t);\n\t}\n\n\tasync removeTrack(id: string, rootID: string): Promise<Jam.AdminChangeQueueInfo> {\n\t\tconst oldRequest = this.findRequest(rootID, WorkerRequestMode.removeTracks);\n\t\tif (oldRequest) {\n\t\t\tif (!(oldRequest.parameters as WorkerRequestRemoveTracks).trackIDs.includes(id)) {\n\t\t\t\t(oldRequest.parameters as WorkerRequestRemoveTracks).trackIDs.push(id);\n\t\t\t}\n\t\t\treturn this.getRequestInfo(oldRequest);\n\t\t}\n\t\treturn this.newRequest<WorkerRequestRemoveTracks>(\n\t\t\tWorkerRequestMode.removeTracks, p => this.workerService.removeTracks(p), {rootID, trackIDs: [id]}\n\t\t);\n\t}\n\n\tasync moveTracks(trackIDs: Array<string>, newParentID: string, rootID: string): Promise<Jam.AdminChangeQueueInfo> {\n\t\tconst oldRequest = this.queue.find(c => (\n\t\t\t(!!c.parameters.rootID) && (c.parameters.rootID === rootID) &&\n\t\t\t(c.mode === WorkerRequestMode.moveTracks) && (c.parameters as WorkerRequestMoveTracks).newParentID === newParentID)\n\t\t);\n\t\tif (oldRequest) {\n\t\t\tfor (const id of trackIDs) {\n\t\t\t\tif (!(oldRequest.parameters as WorkerRequestMoveTracks).trackIDs.includes(id)) {\n\t\t\t\t\t(oldRequest.parameters as WorkerRequestMoveTracks).trackIDs.push(id);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this.getRequestInfo(oldRequest);\n\t\t}\n\t\treturn this.newRequest<WorkerRequestMoveTracks>(\n\t\t\tWorkerRequestMode.moveTracks, p => this.workerService.moveTracks(p), {rootID, trackIDs, newParentID}\n\t\t);\n\t}\n\n\tasync renameTrack(trackID: string, newName: string, rootID: string): Promise<Jam.AdminChangeQueueInfo> {\n\t\treturn this.newRequest<WorkerRequestRenameTrack>(\n\t\t\tWorkerRequestMode.renameTrack, p => this.workerService.renameTrack(p), {rootID, trackID, newName}\n\t\t);\n\t}\n\n\tasync writeRawTag(trackID: string, tag: Jam.RawTag, rootID: string): Promise<Jam.AdminChangeQueueInfo> {\n\t\tconst oldRequest = this.findRequest(rootID, WorkerRequestMode.writeTrackTags);\n\t\tif (oldRequest) {\n\t\t\t(oldRequest.parameters as WorkerRequestWriteTrackTags).tags.push({trackID, tag});\n\t\t\treturn this.getRequestInfo(oldRequest);\n\t\t}\n\t\tlet delayedCmd = this.delayedTrackTagWrite.get(rootID);\n\t\tif (delayedCmd) {\n\t\t\tif (delayedCmd.timeout) {\n\t\t\t\tclearTimeout(delayedCmd.timeout);\n\t\t\t}\n\t\t\t(delayedCmd.request.parameters).tags.push({trackID, tag});\n\t\t} else {\n\t\t\tdelayedCmd = {\n\t\t\t\trequest:\n\t\t\t\t\tnew WorkerRequest<WorkerRequestWriteTrackTags>(this.generateRequestID(),\n\t\t\t\t\t\tWorkerRequestMode.writeTrackTags, p => this.workerService.writeTrackTags(p), {rootID, tags: [{trackID, tag}]}),\n\t\t\t\ttimeout: undefined\n\t\t\t};\n\t\t\tthis.delayedTrackTagWrite.set(rootID, delayedCmd);\n\t\t}\n\t\tdelayedCmd.timeout = setTimeout(() => {\n\t\t\tthis.delayedTrackTagWrite.delete(rootID);\n\t\t\tif (delayedCmd) {\n\t\t\t\tthis.addRequest(delayedCmd.request);\n\t\t\t}\n\t\t}, 10000);\n\t\treturn this.getRequestInfo(delayedCmd.request);\n\t}\n\n\tasync fixTrack(trackID: string, fixID: TrackHealthID, rootID: string): Promise<Jam.AdminChangeQueueInfo> {\n\t\tconst oldRequest = this.findRequest(rootID, WorkerRequestMode.fixTrack);\n\t\tif (oldRequest) {\n\t\t\t(oldRequest.parameters as WorkerRequestFixTrack).fixes.push({trackID, fixID});\n\t\t\treturn this.getRequestInfo(oldRequest);\n\t\t}\n\t\tlet delayedCmd = this.delayedTrackFix.get(rootID);\n\t\tif (delayedCmd) {\n\t\t\tif (delayedCmd.timeout) {\n\t\t\t\tclearTimeout(delayedCmd.timeout);\n\t\t\t}\n\t\t\t(delayedCmd.request.parameters).fixes.push({trackID, fixID});\n\t\t} else {\n\t\t\tdelayedCmd = {\n\t\t\t\trequest:\n\t\t\t\t\tnew WorkerRequest<WorkerRequestFixTrack>(this.generateRequestID(),\n\t\t\t\t\t\tWorkerRequestMode.fixTrack, p => this.workerService.fixTracks(p), {rootID, fixes: [{trackID, fixID}]}),\n\t\t\t\ttimeout: undefined\n\t\t\t};\n\t\t\tthis.delayedTrackFix.set(rootID, delayedCmd);\n\t\t}\n\t\tdelayedCmd.timeout = setTimeout(() => {\n\t\t\tthis.delayedTrackFix.delete(rootID);\n\t\t\tif (delayedCmd) {\n\t\t\t\tthis.addRequest(delayedCmd.request);\n\t\t\t}\n\t\t}, 10000);\n\t\treturn this.getRequestInfo(delayedCmd.request);\n\t}\n\n\tasync renameFolder(folderID: string, newName: string, rootID: string): Promise<Jam.AdminChangeQueueInfo> {\n\t\treturn this.newRequest<WorkerRequestRenameFolder>(\n\t\t\tWorkerRequestMode.renameFolder, p => this.workerService.renameFolder(p), {rootID, folderID, newName}\n\t\t);\n\t}\n\n\tasync newFolder(parentID: string, name: string, rootID: string): Promise<Jam.AdminChangeQueueInfo> {\n\t\treturn this.newRequest<WorkerRequestCreateFolder>(\n\t\t\tWorkerRequestMode.createFolder, p => this.workerService.createFolder(p), {rootID, parentID, name}\n\t\t);\n\t}\n\n\tasync updateRoot(rootID: string, name: string, path: string, strategy: RootScanStrategy): Promise<Jam.AdminChangeQueueInfo> {\n\t\treturn this.newRequest<WorkerRequestUpdateRoot>(\n\t\t\tWorkerRequestMode.updateRoot, p => this.workerService.updateRoot(p), {rootID, name, path, strategy}\n\t\t);\n\t}\n\n\tasync createRoot(name: string, path: string, strategy: RootScanStrategy): Promise<Jam.AdminChangeQueueInfo> {\n\t\treturn this.newRequest<WorkerRequestCreateRoot>(\n\t\t\tWorkerRequestMode.createRoot, p => this.workerService.createRoot(p), {rootID: '', name, path, strategy}\n\t\t);\n\t}\n}\n","import moment from 'moment';\nimport {logger} from '../../../utils/logger';\nimport {Changes} from './changes';\n\nconst log = logger('IO');\n\nexport function logChanges(changes: Changes): void {\n\n\tfunction logChange(name: string, list: Array<any>): void {\n\t\tif (list.length > 0) {\n\t\t\tlog.info(name, list.length);\n\t\t}\n\t}\n\n\tconst v = moment.utc(changes.end - changes.start).format('HH:mm:ss.SSS');\n\tlog.info('Duration:', v);\n\tlogChange('Added Tracks', changes.newTracks);\n\tlogChange('Updated Tracks', changes.updateTracks);\n\tlogChange('Removed Tracks', changes.removedTracks);\n\tlogChange('Added Folders', changes.newFolders);\n\tlogChange('Updated Folders', changes.updateFolders);\n\tlogChange('Removed Folders', changes.removedFolders);\n\tlogChange('Added Artists', changes.newArtists);\n\tlogChange('Updated Artists', changes.updateArtists);\n\tlogChange('Removed Artists', changes.removedArtists);\n\tlogChange('Added Albums', changes.newAlbums);\n\tlogChange('Updated Albums', changes.updateAlbums);\n\tlogChange('Removed Albums', changes.removedAlbums);\n\tlogChange('Added Series', changes.newSeries);\n\tlogChange('Updated Series', changes.updateSeries);\n\tlogChange('Removed Series', changes.removedSeries);\n}\n","import moment from 'moment';\nimport path from 'path';\nimport {DBObjectType} from '../../db/db.types';\nimport {AcousticBrainz} from '../../model/acousticbrainz-rest-data';\nimport {Acoustid} from '../../model/acoustid-rest-data';\nimport {CoverArtArchive} from '../../model/coverartarchive-rest-data';\nimport {Jam} from '../../model/jam-rest-data';\nimport {CoverArtArchiveLookupType} from '../../model/jam-types';\nimport {LastFM} from '../../model/lastfm-rest-data';\nimport {MusicBrainz} from '../../model/musicbrainz-rest-data';\nimport {AudioModule} from '../../modules/audio/audio.module';\nimport {MusicbrainzClientApi} from '../../modules/audio/clients/musicbrainz-client.interface';\nimport {logger} from '../../utils/logger';\nimport {AlbumStore} from '../album/album.store';\nimport {ArtistStore} from '../artist/artist.store';\nimport {BaseStoreService} from '../base/base.service';\nimport {FolderStore} from '../folder/folder.store';\nimport {Track} from '../track/track.model';\nimport {TrackStore} from '../track/track.store';\nimport {MetaData} from './metadata.model';\nimport {MetadataServiceExtendedInfo} from './metadata.service.extended-info';\nimport {MetadataServiceSimilarArtists} from './metadata.service.similar-artists';\nimport {MetadataServiceSimilarTracks} from './metadata.service.similar-tracks';\nimport {MetadataServiceTopTracks} from './metadata.service.top-tracks';\nimport {MetaDataStore, SearchQueryMetaData} from './metadata.store';\nimport {MetaDataType} from './metadata.types';\n\nconst log = logger('Metadata');\n\nexport class MetaDataService extends BaseStoreService<MetaData, SearchQueryMetaData> {\n\textInfo: MetadataServiceExtendedInfo;\n\tsimilarArtists: MetadataServiceSimilarArtists;\n\tsimilarTracks: MetadataServiceSimilarTracks;\n\ttopTracks: MetadataServiceTopTracks;\n\n\tconstructor(\n\t\tprivate metadataStore: MetaDataStore, private folderStore: FolderStore, private trackStore: TrackStore,\n\t\tprivate albumStore: AlbumStore, private artistStore: ArtistStore, private audioModule: AudioModule\n\t) {\n\t\tsuper(metadataStore);\n\t\tthis.extInfo = new MetadataServiceExtendedInfo(this);\n\t\tthis.similarArtists = new MetadataServiceSimilarArtists(this, folderStore, artistStore);\n\t\tthis.similarTracks = new MetadataServiceSimilarTracks(this, trackStore);\n\t\tthis.topTracks = new MetadataServiceTopTracks(this);\n\t}\n\n\tdefaultSort(items: Array<MetaData>): Array<MetaData> {\n\t\treturn items;\n\t}\n\n\tprivate async addToStore(name: string, dataType: MetaDataType, data: any): Promise<void> {\n\t\tawait this.metadataStore.add({id: '', name, type: DBObjectType.metadata, dataType, data, date: Date.now()});\n\t}\n\n\tasync cleanUp(): Promise<void> {\n\t\tconst olderThan = Date.now() - moment.duration(1, 'd').asMilliseconds();\n\t\tconst removed = await this.metadataStore.removeByQuery({olderThan});\n\t\tif (removed > 0) {\n\t\t\tlog.info(`Removed meta data cache entries: ${removed} `);\n\t\t}\n\t}\n\n\tasync clear(): Promise<void> {\n\t\tconst ids = await this.metadataStore.allIds();\n\t\tawait this.metadataStore.remove(ids);\n\t}\n\n\tasync searchInStore<T>(name: string, dataType: MetaDataType, generate: () => Promise<any>): Promise<T> {\n\t\tconst result = await this.metadataStore.searchOne({name, dataType});\n\t\tif (result) {\n\t\t\treturn result.data;\n\t\t}\n\t\tconst data = await generate();\n\t\tawait this.addToStore(name, dataType, data);\n\t\treturn data;\n\t}\n\n\t// searches\n\n\tasync musicbrainzSearch(type: string, query: MusicbrainzClientApi.SearchQuery): Promise<MusicBrainz.Response> {\n\t\treturn this.searchInStore<MusicBrainz.Response>(`search-${type}${JSON.stringify(query)}`,\n\t\t\tMetaDataType.musicbrainz, async () => {\n\t\t\t\treturn this.audioModule.musicbrainz.search({type, query});\n\t\t\t});\n\t}\n\n\tasync acoustidLookupTrack(track: Track, includes: string | undefined): Promise<Array<Acoustid.Result>> {\n\t\treturn this.audioModule.acoustid.acoustid(path.join(track.path, track.name), includes);\n\t}\n\n\tasync lastFMLookup(type: string, mbid: string): Promise<LastFM.Result> {\n\t\treturn this.searchInStore<LastFM.Result>(`lookup-${type}${mbid}`,\n\t\t\tMetaDataType.lastfm, async () => {\n\t\t\t\treturn this.audioModule.lastFM.lookup(type, mbid);\n\t\t\t});\n\t}\n\n\tasync lastFMAlbumSearch(album: string, artist: string): Promise<LastFM.Result> {\n\t\treturn this.searchInStore<LastFM.Result>(`search-album-${album}//${artist}`,\n\t\t\tMetaDataType.lastfm, async () => {\n\t\t\t\treturn {album: await this.audioModule.lastFM.album(album, artist)};\n\t\t\t});\n\t}\n\n\tasync lastFMArtistSearch(artist: string): Promise<LastFM.Result> {\n\t\treturn this.searchInStore<LastFM.Result>(`search-artist-${artist}`,\n\t\t\tMetaDataType.lastfm, async () => {\n\t\t\t\treturn {artist: await this.audioModule.lastFM.artist(artist)};\n\t\t\t});\n\t}\n\n\tasync lastFMTopTracksArtist(artist: string): Promise<LastFM.Result> {\n\t\treturn this.searchInStore<LastFM.Result>(`toptracks-artist-${artist}`,\n\t\t\tMetaDataType.lastfm, async () => {\n\t\t\t\treturn {toptracks: await this.audioModule.lastFM.topArtistSongs(artist)};\n\t\t\t});\n\t}\n\n\tasync lastFMTopTracksArtistID(mbid: string): Promise<LastFM.Result> {\n\t\treturn this.searchInStore<LastFM.Result>(`toptracks-artistid-${mbid}`,\n\t\t\tMetaDataType.lastfm, async () => {\n\t\t\t\treturn {toptracks: await this.audioModule.lastFM.topArtistSongsID(mbid)};\n\t\t\t});\n\t}\n\n\tasync lastFMSimilarTracks(mbid: string): Promise<LastFM.Result> {\n\t\treturn this.searchInStore<LastFM.Result>(`similar-trackid-${mbid}`,\n\t\t\tMetaDataType.lastfm, async () => {\n\t\t\t\treturn {similartracks: await this.audioModule.lastFM.similarTrackID(mbid)};\n\t\t\t});\n\t}\n\n\tasync acousticbrainzLookup(mbid: string, nr: number | undefined): Promise<AcousticBrainz.Response> {\n\t\treturn this.searchInStore<AcousticBrainz.Response>(`lookup-${mbid}${nr !== undefined ? `-${nr}` : ''}`,\n\t\t\tMetaDataType.acousticbrainz, async () => {\n\t\t\t\treturn this.audioModule.acousticbrainz.highLevel(mbid, nr);\n\t\t\t});\n\t}\n\n\tasync coverartarchiveLookup(type: string, mbid: string): Promise<CoverArtArchive.Response> {\n\t\treturn this.searchInStore<CoverArtArchive.Response>(`lookup-${type}${mbid}`,\n\t\t\tMetaDataType.coverartarchive, async () => {\n\t\t\t\tif (type === CoverArtArchiveLookupType.release) {\n\t\t\t\t\treturn this.audioModule.coverArtArchive.releaseImages(mbid);\n\t\t\t\t}\n\t\t\t\tif (type === CoverArtArchiveLookupType.releaseGroup) {\n\t\t\t\t\treturn this.audioModule.coverArtArchive.releaseGroupImages(mbid);\n\t\t\t\t}\n\t\t\t\treturn Promise.reject(Error('Invalid CoverArtArchive Lookup Type'));\n\t\t\t});\n\t}\n\n\tasync musicbrainzLookup(type: string, mbid: string, inc?: string): Promise<MusicBrainz.Response> {\n\t\treturn this.searchInStore<MusicBrainz.Response>(`lookup-${type}${mbid}${inc ? inc : ''}`,\n\t\t\tMetaDataType.musicbrainz, async () => {\n\t\t\t\treturn this.audioModule.musicbrainz.lookup({type, id: mbid, inc});\n\t\t\t});\n\t}\n\n\tasync lyrics(artist: string, song: string): Promise<Jam.TrackLyrics> {\n\t\treturn this.searchInStore<Jam.TrackLyrics>(`lyrics-${artist}/${song}`,\n\t\t\tMetaDataType.lyrics, async () => {\n\t\t\t\tlet result = await this.audioModule.lyricsOVH.search(artist, song);\n\t\t\t\tconst cutVariants = ['(', '/', '[', ':'];\n\t\t\t\tfor (const cut of cutVariants) {\n\t\t\t\t\tif (!result || !result.lyrics) {\n\t\t\t\t\t\tif (song.includes(cut)) {\n\t\t\t\t\t\t\tconst title = song.slice(0, song.indexOf(cut)).trim();\n\t\t\t\t\t\t\tif (title.length > 0) {\n\t\t\t\t\t\t\t\tresult = await this.audioModule.lyricsOVH.search(artist, title);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t});\n\t}\n\n\tasync wikipediaSummary(title: string, lang: string | undefined): Promise<Jam.WikipediaSummaryResponse> {\n\t\tlang = lang || 'en';\n\t\treturn this.searchInStore<Jam.WikipediaSummaryResponse>(`summary-${title}/${lang}`,\n\t\t\tMetaDataType.wikipedia, async () => {\n\t\t\t\treturn {summary: await this.audioModule.wikipedia.summary(title, lang)};\n\t\t\t});\n\t}\n\n\tasync wikidataLookup(id: string): Promise<Jam.WikidataLookupResponse> {\n\t\treturn this.searchInStore<Jam.WikidataLookupResponse>(`wikidata-entity-${id}`,\n\t\t\tMetaDataType.wikidata, async () => {\n\t\t\t\tconst entity = await this.audioModule.wikipedia.wikidata(id);\n\t\t\t\treturn {id, type: DBObjectType.metadata, dataType: MetaDataType.wikidata, data: entity, date: Date.now()};\n\t\t\t});\n\t}\n\n\tasync wikidataSummary(id: string, lang: string | undefined): Promise<Jam.WikipediaSummaryResponse> {\n\t\treturn this.searchInStore<Jam.WikipediaSummaryResponse>(`wikidata-summary-${id}`,\n\t\t\tMetaDataType.wikidata, async () => {\n\t\t\t\tconst lookup = await this.wikidataLookup(id);\n\t\t\t\tif (!lookup) {\n\t\t\t\t\treturn {};\n\t\t\t\t}\n\t\t\t\tconst obj = lookup.entity || lookup.data;\n\t\t\t\tif (!obj) {\n\t\t\t\t\treturn {};\n\t\t\t\t}\n\t\t\t\tlang = lang || 'en';\n\t\t\t\tconst site = `${lang}wiki`;\n\t\t\t\tif (obj.sitelinks) {\n\t\t\t\t\tconst langSite = obj.sitelinks[site];\n\t\t\t\t\tif (!langSite) {\n\t\t\t\t\t\treturn {};\n\t\t\t\t\t}\n\t\t\t\t\treturn this.wikipediaSummary(langSite.title, lang);\n\t\t\t\t}\n\t\t\t\treturn {};\n\t\t\t});\n\t}\n\n}\n","import {Jam} from '../../model/jam-rest-data';\nimport {LastFMLookupType, MusicBrainzLookupType, MusicBrainzSearchType} from '../../model/jam-types';\nimport {logger} from '../../utils/logger';\nimport {Album} from '../album/album.model';\nimport {Artist} from '../artist/artist.model';\nimport {Folder} from '../folder/folder.model';\nimport {Series} from '../series/series.model';\nimport {MetaDataFormat} from './metadata.format';\nimport {MetaDataService} from './metadata.service';\n\nconst log = logger('Metadata');\n\nexport class MetadataServiceExtendedInfo {\n\tconstructor(private service: MetaDataService) {\n\n\t}\n\n\tprivate async getWikiDataExtendedInfo(id: string, lang: string): Promise<Jam.ExtendedInfo | undefined> {\n\t\tconst wiki = await this.service.wikidataSummary(id, lang);\n\t\tif (wiki && wiki.summary) {\n\t\t\treturn MetaDataFormat.formatWikipediaExtendedInfo(wiki.summary.url, wiki.summary.summary);\n\t\t}\n\t}\n\n\tprivate async getMusicBrainzIDWikipediaArtistInfo(mbArtistID: string): Promise<Jam.ExtendedInfo | undefined> {\n\t\tconst result = await this.service.musicbrainzLookup(MusicBrainzLookupType.artist, mbArtistID);\n\t\tif (result && result.artist && result.artist.relations) {\n\t\t\tlet rel = result.artist.relations.find(r => r.type === 'wikidata');\n\t\t\tif (rel && rel.url && rel.url.resource) {\n\t\t\t\tconst list = rel.url.resource.split('/');\n\t\t\t\tconst id = list[list.length - 1];\n\t\t\t\tconst res = this.getWikiDataExtendedInfo(id, 'en');\n\t\t\t\tif (res) {\n\t\t\t\t\treturn res;\n\t\t\t\t}\n\t\t\t}\n\t\t\trel = result.artist.relations.find(r => r.type === 'wikipedia');\n\t\t\tif (rel && rel.url && rel.url.resource) {\n\t\t\t\tconst list = rel.url.resource.split('/');\n\t\t\t\tconst title = list[list.length - 1];\n\t\t\t\tconst lang = list[2].split('.')[0];\n\t\t\t\tconst wiki = await this.service.wikipediaSummary(title, lang);\n\t\t\t\tif (wiki && wiki.summary) {\n\t\t\t\t\treturn MetaDataFormat.formatWikipediaExtendedInfo(wiki.summary.url, wiki.summary.summary);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async getMusicBrainzIDWikipediaAlbumInfo(mbReleaseID: string): Promise<Jam.ExtendedInfo | undefined> {\n\t\tconst lookup = await this.service.musicbrainzLookup(MusicBrainzLookupType.release, mbReleaseID);\n\t\tif (lookup && lookup.release && lookup.release.relations) {\n\t\t\tconst rel = lookup.release.relations.find(r => r.type === 'wikidata');\n\t\t\tif (rel && rel.url && rel.url.resource) {\n\t\t\t\tconst list = rel.url.resource.split('/');\n\t\t\t\tconst id = list[list.length - 1];\n\t\t\t\treturn this.getWikiDataExtendedInfo(id, 'en');\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async getLastFMArtistInfo(mbArtistID: string): Promise<Jam.ExtendedInfo | undefined> {\n\t\tconst lookup = await this.service.lastFMLookup(LastFMLookupType.artist, mbArtistID);\n\t\tif (lookup && lookup.artist && lookup.artist.bio && lookup.artist.bio.content) {\n\t\t\treturn MetaDataFormat.formatLastFMExtendedInfo(lookup.artist.url, lookup.artist.bio.content);\n\t\t}\n\t}\n\n\tprivate async getLastFMAlbumInfo(mbReleaseID: string): Promise<Jam.ExtendedInfo | undefined> {\n\t\tconst lookup = await this.service.lastFMLookup(LastFMLookupType.album, mbReleaseID);\n\t\tif (lookup && lookup.album && lookup.album.wiki && lookup.album.wiki.content) {\n\t\t\treturn MetaDataFormat.formatLastFMExtendedInfo(lookup.album.url, lookup.album.wiki.content);\n\t\t}\n\t}\n\n\tprivate async getArtistInfoByMusicBrainzID(mbArtistID: string): Promise<Jam.ExtendedInfo | undefined> {\n\t\tconst info = await this.getMusicBrainzIDWikipediaArtistInfo(mbArtistID);\n\t\tif (info) {\n\t\t\treturn info;\n\t\t}\n\t\treturn this.getLastFMArtistInfo(mbArtistID);\n\t}\n\n\tprivate async getAlbumInfoByMusicBrainzID(mbReleaseID: string): Promise<Jam.ExtendedInfo | undefined> {\n\t\tconst info = await this.getMusicBrainzIDWikipediaAlbumInfo(mbReleaseID);\n\t\tif (info) {\n\t\t\treturn info;\n\t\t}\n\t\treturn this.getLastFMAlbumInfo(mbReleaseID);\n\t}\n\n\tprivate async getArtistInfoByName(artistName: string): Promise<Jam.ExtendedInfo | undefined> {\n\t\tconst res = await this.service.musicbrainzSearch(MusicBrainzSearchType.artist, {artist: artistName});\n\t\tlet result: Jam.ExtendedInfo | undefined;\n\t\tif (res && res.artists && res.artists.length === 1) {\n\t\t\tresult = await this.getArtistInfoByMusicBrainzID(res.artists[0].id);\n\t\t}\n\t\tif (!result) {\n\t\t\tconst lastfm = await this.service.lastFMArtistSearch(artistName);\n\t\t\tif (lastfm && lastfm.artist && lastfm.artist.mbid) {\n\t\t\t\tresult = await this.getArtistInfoByMusicBrainzID(lastfm.artist.mbid);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate async getAlbumInfoByName(albumName: string, artistName: string): Promise<Jam.ExtendedInfo | undefined> {\n\t\tconst res = await this.service.musicbrainzSearch(MusicBrainzSearchType.release, {release: albumName, artist: artistName});\n\t\tlet info: Jam.ExtendedInfo | undefined;\n\t\tif (res && res.releases && res.releases.length > 1) {\n\t\t\tinfo = await this.getAlbumInfoByMusicBrainzID(res.releases[0].id);\n\t\t}\n\t\tif (!info) {\n\t\t\tconst lastfm = await this.service.lastFMAlbumSearch(albumName, artistName);\n\t\t\tif (lastfm && lastfm.album && lastfm.album.mbid) {\n\t\t\t\tinfo = await this.getAlbumInfoByMusicBrainzID(lastfm.album.mbid);\n\t\t\t}\n\t\t}\n\t\treturn info;\n\t}\n\n\tasync byArtist(artist: Artist): Promise<Jam.ExtendedInfo | undefined> {\n\t\tlet info: Jam.ExtendedInfo | undefined;\n\t\ttry {\n\t\t\tif (artist.mbArtistID) {\n\t\t\t\tinfo = await this.getArtistInfoByMusicBrainzID(artist.mbArtistID);\n\t\t\t}\n\t\t\tif (!info && artist.name) {\n\t\t\t\tinfo = await this.getArtistInfoByName(artist.name);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlog.error(e);\n\t\t}\n\t\treturn info;\n\t}\n\n\tasync bySeries(series: Series): Promise<Jam.ExtendedInfo | undefined> {\n\t\ttry {\n\t\t\tif (series.name) {\n\t\t\t\tconst info = await this.getArtistInfoByName(series.name);\n\t\t\t\tif (info) {\n\t\t\t\t\treturn info;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlog.error(e);\n\t\t}\n\t}\n\n\tasync byAlbum(album: Album): Promise<Jam.ExtendedInfo | undefined> {\n\t\tlet info: Jam.ExtendedInfo | undefined;\n\t\ttry {\n\t\t\tif (album.mbReleaseID) {\n\t\t\t\tinfo = await this.getAlbumInfoByMusicBrainzID(album.mbReleaseID);\n\t\t\t}\n\t\t\tif (!info && album.name && album.artist) {\n\t\t\t\tinfo = await this.getAlbumInfoByName(album.name, album.artist);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlog.error(e);\n\t\t}\n\t\treturn info;\n\t}\n\n\tasync byFolderArtist(folder: Folder): Promise<Jam.ExtendedInfo | undefined> {\n\t\tlet info: Jam.ExtendedInfo | undefined;\n\t\ttry {\n\t\t\tif (folder.tag.mbArtistID) {\n\t\t\t\tinfo = await this.getArtistInfoByMusicBrainzID(folder.tag.mbArtistID);\n\t\t\t}\n\t\t\tif (!info && folder.tag.artist) {\n\t\t\t\tinfo = await this.getArtistInfoByName(folder.tag.artist);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlog.error(e);\n\t\t}\n\t\treturn info;\n\t}\n\n\tasync byFolderAlbum(folder: Folder): Promise<Jam.ExtendedInfo | undefined> {\n\t\tlet info: Jam.ExtendedInfo | undefined;\n\t\ttry {\n\t\t\tif (folder.tag.mbReleaseID) {\n\t\t\t\tinfo = await this.getAlbumInfoByMusicBrainzID(folder.tag.mbReleaseID);\n\t\t\t}\n\t\t\tif (!info && folder.tag.album && folder.tag.artist) {\n\t\t\t\tinfo = await this.getAlbumInfoByName(folder.tag.album, folder.tag.artist);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlog.error(e);\n\t\t}\n\t\treturn info;\n\t}\n\n}\n","import {Jam} from '../../model/jam-rest-data';\n\nexport class MetaDataFormat {\n\n\tstatic stripInlineLastFM(content: string): string {\n\t\treturn (content || '').replace(/<a href=\".*\">Read more on Last\\.fm<\\/a>\\.?/g, '')\n\t\t\t.replace(/<a .* href=\".*\">Read more on Last\\.fm<\\/a>\\.?/g, '')\n\t\t\t.replace('User-contributed text is available under the Creative Commons By-SA License; additional terms may apply.', '');\n\t}\n\n\tstatic stripInlineWikipediaHTML(content: string): string {\n\t\treturn (content || '')\n\t\t\t.replace(/<p class=\"mw-empty-elt\">\\s*<\\/p>/g, '')\n\t\t\t.replace(/<p>/g, '')\n\t\t\t.replace(/<\\/p>/g, '\\n');\n\t}\n\n\tstatic formatWikipediaExtendedInfo(url: string, description: string): Jam.ExtendedInfo {\n\t\treturn {\n\t\t\turl,\n\t\t\tdescription: MetaDataFormat.stripInlineWikipediaHTML(description),\n\t\t\tsource: 'Wikipedia',\n\t\t\tlicense: 'Creative Commons BY-SA license',\n\t\t\tlicenseUrl: 'https://creativecommons.org/licenses/by-sa/3.0/'\n\t\t};\n\t}\n\n\tstatic formatLastFMExtendedInfo(url: string, description: string): Jam.ExtendedInfo {\n\t\treturn {\n\t\t\turl,\n\t\t\tdescription: MetaDataFormat.stripInlineLastFM(description),\n\t\t\tsource: 'LastFM',\n\t\t\tlicense: 'Creative Commons BY-SA license',\n\t\t\tlicenseUrl: 'https://creativecommons.org/licenses/by-sa/3.0/'\n\t\t};\n\t}\n\n}\n","import {FolderType, LastFMLookupType} from '../../model/jam-types';\nimport {LastFM} from '../../model/lastfm-rest-data';\nimport {logger} from '../../utils/logger';\nimport {Artist} from '../artist/artist.model';\nimport {ArtistStore} from '../artist/artist.store';\nimport {Folder} from '../folder/folder.model';\nimport {FolderStore} from '../folder/folder.store';\nimport {MetaDataService} from './metadata.service';\nimport SimilarArtist = LastFM.SimilarArtist;\n\nconst log = logger('Metadata');\n\nexport class MetadataServiceSimilarArtists {\n\tconstructor(private service: MetaDataService, private folderStore: FolderStore, private artistStore: ArtistStore) {\n\n\t}\n\n\tprivate async getLastFMSimilarArtists(mbArtistID: string): Promise<Array<SimilarArtist>> {\n\t\tconst lastfm = await this.service.lastFMLookup(LastFMLookupType.artist, mbArtistID);\n\t\tif (lastfm && lastfm.artist && lastfm.artist.similar && lastfm.artist.similar.artist) {\n\t\t\treturn lastfm.artist.similar.artist;\n\t\t}\n\t\treturn [];\n\t}\n\n\tprivate async findSimilarArtistFolders(similarArtists: Array<SimilarArtist>): Promise<Array<Folder>> {\n\t\tconst names: Array<string> = [];\n\t\tsimilarArtists.forEach(a => {\n\t\t\tif (a.name) {\n\t\t\t\tnames.push(a.name);\n\t\t\t}\n\t\t});\n\t\treturn (await this.folderStore.search({types: [FolderType.artist], artists: names})).items;\n\t}\n\n\tprivate async findSimilarArtists(similarArtists: Array<SimilarArtist>): Promise<Array<Artist>> {\n\t\tconst names: Array<string> = [];\n\t\tsimilarArtists.forEach(a => {\n\t\t\tif (a.name) {\n\t\t\t\tnames.push(a.name);\n\t\t\t}\n\t\t});\n\t\treturn (await this.artistStore.search({names})).items;\n\t}\n\n\tasync byArtistIdName(mbArtistID?: string, artist?: string): Promise<Array<SimilarArtist>> {\n\t\tlet similar: Array<SimilarArtist> = [];\n\t\tif (mbArtistID) {\n\t\t\tsimilar = await this.getLastFMSimilarArtists(mbArtistID);\n\t\t} else if (artist) {\n\t\t\tconst a = await this.service.lastFMArtistSearch(artist);\n\t\t\tif (a && a.artist) {\n\t\t\t\tsimilar = await this.getLastFMSimilarArtists(a.artist.mbid);\n\t\t\t}\n\t\t}\n\t\treturn similar;\n\t}\n\n\tasync byArtist(artist: Artist): Promise<Array<Artist>> {\n\t\ttry {\n\t\t\tconst similar = await this.byArtistIdName(artist.mbArtistID, artist.name);\n\t\t\tif (similar && similar.length > 0) {\n\t\t\t\treturn this.findSimilarArtists(similar);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlog.error(e);\n\t\t}\n\t\treturn [];\n\t}\n\n\tasync byFolder(folder: Folder): Promise<Array<Folder>> {\n\t\ttry {\n\t\t\tconst similar = await this.byArtistIdName(folder.tag.mbArtistID, folder.tag.artist);\n\t\t\tif (similar && similar.length > 0) {\n\t\t\t\treturn this.findSimilarArtistFolders(similar);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlog.error(e);\n\t\t}\n\t\treturn [];\n\t}\n\n}\n","import {LastFM} from '../../model/lastfm-rest-data';\nimport {shuffle} from '../../utils/random';\nimport {Album} from '../album/album.model';\nimport {Artist} from '../artist/artist.model';\nimport {Folder} from '../folder/folder.model';\nimport {Track} from '../track/track.model';\nimport {TrackStore} from '../track/track.store';\nimport {MetaDataService} from './metadata.service';\nimport SimilarArtist = LastFM.SimilarArtist;\n\nexport interface Song {\n\tname: string;\n\tartist: string;\n\tmbid: string;\n\turl: string;\n}\n\nexport class MetadataServiceSimilarTracks {\n\tconstructor(private service: MetaDataService, private trackStore: TrackStore) {\n\n\t}\n\n\tasync findSongTracks(songs: Array<Song>): Promise<Array<Track>> {\n\t\tconst ids: Array<Song> = [];\n\t\tconst vals: Array<Song> = [];\n\t\tconst result: Array<Track> = [];\n\t\tsongs.forEach(sim => {\n\t\t\tif (sim.mbid) {\n\t\t\t\tids.push(sim);\n\t\t\t} else {\n\t\t\t\tvals.push(sim);\n\t\t\t}\n\t\t});\n\t\tconst mbTrackIDs = ids.map(track => track.mbid || '-').filter(id => id !== '-');\n\t\tconst list = await this.trackStore.search({mbTrackIDs});\n\t\tids.forEach(sim => {\n\t\t\tconst t = list.items.find(tr => tr.tag.mbTrackID === sim.mbid);\n\t\t\tif (!t) {\n\t\t\t\tvals.push(sim);\n\t\t\t} else {\n\t\t\t\tresult.push(t);\n\t\t\t}\n\t\t});\n\t\tfor (const sim of vals) {\n\t\t\tconst track = await this.trackStore.searchOne({title: sim.name, artist: sim.artist});\n\t\t\tif (track) {\n\t\t\t\tresult.push(track);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate async getSimilarSongs(similar: Array<SimilarArtist>): Promise<Array<Song>> {\n\t\tlet tracks: Array<Song> = [];\n\t\tfor (const artist of similar) {\n\t\t\tlet data: LastFM.Result | undefined;\n\t\t\tif (artist.mbid) {\n\t\t\t\tdata = await this.service.lastFMTopTracksArtistID(artist.mbid);\n\t\t\t} else if (artist.name) {\n\t\t\t\tdata = await this.service.lastFMTopTracksArtist(artist.name);\n\t\t\t}\n\t\t\tif (data && data.toptracks && data.toptracks.track) {\n\t\t\t\ttracks = tracks.concat(data.toptracks.track.map(song => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tname: song.name,\n\t\t\t\t\t\tartist: song.artist.name,\n\t\t\t\t\t\tmbid: song.mbid,\n\t\t\t\t\t\turl: song.url\n\t\t\t\t\t};\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\t\treturn shuffle(tracks);\n\t}\n\n\tprivate async getSimilarArtistTracks(similars: Array<SimilarArtist>): Promise<Array<Track>> {\n\t\tif (!similars || similars.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\tconst songs = await this.getSimilarSongs(similars);\n\t\treturn this.findSongTracks(songs);\n\t}\n\n\tasync byAlbum(album: Album): Promise<Array<Track>> {\n\t\tconst similar = await this.service.similarArtists.byArtistIdName(album.mbArtistID, album.artist);\n\t\treturn this.getSimilarArtistTracks(similar);\n\t}\n\n\tasync byArtist(artist: Artist): Promise<Array<Track>> {\n\t\tconst similar = await this.service.similarArtists.byArtistIdName(artist.mbArtistID, artist.name);\n\t\treturn this.getSimilarArtistTracks(similar);\n\t}\n\n\tasync byFolder(folder: Folder): Promise<Array<Track>> {\n\t\tconst similar = await this.service.similarArtists.byArtistIdName(folder.tag.mbArtistID, folder.tag.artist);\n\t\treturn this.getSimilarArtistTracks(similar);\n\t}\n\n\tasync byTrack(track: Track): Promise<Array<Track>> {\n\t\tif (track.tag.mbTrackID) {\n\t\t\tconst data = await this.service.lastFMSimilarTracks(track.tag.mbTrackID);\n\t\t\tif (data && data.similartracks && data.similartracks.track) {\n\t\t\t\tconst songs = data.similartracks.track.map(t => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tname: t.name,\n\t\t\t\t\t\tartist: t.artist.name,\n\t\t\t\t\t\tmbid: t.mbid,\n\t\t\t\t\t\turl: t.url\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t\treturn this.findSongTracks(songs);\n\t\t\t}\n\t\t}\n\t\treturn [];\n\t}\n\n}\n","import {Track} from '../track/track.model';\nimport {MetaDataService} from './metadata.service';\nimport {Song} from './metadata.service.similar-tracks';\n\nexport class MetadataServiceTopTracks {\n\tconstructor(private service: MetaDataService) {\n\n\t}\n\n\tasync byArtistName(artist: string): Promise<Array<Track>> {\n\t\tconst result = await this.service.lastFMTopTracksArtist(artist);\n\t\tif (result && result.toptracks && result.toptracks.track) {\n\t\t\tconst songs: Array<Song> = result.toptracks.track.map(t => {\n\t\t\t\treturn {\n\t\t\t\t\tname: t.name,\n\t\t\t\t\tartist: t.artist.name,\n\t\t\t\t\tmbid: t.mbid,\n\t\t\t\t\turl: t.url\n\t\t\t\t};\n\t\t\t});\n\t\t\treturn this.service.similarTracks.findSongTracks(songs);\n\t\t}\n\t\treturn [];\n\t}\n\n}\n","export enum MetaDataType {\n\tmusicbrainz,\n\twikipedia,\n\twikidata,\n\tacoustid,\n\tacousticbrainz,\n\tcoverartarchive,\n\tlastfm,\n\tlyrics\n}\n","import {DBObjectType} from '../../db/db.types';\nimport {Episode} from '../episode/episode.model';\nimport {StateService} from '../state/state.service';\nimport {Track} from '../track/track.model';\nimport {User} from '../user/user.model';\nimport {NowPlaying} from './nowplaying.model';\n\nexport class NowPlayingService {\n\tplaying: Array<NowPlaying> = [];\n\n\tconstructor(private stateService: StateService) {\n\t}\n\n\tasync getNowPlaying(): Promise<Array<NowPlaying>> {\n\t\treturn this.playing;\n\t}\n\n\tclear(): void {\n\t\tthis.playing = [];\n\t}\n\n\tasync reportEpisode(episode: Episode, user: User): Promise<void> {\n\t\tthis.playing = this.playing.filter(np => (np.user.id !== user.id));\n\t\tthis.playing.push({\n\t\t\ttime: Date.now(),\n\t\t\tobj: episode,\n\t\t\tuser\n\t\t});\n\t\tawait this.stateService.reportPlaying(episode.id, DBObjectType.episode, user.id);\n\t\tawait this.stateService.reportPlaying(episode.podcastID, DBObjectType.podcast, user.id);\n\t}\n\n\tasync reportTrack(track: Track, user: User): Promise<void> {\n\t\tthis.playing = this.playing.filter(np => (np.user.id !== user.id));\n\t\tthis.playing.push({\n\t\t\ttime: Date.now(),\n\t\t\tobj: track,\n\t\t\tuser\n\t\t});\n\t\tawait this.stateService.reportPlaying(track.id, DBObjectType.track, user.id);\n\t\tawait this.stateService.reportPlaying(track.albumID, DBObjectType.album, user.id);\n\t\tawait this.stateService.reportPlaying(track.artistID, DBObjectType.artist, user.id);\n\t\tawait this.stateService.reportPlaying(track.parentID, DBObjectType.folder, user.id);\n\t\tif (track.seriesID) {\n\t\t\tawait this.stateService.reportPlaying(track.seriesID, DBObjectType.series, user.id);\n\t\t}\n\t}\n}\n","import {DBObjectType} from '../../db/db.types';\nimport {BaseStoreService} from '../base/base.service';\nimport {PlayQueue} from './playqueue.model';\nimport {PlayQueueStore, SearchQueryPlayQueue} from './playqueue.store';\n\nexport class PlayQueueService extends BaseStoreService<PlayQueue, SearchQueryPlayQueue> {\n\n\tconstructor(private playQueueStore: PlayQueueStore) {\n\t\tsuper(playQueueStore);\n\t}\n\n\tdefaultSort(items: Array<PlayQueue>): Array<PlayQueue> {\n\t\treturn items;\n\t}\n\n\tasync getQueueOrCreate(userID: string, client?: string): Promise<PlayQueue> {\n\t\tlet playQueue = await this.get(userID);\n\t\tif (!playQueue) {\n\t\t\tplayQueue = this.emptyPlaylist(userID, client);\n\t\t\tplayQueue.id = await this.playQueueStore.add(playQueue);\n\t\t}\n\t\treturn playQueue;\n\t}\n\n\temptyPlaylist(userID: string, client?: string): PlayQueue {\n\t\treturn {\n\t\t\tid: '',\n\t\t\ttype: DBObjectType.playqueue,\n\t\t\tuserID,\n\t\t\ttrackIDs: [],\n\t\t\tchanged: Date.now(),\n\t\t\tchangedBy: client || 'Unknown Client'\n\t\t};\n\t}\n\n\tasync get(userID: string): Promise<PlayQueue | undefined> {\n\t\treturn this.playQueueStore.searchOne({userID});\n\t}\n\n\tasync save(userID: string, trackIDs: Array<string>, currentID: string | undefined, position: number | undefined, client?: string): Promise<PlayQueue> {\n\t\tlet playQueue = await this.playQueueStore.searchOne({userID});\n\t\tif (!playQueue) {\n\t\t\tplayQueue = {\n\t\t\t\tid: '',\n\t\t\t\ttype: DBObjectType.playqueue,\n\t\t\t\tuserID,\n\t\t\t\ttrackIDs,\n\t\t\t\tcurrentID,\n\t\t\t\tposition,\n\t\t\t\tchanged: Date.now(),\n\t\t\t\tchangedBy: client || 'Unknown Client'\n\t\t\t};\n\t\t\tplayQueue.id = await this.playQueueStore.add(playQueue);\n\t\t} else {\n\t\t\tplayQueue.trackIDs = trackIDs;\n\t\t\tplayQueue.currentID = currentID;\n\t\t\tplayQueue.position = position;\n\t\t\tplayQueue.changed = Date.now();\n\t\t\tplayQueue.changedBy = client || 'Unknown Client';\n\t\t\tawait this.playQueueStore.replace(playQueue);\n\t\t}\n\t\treturn playQueue;\n\t}\n\n\tasync remove(userID: string): Promise<void> {\n\t\tconst playQueue = await this.get(userID);\n\t\tif (playQueue) {\n\t\t\tawait this.playQueueStore.remove(playQueue.id);\n\t\t}\n\t}\n\n}\n","import fse from 'fs-extra';\nimport path from 'path';\nimport {DBObjectType} from '../../db/db.types';\nimport {PodcastStatus} from '../../model/jam-types';\nimport {ImageModule} from '../../modules/image/image.module';\nimport {ApiBinaryResult} from '../../typings';\nimport {DebouncePromises} from '../../utils/debounce-promises';\nimport {Feed} from '../../utils/feed';\nimport {pathDeleteIfExists} from '../../utils/fs-utils';\nimport {logger} from '../../utils/logger';\nimport {BaseListService} from '../base/dbobject-list.service';\nimport {Episode} from '../episode/episode.model';\nimport {EpisodeService} from '../episode/episode.service';\nimport {StateService} from '../state/state.service';\nimport {Podcast} from './podcast.model';\nimport {PodcastStore, SearchQueryPodcast} from './podcast.store';\n\nconst log = logger('PodcastService');\n\nexport class PodcastService extends BaseListService<Podcast, SearchQueryPodcast> {\n\tprivate podcastRefreshDebounce = new DebouncePromises<void>();\n\n\tconstructor(private podcastsPath: string, public podcastStore: PodcastStore, private episodeService: EpisodeService, private imageModule: ImageModule, stateService: StateService) {\n\t\tsuper(podcastStore, stateService);\n\t}\n\n\tdefaultSort(items: Array<Podcast>): Array<Podcast> {\n\t\treturn items.sort((a, b) => (a.tag && a.tag.title ? a.tag.title : a.url).localeCompare((b.tag && b.tag.title ? b.tag.title : b.url)));\n\t}\n\n\tisDownloading(podcastId: string): boolean {\n\t\treturn this.podcastRefreshDebounce.isPending(podcastId);\n\t}\n\n\tasync create(url: string): Promise<Podcast> {\n\t\tconst podcast: Podcast = {\n\t\t\tid: '',\n\t\t\ttype: DBObjectType.podcast,\n\t\t\tcreated: Date.now(),\n\t\t\tlastCheck: 0,\n\t\t\turl,\n\t\t\tstatus: PodcastStatus.new\n\t\t};\n\t\tpodcast.id = await this.podcastStore.add(podcast);\n\t\treturn podcast;\n\t}\n\n\tasync remove(podcast: Podcast): Promise<void> {\n\t\tawait this.podcastStore.remove(podcast.id);\n\t\tawait this.episodeService.removeEpisodes(podcast.id);\n\t\tconst p = path.resolve(this.podcastsPath, podcast.id);\n\t\tawait pathDeleteIfExists(p);\n\t\tawait this.imageModule.clearImageCacheByIDs([podcast.id]);\n\t}\n\n\tasync refresh(podcast: Podcast): Promise<void> {\n\t\tif (this.podcastRefreshDebounce.isPending(podcast.id)) {\n\t\t\treturn this.podcastRefreshDebounce.append(podcast.id);\n\t\t}\n\t\tthis.podcastRefreshDebounce.setPending(podcast.id);\n\t\ttry {\n\t\t\tlog.debug('Refreshing Podcast', podcast.url);\n\t\t\tconst feed = new Feed();\n\t\t\tlet episodes: Array<Episode> = [];\n\t\t\ttry {\n\t\t\t\tconst result = await feed.get(podcast);\n\t\t\t\tif (result) {\n\t\t\t\t\tpodcast.tag = result.tag;\n\t\t\t\t\tepisodes = result.episodes;\n\t\t\t\t}\n\t\t\t\tpodcast.status = PodcastStatus.completed;\n\t\t\t\tpodcast.errorMessage = undefined;\n\t\t\t} catch (e) {\n\t\t\t\tlog.info('Refreshing Podcast failed', e);\n\t\t\t\tpodcast.status = PodcastStatus.error;\n\t\t\t\tpodcast.errorMessage = (e || '').toString();\n\t\t\t}\n\t\t\tpodcast.lastCheck = Date.now();\n\t\t\tif (podcast.image) {\n\t\t\t\tconst imageFile = path.resolve(this.podcastsPath, podcast.id, podcast.image);\n\t\t\t\tif (!(await fse.pathExists(imageFile))) {\n\t\t\t\t\tpodcast.image = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!podcast.image && podcast.tag && podcast.tag.image) {\n\t\t\t\tlog.info('Try downloading Podcast image');\n\t\t\t\tconst podcastPath = path.resolve(this.podcastsPath, podcast.id);\n\t\t\t\tawait fse.ensureDir(podcastPath);\n\t\t\t\ttry {\n\t\t\t\t\tpodcast.image = await this.imageModule.storeImage(podcastPath, 'cover', podcast.tag.image);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tpodcast.image = undefined;\n\t\t\t\t\tlog.info('Downloading Podcast image failed', e);\n\t\t\t\t}\n\t\t\t}\n\t\t\tawait this.podcastStore.replace(podcast);\n\t\t\tconst newEpisodes = await this.episodeService.mergeEpisodes(podcast.id, podcast.tag ? podcast.tag.title : podcast.url, episodes);\n\t\t\tlog.info(`${podcast.url}: New Episodes: ${newEpisodes.length}`);\n\t\t\tthis.podcastRefreshDebounce.resolve(podcast.id, undefined);\n\t\t} catch (e) {\n\t\t\tthis.podcastRefreshDebounce.resolve(podcast.id, undefined);\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n\n\tasync refreshPodcasts(): Promise<void> {\n\t\tlog.info('Refreshing');\n\t\tconst podcasts = await this.podcastStore.all();\n\t\tfor (const podcast of podcasts) {\n\t\t\tawait this.refresh(podcast);\n\t\t}\n\t\tlog.info('Refreshed');\n\t}\n\n\tasync getImage(podcast: Podcast, size?: number, format?: string): Promise<ApiBinaryResult | undefined> {\n\t\tif (podcast.image) {\n\t\t\treturn this.imageModule.get(podcast.id, path.join(this.podcastsPath, podcast.id, podcast.image), size, format);\n\t\t}\n\t}\n\n\tasync getEpisodeImage(episode: Episode, size: number | undefined, format: string | undefined): Promise<ApiBinaryResult | undefined> {\n\t\tconst result = await this.episodeService.getImage(episode, size, format);\n\t\tif (!result) {\n\t\t\tconst podcast = await this.podcastStore.byId(episode.podcastID);\n\t\t\tif (podcast) {\n\t\t\t\treturn this.getImage(podcast, size, format);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n","import FeedParser from 'feedparser';\nimport iconv from 'iconv-lite';\nimport moment from 'moment';\nimport request from 'request';\nimport stream from 'stream';\nimport zlib from 'zlib';\nimport {DBObjectType} from '../db/db.types';\nimport {Episode, PodcastEpisodeChapter} from '../engine/episode/episode.model';\nimport {Podcast, PodcastTag} from '../engine/podcast/podcast.model';\nimport {PodcastStatus} from '../model/jam-types';\n\nexport class Feed {\n\n\tstatic parseDurationMilliseconds(s: string): number {\n\t\treturn moment.duration(s).as('milliseconds');\n\t}\n\n\tstatic parseItunesDurationSeconds(s: string): number {\n\t\tconst num = Number(s);\n\t\tif (!s.includes(':') && !isNaN(num)) {\n\t\t\treturn num;\n\t\t}\n\t\treturn moment.duration(s).as('seconds');\n\t}\n\n\tstatic getParams(str: string): { [key: string]: string } {\n\t\treturn str.split(';').reduce(\n\t\t\t(para: { [key: string]: string }, param: string) => {\n\t\t\t\tconst parts = param.split('=').map(part => part.trim());\n\t\t\t\tif (parts.length === 2) {\n\t\t\t\t\tpara[parts[0]] = parts[1];\n\t\t\t\t}\n\t\t\t\treturn para;\n\t\t\t}, {});\n\t}\n\n\tstatic maybeDecompress(res: stream.Readable, encoding: string, done: (err?: Error) => void): stream.Readable {\n\t\tlet decompress;\n\t\tif (encoding.match(/\\bdeflate\\b/)) {\n\t\t\tdecompress = zlib.createInflate();\n\t\t\tdecompress.on('error', done);\n\t\t} else if (encoding.match(/\\bgzip\\b/)) {\n\t\t\tdecompress = zlib.createGunzip();\n\t\t\tdecompress.on('error', done);\n\t\t}\n\t\treturn decompress ? res.pipe(decompress) : res;\n\t}\n\n\tstatic maybeTranslate(res: stream.Readable, charset: string, done: (err?: Error) => void): stream.Readable {\n\t\t// Use iconv if its not utf8 already.\n\t\tif (charset && !/utf-*8/i.test(charset)) {\n\t\t\ttry {\n\t\t\t\tconst iv = iconv.decodeStream(charset);\n\t\t\t\t// console.log('Converting from charset %s to utf-8', charset);\n\t\t\t\tiv.on('error', done);\n\t\t\t\t// If we're using iconv, stream will be the output of iconv\n\t\t\t\t// otherwise it will remain the output of request\n\t\t\t\tres = res.pipe(iv) as any; // TODO: iconv stream doesn't return a stream.Readable?\n\t\t\t} catch (err) {\n\t\t\t\tres.emit('error', err);\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n\n\tprivate async fetch(url: string): Promise<{ feed: FeedParser.Node; posts: Array<FeedParser.Item> }> {\n\t\tconst posts: Array<FeedParser.Item> = [];\n\t\tlet feed: any;\n\t\tlet doneReported = false;\n\t\tconst req = request(url, {timeout: 10000, pool: false});\n\t\treq.setMaxListeners(50);\n\t\t// Some feeds do not respond without user-agent and accept headers.\n\t\treq.setHeader('user-agent', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36');\n\t\treq.setHeader('accept', 'text/html,application/xhtml+xml');\n\n\t\tconst feedParser = new FeedParser({});\n\n\t\tfeedParser.on('readable', function streamResponse(): void {\n\t\t\tconst response = feedParser;\n\t\t\tfeed = response.meta;\n\t\t\tlet item = response.read();\n\t\t\twhile (item) {\n\t\t\t\tposts.push(item);\n\t\t\t\titem = response.read();\n\t\t\t}\n\t\t});\n\n\t\treturn new Promise<{ feed: FeedParser.Node; posts: Array<FeedParser.Item> }>((resolve, reject) => {\n\t\t\tconst done = (err?: Error): void => {\n\t\t\t\tif (doneReported) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tdoneReported = true;\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve({feed, posts});\n\t\t\t\t}\n\t\t\t};\n\n\t\t\treq.on('error', done);\n\t\t\treq.on('response', (res: request.Response) => {\n\t\t\t\tif (res.statusCode !== 200) {\n\t\t\t\t\treq.abort();\n\t\t\t\t\treturn done(new Error(`Bad status code ${res.statusCode}${res.statusMessage ? ` ${res.statusMessage}` : ''}`));\n\t\t\t\t}\n\t\t\t\tconst encoding = res.headers['content-encoding'] || 'identity';\n\t\t\t\tconst charset = Feed.getParams(res.headers['content-type'] || '').charset;\n\t\t\t\tlet pipestream = Feed.maybeDecompress(res, encoding, done);\n\t\t\t\tpipestream = Feed.maybeTranslate(pipestream, charset, done);\n\t\t\t\tpipestream.pipe(feedParser);\n\t\t\t});\n\n\t\t\tfeedParser.on('error', done);\n\t\t\tfeedParser.on('end', done);\n\t\t});\n\t}\n\n\tpublic async get(podcast: Podcast): Promise<{ tag: PodcastTag; episodes: Array<Episode> }> {\n\t\tconst data = await this.fetch(podcast.url);\n\t\tconst tag: PodcastTag = {\n\t\t\ttitle: data.feed.title,\n\t\t\tdescription: data.feed.description,\n\t\t\tlink: data.feed.link,\n\t\t\tauthor: data.feed.author,\n\t\t\tgenerator: data.feed.generator,\n\t\t\timage: data.feed.image && data.feed.image.url ? data.feed.image.url : undefined,\n\t\t\tcategories: data.feed.categories\n\t\t};\n\t\tif (data.feed['itunes:summary'] && data.feed['itunes:summary']['#']) {\n\t\t\ttag.description = data.feed['itunes:summary']['#'];\n\t\t}\n\t\tconst episodes: Array<Episode> = data.posts.map(post => {\n\t\t\tlet chapters: Array<PodcastEpisodeChapter> = [];\n\n\t\t\tconst anypost = post as any;\n\t\t\tlet duration: number | undefined;\n\t\t\tif (anypost['itunes:duration'] && anypost['itunes:duration']['#']) {\n\t\t\t\tduration = Feed.parseItunesDurationSeconds(anypost['itunes:duration']['#']);\n\t\t\t}\n\t\t\tconst pscChaps: any = anypost['psc:chapters'];\n\t\t\tif (pscChaps) {\n\t\t\t\tconst pscChap: Array<any> = pscChaps['psc:chapter'];\n\t\t\t\tif (pscChap) {\n\t\t\t\t\tchapters = pscChap.map(item => {\n\t\t\t\t\t\tconst entry = item['@'];\n\t\t\t\t\t\treturn {start: Feed.parseDurationMilliseconds(entry.start), title: entry.title};\n\t\t\t\t\t}).sort((a, b) => a.start - b.start);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tid: '',\n\t\t\t\tpodcastID: podcast.id,\n\t\t\t\tpodcast: tag.title || '',\n\t\t\t\tstatus: PodcastStatus.new,\n\t\t\t\ttype: DBObjectType.episode,\n\t\t\t\tauthor: post.author,\n\t\t\t\tlink: post.link,\n\t\t\t\tguid: post.guid || post.link,\n\t\t\t\tsummary: post.summary,\n\t\t\t\tenclosures: post.enclosures as any, // TODO: validate podcast enclosures (wrong interface description?)\n\t\t\t\tdate: post.date ? post.date.valueOf() : 0,\n\t\t\t\tname: post.title,\n\t\t\t\tduration,\n\t\t\t\tchapters\n\t\t\t};\n\t\t});\n\t\treturn {tag, episodes};\n\t}\n\n}\n","module.exports = require(\"feedparser\");","module.exports = require(\"iconv-lite\");","module.exports = require(\"zlib\");","import {DBObjectType} from '../../db/db.types';\nimport {BaseStoreService} from '../base/base.service';\nimport {Radio} from './radio.model';\nimport {RadioStore, SearchQueryRadio} from './radio.store';\n\nexport class RadioService extends BaseStoreService<Radio, SearchQueryRadio> {\n\n\tconstructor(public radioStore: RadioStore) {\n\t\tsuper(radioStore);\n\t}\n\n\tdefaultSort(items: Array<Radio>): Array<Radio> {\n\t\treturn items.sort((a, b) => a.name.localeCompare(b.name));\n\t}\n\n\tasync create(name: string, url: string, homepageUrl?: string): Promise<Radio> {\n\t\tconst radio: Radio = {\n\t\t\tid: '',\n\t\t\ttype: DBObjectType.radio,\n\t\t\tname,\n\t\t\thomepage: homepageUrl,\n\t\t\turl,\n\t\t\tcreated: Date.now(),\n\t\t\tchanged: Date.now()\n\t\t};\n\t\tradio.id = await this.radioStore.add(radio);\n\t\treturn radio;\n\t}\n\n\tasync update(radio: Radio, name?: string, url?: string, homepageUrl?: string): Promise<void> {\n\t\tradio.homepage = homepageUrl || radio.homepage;\n\t\tradio.url = url || radio.url;\n\t\tradio.name = name || radio.name;\n\t\tradio.changed = Date.now();\n\t\tawait this.radioStore.replace(radio);\n\t}\n\n\tasync remove(radio: Radio): Promise<void> {\n\t\tawait this.radioStore.remove(radio.id);\n\t}\n}\n","import {BaseStoreService} from '../base/base.service';\nimport {Root} from './root.model';\nimport {RootStore, SearchQueryRoot} from './root.store';\n\nexport class RootService extends BaseStoreService<Root, SearchQueryRoot> {\n\n\tconstructor(public rootStore: RootStore) {\n\t\tsuper(rootStore);\n\t}\n\n\tdefaultSort(items: Array<Root>): Array<Root> {\n\t\treturn items.sort((a, b) => a.name.localeCompare(b.name));\n\t}\n\n}\n","import {ApiBinaryResult} from '../../typings';\nimport {BaseListService} from '../base/dbobject-list.service';\nimport {FolderService} from '../folder/folder.service';\nimport {StateService} from '../state/state.service';\nimport {TrackStore} from '../track/track.store';\nimport {Series} from './series.model';\nimport {SearchQuerySeries, SeriesStore} from './series.store';\n\nexport class SeriesService extends BaseListService<Series, SearchQuerySeries> {\n\n\tconstructor(public seriesStore: SeriesStore, private trackStore: TrackStore, private folderService: FolderService, stateService: StateService) {\n\t\tsuper(seriesStore, stateService);\n\t}\n\n\tdefaultSort(items: Array<Series>): Array<Series> {\n\t\treturn items.sort((a, b) => a.name.localeCompare(b.name));\n\t}\n\n\tasync getImage(series: Series, size?: number, format?: string): Promise<ApiBinaryResult | undefined> {\n\t\tconst folders = await this.folderService.folderStore.byIds(series.folderIDs);\n\t\tfolders.sort((a, b) => a.tag.level - b.tag.level);\n\t\tfor (const folder of folders) {\n\t\t\tconst result = this.folderService.getImage(folder, size, format);\n\t\t\tif (result) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t}\n\n}\n","import {BaseStoreService} from '../base/base.service';\nimport {Session} from './session.model';\nimport {SearchQuerySession, SessionStore} from './session.store';\n\nexport interface SessionNotifyEventObject {\n\tclearCache(): Promise<void>;\n}\n\nexport class SessionService extends BaseStoreService<Session, SearchQuerySession> {\n\tprivate events: Array<SessionNotifyEventObject> = [];\n\tprivate jwthCache: Array<string> = [];\n\n\tconstructor(public sessionStore: SessionStore) {\n\t\tsuper(sessionStore);\n\t}\n\n\tdefaultSort(items: Array<Session>): Array<Session> {\n\t\treturn items;\n\t}\n\n\texpired(data: Session): boolean {\n\t\treturn data.expires < Date.now();\n\t}\n\n\tasync exists(sessionID: string): Promise<boolean> {\n\t\treturn !!(await this.sessionStore.searchOne({sessionID}));\n\t}\n\n\tasync set(session: Session): Promise<void> {\n\t\tconst old = await this.get(session.sessionID);\n\t\tif (old) {\n\t\t\tsession.id = old.id;\n\t\t\tawait this.sessionStore.replace(session);\n\t\t} else {\n\t\t\tawait this.sessionStore.add(session);\n\t\t}\n\t}\n\n\tasync get(sessionID: string): Promise<Session | undefined> {\n\t\ttry {\n\t\t\tconst session = await this.sessionStore.searchOne({sessionID});\n\t\t\tif (session && this.expired(session)) {\n\t\t\t\tawait this.remove(sessionID);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn session;\n\t\t} catch (e) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tasync clearExpired(): Promise<void> {\n\t\tconst sessions = await this.sessionStore.all();\n\t\tfor (const session of sessions) {\n\t\t\tif (this.expired(session)) {\n\t\t\t\tawait this.remove(session.id);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync byJwth(jwth: string): Promise<Session | undefined> {\n\t\treturn this.sessionStore.searchOne({jwth});\n\t}\n\n\tasync byUserID(userID: string): Promise<Array<Session>> {\n\t\treturn (await this.sessionStore.search({userID})).items;\n\t}\n\n\tasync byID(id: string): Promise<Session | undefined> {\n\t\treturn this.sessionStore.byId(id);\n\t}\n\n\tasync remove(sessionID: string): Promise<void> {\n\t\tthis.jwthCache = [];\n\t\tawait this.sessionStore.removeByQuery({sessionID});\n\t}\n\n\tasync removeByJwth(jwth: string): Promise<void> {\n\t\tthis.jwthCache = [];\n\t\tawait this.sessionStore.removeByQuery({jwth});\n\t}\n\n\tasync all(): Promise<Array<Session>> {\n\t\treturn this.sessionStore.all();\n\t}\n\n\tasync clear(): Promise<void> {\n\t\tthis.jwthCache = [];\n\t\treturn this.sessionStore.clear();\n\t}\n\n\tasync count(): Promise<number> {\n\t\treturn this.sessionStore.count();\n\t}\n\n\tasync clearCache(): Promise<void> {\n\t\tthis.jwthCache = [];\n\t\tfor (const notify of this.events) {\n\t\t\tawait notify.clearCache();\n\t\t}\n\t}\n\n\tregisterNotify(notify: SessionNotifyEventObject): void {\n\t\tthis.events.push(notify);\n\t}\n\n\tasync isRevoked(jwth: string): Promise<boolean> {\n\t\tif (this.jwthCache.includes(jwth)) {\n\t\t\treturn false;\n\t\t}\n\t\tconst session = await this.sessionStore.searchOne({jwth});\n\t\tif (session) {\n\t\t\tthis.jwthCache.push(jwth);\n\t\t}\n\t\treturn !session;\n\t}\n\n}\n","import {defaultSettings} from '../../config/settings.default';\nimport {DBObjectType} from '../../db/db.types';\nimport {Jam} from '../../model/jam-rest-data';\nimport {AudioModule} from '../../modules/audio/audio.module';\nimport {ChatService} from '../chat/chat.service';\nimport {IndexService} from '../index/index.service';\nimport {WorkerService} from '../worker/worker.service';\nimport {Settings} from './settings.model';\nimport {SettingsStore} from './settings.store';\n\nexport class SettingsService {\n\tpublic settings: Jam.AdminSettings = defaultSettings();\n\n\tconstructor(\n\t\tpublic settingsStore: SettingsStore, private chatService: ChatService,\n\t\tprivate indexService: IndexService, private workerService: WorkerService,\n\t\tprivate audiomodule: AudioModule,\n\t\tprivate version: string) {\n\t}\n\n\tasync get(): Promise<Jam.AdminSettings> {\n\t\treturn this.settings;\n\t}\n\n\tasync settingsVersion(): Promise<string | undefined> {\n\t\tconst settings = await this.getSettings();\n\t\treturn settings.version;\n\t}\n\n\tasync saveSettings(): Promise<void> {\n\t\tconst settings = await this.getSettings();\n\t\tsettings.version = this.version;\n\t\tsettings.data = this.settings;\n\t\tawait this.settingsStore.upsert([settings]);\n\t}\n\n\tprivate initSettingsStoreObj(): Settings {\n\t\treturn {\n\t\t\tid: '',\n\t\t\ttype: DBObjectType.settings,\n\t\t\tsection: 'jamserve',\n\t\t\tdata: defaultSettings(),\n\t\t\tversion: this.version\n\t\t};\n\t}\n\n\tprivate async getSettings(): Promise<Settings> {\n\t\tlet settings = await this.settingsStore.searchOne({section: 'jamserve'});\n\t\tif (!settings) {\n\t\t\tsettings = this.initSettingsStoreObj();\n\t\t\tsettings.id = await this.settingsStore.add(settings);\n\t\t} else {\n\t\t\tsettings.data = {...defaultSettings(), ...settings.data};\n\t\t}\n\t\treturn settings;\n\t}\n\n\tasync loadSettings(): Promise<void> {\n\t\tconst settings = await this.getSettings();\n\t\tthis.setSettings(settings.data);\n\t}\n\n\tasync updateSettings(settings: Jam.AdminSettings): Promise<void> {\n\t\tthis.setSettings(settings);\n\t\tawait this.saveSettings();\n\t}\n\n\tprivate setSettings(settings: Jam.AdminSettings): void {\n\t\tthis.settings = settings;\n\t\tthis.chatService.setSettings(this.settings.chat);\n\t\tthis.indexService.setSettings(this.settings.index);\n\t\tthis.workerService.setSettings(this.settings.library);\n\t\tthis.audiomodule.setSettings(this.settings.externalServices);\n\t}\n}\n","import {Jam} from '../model/jam-rest-data';\n\nexport function defaultSettings(): Jam.AdminSettings {\n\treturn {\n\t\tchat: {\n\t\t\tmaxMessages: 100,\n\t\t\tmaxAge: {value: 1, unit: 'day'}\n\t\t},\n\t\tindex: {\n\t\t\tignoreArticles: ['The', 'El', 'La', 'Los', 'Las', 'Le', 'Les', 'Die']\n\t\t},\n\t\tlibrary: {\n\t\t\tscanAtStart: true\n\t\t},\n\t\texternalServices: {\n\t\t\tenabled: false\n\t\t}\n\t};\n}\n","import {DBObjectType} from '../../db/db.types';\nimport {BaseStoreService} from '../base/base.service';\nimport {State, States} from './state.model';\nimport {SearchQueryState, StateStore} from './state.store';\n\nexport class StateService extends BaseStoreService<State, SearchQueryState> {\n\n\tconstructor(public stateStore: StateStore) {\n\t\tsuper(stateStore);\n\t}\n\n\tdefaultSort(items: Array<State>): Array<State> {\n\t\treturn items;\n\t}\n\n\tprivate emptyState(destID: string, destType: DBObjectType, userID: string): State {\n\t\treturn {\n\t\t\tid: '',\n\t\t\ttype: DBObjectType.state,\n\t\t\tdestID,\n\t\t\tdestType,\n\t\t\tplayed: 0,\n\t\t\tlastplayed: 0,\n\t\t\tfaved: undefined,\n\t\t\trated: 0,\n\t\t\tuserID\n\t\t};\n\t}\n\n\tasync fav(id: string, type: DBObjectType, userID: string, remove: boolean): Promise<State> {\n\t\tconst state = await this.findOrCreate(id, userID, type);\n\t\tif (remove) {\n\t\t\tif (state.faved === undefined) {\n\t\t\t\treturn state;\n\t\t\t}\n\t\t\tstate.faved = undefined;\n\t\t} else {\n\t\t\tif (state.faved !== undefined) {\n\t\t\t\treturn state;\n\t\t\t}\n\t\t\tstate.faved = Date.now();\n\t\t}\n\t\tif (state.id.length === 0) {\n\t\t\tawait this.stateStore.add(state);\n\t\t} else {\n\t\t\tawait this.stateStore.replace(state);\n\t\t}\n\t\treturn state;\n\t}\n\n\tasync rate(id: string, type: DBObjectType, userID: string, rating: number): Promise<State> {\n\t\tconst state = await this.findOrCreate(id, userID, type);\n\t\tstate.rated = (rating === 0) ? undefined : rating;\n\t\tif (state.id.length === 0) {\n\t\t\tawait this.stateStore.add(state);\n\t\t} else {\n\t\t\tawait this.stateStore.replace(state);\n\t\t}\n\t\treturn state;\n\t}\n\n\tasync findOrCreate(destID: string, userID: string, type: DBObjectType): Promise<State> {\n\t\tconst state = await this.stateStore.searchOne({userID, destID, type});\n\t\treturn state || this.emptyState(destID, type, userID);\n\t}\n\n\tasync findOrCreateMany(destIDs: Array<string>, userID: string, type: DBObjectType): Promise<States> {\n\t\tif (!destIDs || destIDs.length === 0) {\n\t\t\treturn {};\n\t\t}\n\t\tconst list = await this.stateStore.search({userID, type, destIDs});\n\t\tconst result: { [id: string]: State } = {};\n\t\tlist.items.forEach(state => {\n\t\t\tresult[state.destID] = state;\n\t\t});\n\t\tdestIDs.forEach(id => {\n\t\t\tif (!result[id]) {\n\t\t\t\tresult[id] = this.emptyState(id, type, userID);\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\n\tasync getHighestRatedDestIDs(type: DBObjectType, userID: string): Promise<Array<string>> {\n\t\tconst states = await this.stateStore.search({userID, type, minRating: 1});\n\t\tconst ratings = states.items.filter(state => state.rated !== undefined).sort((a, b) => Number(b.rated) - Number(a.rated));\n\t\treturn ratings.map(a => a.destID);\n\t}\n\n\tasync getAvgHighestDestIDs(type: DBObjectType): Promise<Array<string>> {\n\t\tconst states = await this.stateStore.search({type});\n\t\tconst ratings: { [id: string]: Array<number> } = {};\n\t\tstates.items.forEach(state => {\n\t\t\tif (state.rated !== undefined) {\n\t\t\t\tratings[state.destID] = ratings[state.destID] || [];\n\t\t\t\tratings[state.destID].push(state.rated);\n\t\t\t}\n\t\t});\n\t\tconst list = Object.keys(ratings).map(key => {\n\t\t\treturn {\n\t\t\t\tid: key,\n\t\t\t\tavg: ratings[key].reduce((b, c) => (b + c), 0) / ratings[key].length\n\t\t\t};\n\t\t}).sort((a, b) => (b.avg - a.avg));\n\t\treturn list.map(a => a.id);\n\t}\n\n\tasync getFrequentlyPlayedDestIDs(type: DBObjectType, userID: string): Promise<Array<string>> {\n\t\tconst states = await this.stateStore.search({userID, type, isPlayed: true});\n\t\treturn states.items.sort((a, b) => b.played - a.played).map(a => a.destID);\n\t}\n\n\tasync getFavedDestIDs(type: DBObjectType, userID: string): Promise<Array<string>> {\n\t\tconst states = await this.stateStore.search({userID, type, isFaved: true});\n\t\treturn states.items.sort((a, b) => Number(b.faved) - Number(a.faved)).map(a => a.destID);\n\t}\n\n\tasync getRecentlyPlayedDestIDs(type: DBObjectType, userID: string): Promise<Array<string>> {\n\t\tconst states = await this.stateStore.search({userID, type, isPlayed: true});\n\t\treturn states.items.sort((a, b) => b.lastplayed - a.lastplayed).map(a => a.destID);\n\t}\n\n\tasync reportPlaying(id: string, type: DBObjectType, userID: string): Promise<State> {\n\t\tconst state = await this.findOrCreate(id, userID, type);\n\t\tstate.played++;\n\t\tstate.lastplayed = Date.now();\n\t\tawait this.stateStore.upsert([state]);\n\t\treturn state;\n\t}\n\n}\n","import {AlbumType, MUSICBRAINZ_VARIOUS_ARTISTS_ID} from '../../model/jam-types';\nimport {Store} from '../store/store';\nimport {Stats} from './stats.model';\n\nexport class StatsService {\n\tprivate stats: Array<Stats> = [];\n\n\tconstructor(private store: Store) {\n\t}\n\n\tasync refresh(): Promise<void> {\n\t\tthis.stats = [];\n\t}\n\n\tasync getStats(rootID?: string): Promise<Stats> {\n\t\tlet stat = this.stats.find(s => s.rootID === rootID);\n\t\tif (!stat) {\n\t\t\tstat = {\n\t\t\t\trootID,\n\t\t\t\talbum: await this.store.albumStore.searchCount({rootID}),\n\t\t\t\tseries: await this.store.seriesStore.searchCount({rootID}),\n\t\t\t\talbumTypes: {\n\t\t\t\t\talbum: await this.store.albumStore.searchCount({rootID, albumType: AlbumType.album}),\n\t\t\t\t\tcompilation: await this.store.albumStore.searchCount({rootID, albumType: AlbumType.compilation, mbArtistID: MUSICBRAINZ_VARIOUS_ARTISTS_ID}),\n\t\t\t\t\tartist_compilation:\n\t\t\t\t\t\tawait this.store.albumStore.searchCount({rootID, albumType: AlbumType.compilation}) -\n\t\t\t\t\t\tawait this.store.albumStore.searchCount({rootID, albumType: AlbumType.compilation, mbArtistID: MUSICBRAINZ_VARIOUS_ARTISTS_ID}),\n\t\t\t\t\taudiobook: await this.store.albumStore.searchCount({rootID, albumType: AlbumType.audiobook}),\n\t\t\t\t\tseries: await this.store.albumStore.searchCount({rootID, albumType: AlbumType.series}),\n\t\t\t\t\tsoundtrack: await this.store.albumStore.searchCount({rootID, albumType: AlbumType.soundtrack}),\n\t\t\t\t\tbootleg: await this.store.albumStore.searchCount({rootID, albumType: AlbumType.bootleg}),\n\t\t\t\t\tlive: await this.store.albumStore.searchCount({rootID, albumType: AlbumType.live}),\n\t\t\t\t\tep: await this.store.albumStore.searchCount({rootID, albumType: AlbumType.ep}),\n\t\t\t\t\tunknown: await this.store.albumStore.searchCount({rootID, albumType: AlbumType.unknown}),\n\t\t\t\t\tsingle: await this.store.albumStore.searchCount({rootID, albumType: AlbumType.single})\n\t\t\t\t},\n\t\t\t\tartist: await this.store.artistStore.searchCount({rootID}),\n\t\t\t\tartistTypes: {\n\t\t\t\t\talbum: await this.store.artistStore.searchCount({rootID, albumType: AlbumType.album}),\n\t\t\t\t\tcompilation: await this.store.artistStore.searchCount({rootID, albumType: AlbumType.compilation, mbArtistID: MUSICBRAINZ_VARIOUS_ARTISTS_ID}),\n\t\t\t\t\tartist_compilation:\n\t\t\t\t\t\tawait this.store.artistStore.searchCount({rootID, albumType: AlbumType.compilation}) -\n\t\t\t\t\t\tawait this.store.artistStore.searchCount({rootID, albumType: AlbumType.compilation, mbArtistID: MUSICBRAINZ_VARIOUS_ARTISTS_ID}),\n\t\t\t\t\taudiobook: await this.store.artistStore.searchCount({rootID, albumType: AlbumType.audiobook}),\n\t\t\t\t\tseries: await this.store.artistStore.searchCount({rootID, albumType: AlbumType.series}),\n\t\t\t\t\tsoundtrack: await this.store.artistStore.searchCount({rootID, albumType: AlbumType.soundtrack}),\n\t\t\t\t\tbootleg: await this.store.artistStore.searchCount({rootID, albumType: AlbumType.bootleg}),\n\t\t\t\t\tlive: await this.store.artistStore.searchCount({rootID, albumType: AlbumType.live}),\n\t\t\t\t\tep: await this.store.artistStore.searchCount({rootID, albumType: AlbumType.ep}),\n\t\t\t\t\tunknown: await this.store.artistStore.searchCount({rootID, albumType: AlbumType.unknown}),\n\t\t\t\t\tsingle: await this.store.artistStore.searchCount({rootID, albumType: AlbumType.single})\n\t\t\t\t},\n\t\t\t\tfolder: await this.store.folderStore.searchCount({rootID}),\n\t\t\t\ttrack: await this.store.trackStore.searchCount({rootID})\n\t\t\t};\n\t\t\tthis.stats.push(stat);\n\t\t}\n\t\treturn stat;\n\t}\n\n}\n","import fse from 'fs-extra';\nimport path from 'path';\nimport {GenericError} from '../../api/jam/error';\nimport {AudioFormatType} from '../../model/jam-types';\nimport {AudioModule} from '../../modules/audio/audio.module';\nimport {TranscoderStream} from '../../modules/audio/transcoder/transcoder-stream';\nimport {ApiBinaryResult} from '../../typings';\nimport {fileSuffix} from '../../utils/fs-utils';\nimport {Episode} from '../episode/episode.model';\nimport {Track} from '../track/track.model';\nimport {User} from '../user/user.model';\n\nexport class StreamService {\n\n\tconstructor(private audioModule: AudioModule) {\n\t}\n\n\tasync streamFile(filename: string, id: string, sourceFormat?: string, destFormat?: string, maxBitRate?: number): Promise<ApiBinaryResult> {\n\t\tlet stats: fse.Stats | undefined;\n\t\ttry {\n\t\t\tstats = await fse.stat(filename);\n\t\t} catch (e) {\n\t\t\tstats = undefined;\n\t\t}\n\t\tif (!stats) {\n\t\t\treturn Promise.reject(Error('File not found'));\n\t\t}\n\t\tdestFormat = destFormat || AudioFormatType.mp3;\n\t\tif (destFormat[0] === '.') {\n\t\t\tdestFormat = destFormat.slice(1);\n\t\t}\n\t\tconst bitRate = maxBitRate || 0;\n\t\tif (destFormat !== 'raw' && TranscoderStream.needsTranscoding(sourceFormat || fileSuffix(filename), destFormat, bitRate)) {\n\t\t\treturn this.audioModule.transcoder.get(filename, id, destFormat, bitRate);\n\t\t}\n\t\treturn {file: {filename, name: `${id}.${destFormat}`}};\n\t}\n\n\tasync streamTrack(track: Track, format: string | undefined, maxBitRate: number | undefined, user: User): Promise<ApiBinaryResult> {\n\t\treturn this.streamFile(path.join(track.path, track.name), track.id, track.media.format, format, maxBitRate);\n\t}\n\n\tasync streamEpisode(episode: Episode, format: string | undefined, maxBitRate: number | undefined, user: User): Promise<ApiBinaryResult> {\n\t\tif (episode.path && episode.media) {\n\t\t\treturn this.streamFile(episode.path, episode.id, episode.media.format, format, maxBitRate);\n\t\t}\n\t\treturn Promise.reject(GenericError('Podcast episode not ready'));\n\t}\n\n}\n","import path from 'path';\nimport {AudioModule} from '../../modules/audio/audio.module';\nimport {ImageModule} from '../../modules/image/image.module';\nimport {ApiBinaryResult} from '../../typings';\nimport {BaseListService} from '../base/dbobject-list.service';\nimport {Folder} from '../folder/folder.model';\nimport {FolderService} from '../folder/folder.service';\nimport {StateService} from '../state/state.service';\nimport {Track} from './track.model';\nimport {SearchQueryTrack, TrackStore} from './track.store';\nimport {logger} from '../../utils/logger';\n\nconst log = logger('TrackService');\n\nexport class TrackService extends BaseListService<Track, SearchQueryTrack> {\n\n\tconstructor(public trackStore: TrackStore, private folderService: FolderService, private audioModule: AudioModule, private imageModule: ImageModule, stateService: StateService) {\n\t\tsuper(trackStore, stateService);\n\t}\n\n\tdefaultCompare(a: Track, b: Track): number {\n\t\tlet res = a.path.localeCompare(b.path);\n\t\tif (res !== 0) {\n\t\t\treturn res;\n\t\t}\n\t\tif (a.tag.disc !== undefined && b.tag.disc !== undefined) {\n\t\t\tres = a.tag.disc - b.tag.disc;\n\t\t\tif (res !== 0) {\n\t\t\t\treturn res;\n\t\t\t}\n\t\t}\n\t\tif (a.tag.track !== undefined && b.tag.track !== undefined) {\n\t\t\tres = a.tag.track - b.tag.track;\n\t\t\tif (res !== 0) {\n\t\t\t\treturn res;\n\t\t\t}\n\t\t}\n\t\treturn a.name.localeCompare(b.name);\n\t}\n\n\tdefaultSort(tracks: Array<Track>): Array<Track> {\n\t\treturn tracks.sort((a, b) => this.defaultCompare(a, b));\n\t}\n\n\tasync getTrackFolder(track: Track): Promise<Folder | undefined> {\n\t\treturn this.folderService.folderStore.byId(track.parentID);\n\t}\n\n\tasync getImage(track: Track, size?: number, format?: string): Promise<ApiBinaryResult | undefined> {\n\t\tif (track.tag && track.tag.nrTagImages) {\n\t\t\tconst result = await this.imageModule.getExisting(track.id, size, format);\n\t\t\tif (result) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst buffer = await this.audioModule.extractTagImage(path.join(track.path, track.name));\n\t\t\t\tif (buffer) {\n\t\t\t\t\treturn await this.imageModule.getBuffer(track.id, buffer, size, format);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tlog.error('TrackService', 'Extracting image from audio failed: ' + path.join(track.path, track.name));\n\t\t\t}\n\t\t}\n\t\tconst folder = await this.getTrackFolder(track);\n\t\tif (folder) {\n\t\t\treturn this.folderService.getImage(folder, size, format);\n\t\t}\n\t}\n\n}\n","import commonPassword from 'common-password-checker';\nimport fse from 'fs-extra';\nimport path from 'path';\nimport {ImageModule} from '../../modules/image/image.module';\nimport {ApiBinaryResult} from '../../typings';\nimport {fileDeleteIfExists} from '../../utils/fs-utils';\nimport {hashAndSaltSHA512, hashSaltSHA512} from '../../utils/hash';\nimport {BaseStoreService} from '../base/base.service';\nimport {BookmarkStore} from '../bookmark/bookmark.store';\nimport {PlaylistStore} from '../playlist/playlist.store';\nimport {PlayQueueStore} from '../playqueue/playqueue.store';\nimport {SessionStore} from '../session/session.store';\nimport {StateStore} from '../state/state.store';\nimport {User} from './user.model';\nimport {SearchQueryUser, UserStore} from './user.store';\n\nexport class UserService extends BaseStoreService<User, SearchQueryUser> {\n\tprivate cachedUsers = new Map<string, User>();\n\n\tconstructor(\n\t\tpublic userAvatarPath: string, public userStore: UserStore,\n\t\tprivate stateStore: StateStore, private playlistStore: PlaylistStore,\n\t\tprivate bookmarkStore: BookmarkStore, private playQueueStore: PlayQueueStore,\n\t\tprivate sessionStore: SessionStore, private imageModule: ImageModule\n\t) {\n\t\tsuper(userStore);\n\t}\n\n\tdefaultSort(items: Array<User>): Array<User> {\n\t\treturn items.sort((a, b) => a.name.localeCompare(b.name));\n\t}\n\n\tprivate avatarImageFilename(user: User): string {\n\t\treturn path.join(this.userAvatarPath, `avatar-${user.id}.png`);\n\t}\n\n\tasync getImage(user: User, size?: number, format?: string): Promise<ApiBinaryResult | undefined> {\n\t\tconst filename = this.avatarImageFilename(user);\n\t\tlet exists = await fse.pathExists(filename);\n\t\tif (!exists) {\n\t\t\tawait this.generateAvatar(user);\n\t\t\texists = await fse.pathExists(filename);\n\t\t}\n\t\tif (exists) {\n\t\t\treturn this.imageModule.get(user.id, filename, size, format);\n\t\t}\n\t}\n\n\tasync generateAvatar(user: User, seed?: string): Promise<void> {\n\t\tconst filename = this.avatarImageFilename(user);\n\t\tawait fileDeleteIfExists(filename);\n\t\tawait this.imageModule.generateAvatar(seed || user.name, filename);\n\t\tawait this.imageModule.clearImageCacheByIDs([user.id]);\n\t}\n\n\tasync setUserImage(user: User, filename: string, mimetype?: string): Promise<void> {\n\t\tconst destName = this.avatarImageFilename(user);\n\t\tawait this.imageModule.createAvatar(filename, destName);\n\t\tawait fileDeleteIfExists(filename);\n\t\tawait this.imageModule.clearImageCacheByIDs([user.id]);\n\t}\n\n\tasync create(user: User): Promise<string> {\n\t\tif (!user.name || user.name.trim().length === 0) {\n\t\t\treturn Promise.reject(Error('Invalid Username'));\n\t\t}\n\t\tconst existingUser = await this.getByName(user.name);\n\t\tif (existingUser) {\n\t\t\treturn Promise.reject(Error('Username already exists'));\n\t\t}\n\t\treturn this.userStore.add(user);\n\t}\n\n\tasync update(user: User): Promise<void> {\n\t\tawait this.userStore.replace(user);\n\t\tthis.cachedUsers.delete(user.id);\n\t}\n\n\tasync remove(user: User): Promise<void> {\n\t\tthis.cachedUsers.delete(user.id);\n\t\tawait this.stateStore.removeByQuery({userID: user.id});\n\t\tawait this.playlistStore.removeByQuery({userID: user.id});\n\t\tawait this.bookmarkStore.removeByQuery({userID: user.id});\n\t\tawait this.playQueueStore.removeByQuery({userID: user.id});\n\t\tawait this.sessionStore.removeByQuery({userID: user.id});\n\t\tawait this.imageModule.clearImageCacheByIDs([user.id]);\n\t\tawait this.userStore.remove(user.id);\n\t\tawait fileDeleteIfExists(this.avatarImageFilename(user));\n\t\t// TODO: remove user chat msg on user.delete\n\t}\n\n\tasync getByName(name: string): Promise<User | undefined> {\n\t\tif (!name || name.trim().length === 0) {\n\t\t\treturn Promise.reject(Error('Invalid Username'));\n\t\t}\n\t\tfor (const c of this.cachedUsers) {\n\t\t\tif (c[1].name === name) {\n\t\t\t\treturn c[1];\n\t\t\t}\n\t\t}\n\t\tconst user = await this.userStore.searchOne({name});\n\t\tif (user) {\n\t\t\tthis.cachedUsers.set(user.id, user);\n\t\t}\n\t\treturn user;\n\t}\n\n\tasync getByID(id: string): Promise<User | undefined> {\n\t\tlet user: User | undefined = this.cachedUsers.get(id);\n\t\tif (user) {\n\t\t\treturn user;\n\t\t}\n\t\tuser = await this.userStore.byId(id);\n\t\tif (user) {\n\t\t\tthis.cachedUsers.set(id, user);\n\t\t}\n\t\treturn user;\n\t}\n\n\tasync auth(name: string, pass: string): Promise<User> {\n\t\tif ((!pass) || (!pass.length)) {\n\t\t\treturn Promise.reject(Error('Invalid Password'));\n\t\t}\n\t\tconst user = await this.getByName(name);\n\t\tif (!user) {\n\t\t\treturn Promise.reject(Error('Invalid Username'));\n\t\t}\n\t\tconst hash = hashSaltSHA512(pass, user.salt);\n\t\tif (hash !== user.hash) {\n\t\t\treturn Promise.reject(Error('Invalid Password'));\n\t\t}\n\t\treturn user;\n\t}\n\n\tpublic clearCache(): void {\n\t\tthis.cachedUsers.clear();\n\t}\n\n\tasync setUserPassword(user: User, pass: string): Promise<void> {\n\t\tawait this.testPassword(pass);\n\t\tconst pw = hashAndSaltSHA512(pass);\n\t\tuser.salt = pw.salt;\n\t\tuser.hash = pw.hash;\n\t\tawait this.userStore.replace(user);\n\t\tthis.cachedUsers.delete(user.id);\n\t}\n\n\tasync testPassword(password: string): Promise<void> {\n\t\tif ((!password) || (!password.trim().length)) {\n\t\t\treturn Promise.reject(Error('Invalid Password'));\n\t\t}\n\t\tif (password.length < 4) {\n\t\t\treturn Promise.reject(Error('Password is too short'));\n\t\t}\n\t\tif (commonPassword(password)) {\n\t\t\treturn Promise.reject(Error('Your password is found in the most frequently used password list and too easy to guess'));\n\t\t}\n\t}\n\n\tasync setUserEmail(user: User, email: string): Promise<void> {\n\t\tif ((!email) || (!email.trim().length)) {\n\t\t\treturn Promise.reject(Error('Invalid Email'));\n\t\t}\n\t\tuser.email = email;\n\t\tawait this.userStore.replace(user);\n\t\tthis.cachedUsers.delete(user.id);\n\t}\n\n}\n","module.exports = require(\"common-password-checker\");","import path from 'path';\nimport {WaveformFormatType} from '../../model/jam-types';\nimport {AudioModule} from '../../modules/audio/audio.module';\nimport {ApiBinaryResult} from '../../typings';\nimport {Episode} from '../episode/episode.model';\nimport {Track} from '../track/track.model';\n\nexport class WaveformService {\n\n\tconstructor(private audioModule: AudioModule) {\n\n\t}\n\n\tasync getTrackWaveform(track: Track, format: WaveformFormatType, width?: number): Promise<ApiBinaryResult> {\n\t\treturn this.audioModule.waveform.get(track.id, path.join(track.path, track.name), format, width);\n\t}\n\n\tasync getEpisodeWaveform(episode: Episode, format: WaveformFormatType, width?: number): Promise<ApiBinaryResult> {\n\t\tif (episode.path && episode.media) {\n\t\t\treturn this.audioModule.waveform.get(episode.id, episode.path, format, width);\n\t\t}\n\t\treturn Promise.reject(Error('Podcast episode not ready'));\n\t}\n}\n","import {Jam} from '../../model/jam-rest-data';\nimport {ArtworkImageType, RootScanStrategy, TrackHealthID} from '../../model/jam-types';\nimport {AudioModule} from '../../modules/audio/audio.module';\nimport {ImageModule} from '../../modules/image/image.module';\nimport {Root} from '../root/root.model';\nimport {Store} from '../store/store';\nimport {Changes} from './changes/changes';\nimport {MatchDirBuilderDB} from './match-dir/match-dir.builder.db';\nimport {ArtworkWorker} from './tasks/worker.artwork';\nimport {ChangesWorker} from './tasks/worker.changes';\nimport {FolderWorker} from './tasks/worker.folder';\nimport {RootWorker} from './tasks/worker.root';\nimport {TrackWorker} from './tasks/worker.track';\n\nexport interface WorkerRequestParameters {\n\trootID: string;\n}\n\nexport interface WorkerRequestMoveTracks extends WorkerRequestParameters {\n\ttrackIDs: Array<string>;\n\tnewParentID: string;\n}\n\nexport interface WorkerRequestRenameTrack extends WorkerRequestParameters {\n\ttrackID: string;\n\tnewName: string;\n}\n\nexport interface WorkerRequestFixTrack extends WorkerRequestParameters {\n\tfixes: Array<{ trackID: string; fixID: TrackHealthID }>;\n}\n\nexport interface WorkerRequestRenameFolder extends WorkerRequestParameters {\n\tfolderID: string;\n\tnewName: string;\n}\n\nexport interface WorkerRequestCreateFolder extends WorkerRequestParameters {\n\tparentID: string;\n\tname: string;\n}\n\nexport interface WorkerRequestUpdateRoot extends WorkerRequestParameters {\n\tname: string;\n\tpath: string;\n\tstrategy: RootScanStrategy;\n}\n\nexport interface WorkerRequestCreateRoot extends WorkerRequestParameters {\n\tpath: string;\n\tname: string;\n\tstrategy: RootScanStrategy;\n}\n\nexport interface WorkerRequestWriteTrackTags extends WorkerRequestParameters {\n\ttags: Array<{ trackID: string; tag: Jam.RawTag }>;\n}\n\nexport interface WorkerRequestRefreshRoot extends WorkerRequestParameters {\n\tforceMetaRefresh: boolean;\n}\n\nexport interface WorkerRequestRefreshFolders extends WorkerRequestParameters {\n\tfolderIDs: Array<string>;\n}\n\nexport interface WorkerRequestMoveFolders extends WorkerRequestParameters {\n\tnewParentID: string;\n\tfolderIDs: Array<string>;\n}\n\nexport interface WorkerRequestRemoveRoot extends WorkerRequestParameters {\n}\n\nexport interface WorkerRequestRefreshTracks extends WorkerRequestParameters {\n\ttrackIDs: Array<string>;\n}\n\nexport interface WorkerRequestRemoveTracks extends WorkerRequestParameters {\n\ttrackIDs: Array<string>;\n}\n\nexport interface WorkerRequestDeleteFolders extends WorkerRequestParameters {\n\tfolderIDs: Array<string>;\n}\n\nexport interface WorkerRequestDeleteArtwork extends WorkerRequestParameters {\n\tfolderID: string;\n\tartworkID: string;\n}\n\nexport interface WorkerRequestDownloadArtwork extends WorkerRequestParameters {\n\tfolderID: string;\n\tartworkURL: string;\n\ttypes: Array<ArtworkImageType>;\n}\n\nexport interface WorkerRequestUpdateArtwork extends WorkerRequestParameters {\n\tfolderID: string;\n\tartworkID: string;\n\tartworkFilename: string;\n\tartworkMimeType: string;\n}\n\nexport interface WorkerRequestCreateArtwork extends WorkerRequestParameters {\n\tfolderID: string;\n\tartworkFilename: string;\n\tartworkMimeType: string;\n\ttypes: Array<ArtworkImageType>;\n}\n\nexport interface WorkerRequestRenameArtwork extends WorkerRequestParameters {\n\tfolderID: string;\n\tartworkID: string;\n\tname: string;\n}\n\nexport class WorkerService {\n\tprivate settings: Jam.AdminSettingsLibrary = {\n\t\tscanAtStart: true\n\t};\n\tpublic artworkWorker: ArtworkWorker;\n\tpublic trackWorker: TrackWorker;\n\tpublic folderWorker: FolderWorker;\n\tpublic rootWorker: RootWorker;\n\tprivate changes: ChangesWorker;\n\n\tconstructor(private store: Store, private audioModule: AudioModule, private imageModule: ImageModule) {\n\t\tthis.artworkWorker = new ArtworkWorker(store, imageModule);\n\t\tthis.trackWorker = new TrackWorker(store, imageModule, audioModule);\n\t\tthis.folderWorker = new FolderWorker(store);\n\t\tthis.rootWorker = new RootWorker(store);\n\t\tthis.changes = new ChangesWorker(store, audioModule, imageModule, this.settings);\n\t}\n\n\tpublic setSettings(settings: Jam.AdminSettingsLibrary): void {\n\t\tthis.settings = settings;\n\t\tthis.changes.settings = settings;\n\t}\n\n\tprivate async mergeDBMatch(root: Root, folderIDs: Array<string>, trackIDs: Array<string>, changes: Changes): Promise<void> {\n\t\tif (folderIDs.length + trackIDs.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst dbMatcher = new MatchDirBuilderDB(this.store);\n\t\tconst {rootMatch, changedDirs} = await dbMatcher.build(folderIDs, trackIDs);\n\t\tawait this.changes.mergeMatch(root, rootMatch, dir => changedDirs.includes(dir), false, changes);\n\t}\n\n\t// root\n\n\tasync refreshRoot(parameters: WorkerRequestRefreshRoot): Promise<Changes> {\n\t\tconst {root, changes} = await this.changes.start(parameters.rootID);\n\t\tconst {rootMatch, removedFolders, removedTracks} = await this.rootWorker.scan(root);\n\t\tchanges.removedFolders = removedFolders;\n\t\tchanges.removedTracks = removedTracks;\n\t\tawait this.changes.mergeMatch(root, rootMatch, () => true, parameters.forceMetaRefresh, changes);\n\t\treturn this.changes.finish(changes, root.id, parameters.forceMetaRefresh);\n\t}\n\n\tasync updateRoot(parameters: WorkerRequestUpdateRoot): Promise<Changes> {\n\t\tconst {root, changes} = await this.changes.start(parameters.rootID);\n\t\tconst forceRefreshMeta = root.strategy !== parameters.strategy;\n\t\tawait this.rootWorker.update(root, parameters.name, parameters.path, parameters.strategy);\n\t\tconst {rootMatch, removedFolders, removedTracks} = await this.rootWorker.scan(root);\n\t\tchanges.removedFolders = removedFolders;\n\t\tchanges.removedTracks = removedTracks;\n\t\tawait this.changes.mergeMatch(root, rootMatch, () => true, false, changes);\n\t\treturn this.changes.finish(changes, root.id, forceRefreshMeta);\n\t}\n\n\tasync createRoot(parameters: WorkerRequestCreateRoot): Promise<Changes> {\n\t\tconst root = await this.rootWorker.create(parameters.name, parameters.path, parameters.strategy);\n\t\tconst {changes} = await this.changes.start(root.id);\n\t\treturn this.changes.finish(changes, root.id, false);\n\t}\n\n\tasync removeRoot(parameters: WorkerRequestRemoveRoot): Promise<Changes> {\n\t\tconst {root, changes} = await this.changes.start(parameters.rootID);\n\t\tconst {removedFolders, removedTracks} = await this.rootWorker.remove(root);\n\t\tchanges.removedFolders = removedFolders;\n\t\tchanges.removedTracks = removedTracks;\n\t\tawait this.mergeDBMatch(root, [], [], changes);\n\t\treturn this.changes.finish(changes, root.id, false);\n\t}\n\n\t// folder\n\n\tasync deleteFolders(parameters: WorkerRequestDeleteFolders): Promise<Changes> {\n\t\tconst {root, changes} = await this.changes.start(parameters.rootID);\n\t\tconst {removedFolders, removedTracks, changedFolderIDs, changedTrackIDs} = await this.folderWorker.delete(root, parameters.folderIDs);\n\t\tchanges.removedFolders = removedFolders;\n\t\tchanges.removedTracks = removedTracks;\n\t\tawait this.mergeDBMatch(root, changedFolderIDs, changedTrackIDs, changes);\n\t\treturn this.changes.finish(changes, root.id, false);\n\t}\n\n\tasync refreshFolders(parameters: WorkerRequestRefreshFolders): Promise<Changes> {\n\t\tconst {root, changes} = await this.changes.start(parameters.rootID);\n\t\tawait this.mergeDBMatch(root, parameters.folderIDs, [], changes);\n\t\treturn this.changes.finish(changes, root.id, false);\n\t}\n\n\tasync createFolder(parameters: WorkerRequestCreateFolder): Promise<Changes> {\n\t\tconst {root, changes} = await this.changes.start(parameters.rootID);\n\t\tconst {folder, parent} = await this.folderWorker.create(parameters.parentID, parameters.name);\n\t\tchanges.newFolders.push(folder);\n\t\tchanges.updateFolders.push(parent);\n\t\treturn this.changes.finish(changes, root.id, false);\n\t}\n\n\tasync moveFolders(parameters: WorkerRequestMoveFolders): Promise<Changes> {\n\t\tconst {root, changes} = await this.changes.start(parameters.rootID);\n\t\tconst {changedFolderIDs, changedTrackIDs} = await this.folderWorker.move(parameters.newParentID, parameters.folderIDs);\n\t\tawait this.mergeDBMatch(root, changedFolderIDs, changedTrackIDs, changes);\n\t\treturn this.changes.finish(changes, root.id, false);\n\t}\n\n\tasync renameFolder(parameters: WorkerRequestRenameFolder): Promise<Changes> {\n\t\tconst {root, changes} = await this.changes.start(parameters.rootID);\n\t\tconst {changedFolderIDs, changedTrackIDs} = await this.folderWorker.rename(parameters.folderID, parameters.newName);\n\t\tawait this.mergeDBMatch(root, changedFolderIDs, changedTrackIDs, changes);\n\t\treturn this.changes.finish(changes, root.id, false);\n\t}\n\n\t// tracks\n\n\tasync refreshTracks(parameters: WorkerRequestRefreshTracks): Promise<Changes> {\n\t\tconst {root, changes} = await this.changes.start(parameters.rootID);\n\t\tconst {changedFolderIDs, changedTrackIDs} = await this.trackWorker.refresh(parameters.trackIDs);\n\t\tawait this.mergeDBMatch(root, changedFolderIDs, changedTrackIDs, changes);\n\t\treturn this.changes.finish(changes, root.id, false);\n\t}\n\n\tasync removeTracks(parameters: WorkerRequestRemoveTracks): Promise<Changes> {\n\t\tconst {root, changes} = await this.changes.start(parameters.rootID);\n\t\tconst {changedFolderIDs, changedTrackIDs, removedTracks} = await this.trackWorker.delete(root, parameters.trackIDs);\n\t\tchanges.removedTracks = removedTracks;\n\t\tawait this.mergeDBMatch(root, changedFolderIDs, changedTrackIDs, changes);\n\t\treturn this.changes.finish(changes, root.id, false);\n\t}\n\n\tasync moveTracks(parameters: WorkerRequestMoveTracks): Promise<Changes> {\n\t\tconst {root, changes} = await this.changes.start(parameters.rootID);\n\t\tconst {changedFolderIDs, changedTrackIDs} = await this.trackWorker.move(parameters.trackIDs, parameters.newParentID);\n\t\tawait this.mergeDBMatch(root, changedFolderIDs, changedTrackIDs, changes);\n\t\treturn this.changes.finish(changes, root.id, false);\n\t}\n\n\tasync renameTrack(parameters: WorkerRequestRenameTrack): Promise<Changes> {\n\t\tconst {root, changes} = await this.changes.start(parameters.rootID);\n\t\tawait this.trackWorker.rename(parameters.trackID, parameters.newName);\n\t\treturn this.changes.finish(changes, root.id, false);\n\t}\n\n\tasync fixTracks(parameters: WorkerRequestFixTrack): Promise<Changes> {\n\t\tconst {root, changes} = await this.changes.start(parameters.rootID);\n\t\tconst {changedFolderIDs, changedTrackIDs} = await this.trackWorker.fix(parameters.fixes);\n\t\tawait this.mergeDBMatch(root, changedFolderIDs, changedTrackIDs, changes);\n\t\treturn this.changes.finish(changes, root.id, false);\n\t}\n\n\tasync writeTrackTags(parameters: WorkerRequestWriteTrackTags): Promise<Changes> {\n\t\tconst {root, changes} = await this.changes.start(parameters.rootID);\n\t\tconst {changedFolderIDs, changedTrackIDs} = await this.trackWorker.writeTags(parameters.tags);\n\t\tawait this.mergeDBMatch(root, changedFolderIDs, changedTrackIDs, changes);\n\t\treturn this.changes.finish(changes, root.id, false);\n\t}\n\n\t// artworks\n\n\tasync renameArtwork(parameters: WorkerRequestRenameArtwork): Promise<Changes> {\n\t\tconst {root, changes} = await this.changes.start(parameters.rootID);\n\t\tawait this.artworkWorker.rename(parameters.folderID, parameters.artworkID, parameters.name, changes);\n\t\treturn this.changes.finish(changes, root.id, false);\n\t}\n\n\tasync createArtwork(parameters: WorkerRequestCreateArtwork): Promise<Changes> {\n\t\tconst {root, changes} = await this.changes.start(parameters.rootID);\n\t\tawait this.artworkWorker.create(parameters.folderID, parameters.artworkFilename, parameters.artworkMimeType, parameters.types, changes);\n\t\treturn this.changes.finish(changes, root.id, false);\n\t}\n\n\tasync updateArtwork(parameters: WorkerRequestUpdateArtwork): Promise<Changes> {\n\t\tconst {root, changes} = await this.changes.start(parameters.rootID);\n\t\tawait this.artworkWorker.update(parameters.folderID, parameters.artworkID, parameters.artworkFilename, parameters.artworkMimeType, changes);\n\t\treturn this.changes.finish(changes, root.id, false);\n\t}\n\n\tasync downloadArtwork(parameters: WorkerRequestDownloadArtwork): Promise<Changes> {\n\t\tconst {root, changes} = await this.changes.start(parameters.rootID);\n\t\tawait this.artworkWorker.download(parameters.folderID, parameters.folderID, parameters.artworkURL, parameters.types, changes);\n\t\treturn this.changes.finish(changes, root.id, false);\n\t}\n\n\tasync deleteArtwork(parameters: WorkerRequestDeleteArtwork): Promise<Changes> {\n\t\tconst {root, changes} = await this.changes.start(parameters.rootID);\n\t\tawait this.artworkWorker.delete(parameters.folderID, parameters.artworkID, changes);\n\t\treturn this.changes.finish(changes, root.id, false);\n\t}\n}\n","import fse from 'fs-extra';\nimport path from 'path';\nimport {FileTyp} from '../../../model/jam-types';\nimport {Folder} from '../../folder/folder.model';\nimport {Store} from '../../store/store';\nimport {Track} from '../../track/track.model';\nimport {MatchDir, MatchFile} from './match-dir.types';\n\nexport class MatchDirBuilderDB {\n\n\tconstructor(public store: Store) {\n\t}\n\n\tprivate async buildMatchFileFromDB(track: Track): Promise<MatchFile> {\n\t\tconst match: MatchFile = {\n\t\t\trootID: track.rootID,\n\t\t\ttrack,\n\t\t\tname: path.join(track.path, track.name),\n\t\t\ttype: FileTyp.AUDIO,\n\t\t\tstat: {\n\t\t\t\tctime: track.stat.created,\n\t\t\t\tmtime: track.stat.modified,\n\t\t\t\tsize: track.stat.size\n\t\t\t}\n\t\t};\n\t\treturn match;\n\t}\n\n\tprivate async buildMatchDirDBData(folder: Folder): Promise<MatchDir> {\n\t\tconst match: MatchDir = {\n\t\t\tname: folder.path,\n\t\t\tlevel: folder.tag.level,\n\t\t\trootID: folder.rootID,\n\t\t\ttag: folder.tag,\n\t\t\tstat: {ctime: folder.stat.created, mtime: folder.stat.modified},\n\t\t\tparent: undefined,\n\t\t\tfolder,\n\t\t\tfiles: [],\n\t\t\tdirectories: [],\n\t\t\tmetaStat: undefined\n\t\t};\n\t\tconst tracks = await this.store.trackStore.search({parentID: folder.id});\n\t\tfor (const track of tracks.items) {\n\t\t\tmatch.files.push(await this.buildMatchFileFromDB(track));\n\t\t}\n\t\tif (folder.tag.artworks) {\n\t\t\tfor (const art of folder.tag.artworks) {\n\t\t\t\tconst matchFile: MatchFile = {\n\t\t\t\t\trootID: folder.rootID,\n\t\t\t\t\tname: path.join(folder.path, art.name),\n\t\t\t\t\ttype: FileTyp.IMAGE,\n\t\t\t\t\tstat: {\n\t\t\t\t\t\tctime: art.stat.created,\n\t\t\t\t\t\tmtime: art.stat.modified,\n\t\t\t\t\t\tsize: art.stat.size\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tmatch.files.push(matchFile);\n\t\t\t}\n\t\t}\n\t\treturn match;\n\t}\n\n\tprivate async buildMatchDirParentsFromDBData(match: MatchDir, loadedMatches: Array<MatchDir>): Promise<MatchDir | undefined> {\n\t\tconst folder = match.folder;\n\t\tif (!folder || !folder.parentID) {\n\t\t\treturn undefined;\n\t\t}\n\t\tlet parentMatch = loadedMatches.find(m => !!m.folder && m.folder.id === folder.parentID);\n\t\tif (parentMatch) {\n\t\t\tif (!parentMatch.directories.includes(match)) {\n\t\t\t\tparentMatch.directories.push(match);\n\t\t\t}\n\t\t\tmatch.parent = parentMatch;\n\t\t\treturn parentMatch;\n\t\t}\n\t\tconst parent = await this.store.folderStore.byId(folder.parentID);\n\t\tif (!parent) {\n\t\t\treturn undefined;\n\t\t}\n\t\tparentMatch = await this.buildMatchDirDBData(parent);\n\t\tparentMatch.directories.push(match);\n\t\tif (match.level > 1) {\n\t\t\tconst folders = await this.store.folderStore.search({parentID: parent.id});\n\t\t\tfor (const f of folders.items) {\n\t\t\t\tif (f.id !== folder.id) {\n\t\t\t\t\tlet c = loadedMatches.find(m => !!m.folder && m.folder.id === f.id);\n\t\t\t\t\tif (!c) {\n\t\t\t\t\t\tc = await this.buildMatchDirDBData(f);\n\t\t\t\t\t\tloadedMatches.push(c);\n\t\t\t\t\t}\n\t\t\t\t\tc.parent = parentMatch;\n\t\t\t\t\tparentMatch.directories.push(c);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tloadedMatches.push(parentMatch);\n\t\tparentMatch.parent = await this.buildMatchDirParentsFromDBData(parentMatch, loadedMatches);\n\t\treturn parentMatch;\n\t}\n\n\tprivate async loadChildsFromDBData(match: MatchDir, loadedMatches: Array<MatchDir>): Promise<void> {\n\t\tconst folder = match.folder;\n\t\tif (!folder) {\n\t\t\treturn;\n\t\t}\n\t\tif (!match.directories || match.directories.length === 0) {\n\t\t\tconst folders = await this.store.folderStore.search({parentID: folder.id});\n\t\t\tfor (const f of folders.items) {\n\t\t\t\tconst c = await this.buildMatchDirDBData(f);\n\t\t\t\tc.parent = match;\n\t\t\t\tloadedMatches.push(match);\n\t\t\t\tmatch.directories.push(c);\n\t\t\t\tawait this.loadChildsFromDBData(c, loadedMatches);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync build(folderIDs: Array<string>, changedTrackIDs: Array<string>): Promise<{ rootMatch: MatchDir; changedDirs: Array<MatchDir> }> {\n\t\tconst folders = await this.store.folderStore.byIds(folderIDs);\n\t\tconst loadedMatches: Array<MatchDir> = [];\n\t\tconst changedDirs: Array<MatchDir> = [];\n\t\tconst changedFiles: Array<MatchFile> = [];\n\t\tfor (const folder of folders) {\n\t\t\tlet match = loadedMatches.find(m => !!m.folder && m.folder.id === folder.id);\n\t\t\tif (!match) {\n\t\t\t\tmatch = await this.buildMatchDirDBData(folder);\n\t\t\t\tloadedMatches.push(match);\n\t\t\t}\n\t\t\tmatch.parent = await this.buildMatchDirParentsFromDBData(match, loadedMatches);\n\t\t\tawait this.loadChildsFromDBData(match, loadedMatches);\n\t\t\tfor (const file of match.files) {\n\t\t\t\tif (file.track && changedTrackIDs.includes(file.track.id)) {\n\t\t\t\t\tchangedFiles.push(file);\n\t\t\t\t}\n\t\t\t}\n\t\t\tloadedMatches.push(match);\n\t\t\tif (!changedDirs.includes(match)) {\n\t\t\t\tchangedDirs.push(match);\n\t\t\t}\n\t\t\tlet p = match.parent;\n\t\t\twhile (p) {\n\t\t\t\tif (p.level > 0 && !changedDirs.includes(p)) {\n\t\t\t\t\tchangedDirs.push(p);\n\t\t\t\t}\n\t\t\t\tp = p.parent;\n\t\t\t}\n\t\t}\n\t\tfor (const file of changedFiles) {\n\t\t\tconst stat = await fse.stat(file.name);\n\t\t\tfile.stat = {\n\t\t\t\tctime: stat.ctime.valueOf(),\n\t\t\t\tmtime: stat.mtime.valueOf(),\n\t\t\t\tsize: stat.size\n\t\t\t};\n\t\t}\n\t\tfor (const dir of changedDirs) {\n\t\t\tconst stat = await fse.stat(dir.name);\n\t\t\tdir.stat = {\n\t\t\t\tctime: stat.ctime.valueOf(),\n\t\t\t\tmtime: stat.mtime.valueOf()\n\t\t\t};\n\t\t}\n\t\tconst rootMatch = loadedMatches.find(m => m.level === 0);\n\t\tif (!rootMatch) {\n\t\t\treturn Promise.reject(Error(`Root Match not found`));\n\t\t}\n\t\treturn {rootMatch, changedDirs};\n\t}\n}\n","import fse from 'fs-extra';\nimport path from 'path';\nimport {ArtworkImageType, FolderTypeImageName} from '../../../model/jam-types';\nimport {ImageModule} from '../../../modules/image/image.module';\nimport {generateArtworkId} from '../../../utils/artwork-id';\nimport {containsFolderSystemChars, fileDeleteIfExists, fileExt, fileSuffix, replaceFolderSystemChars} from '../../../utils/fs-utils';\nimport {artWorkImageNameToType} from '../../folder/folder.format';\nimport {Artwork, Folder} from '../../folder/folder.model';\nimport {Store} from '../../store/store';\nimport {Changes} from '../changes/changes';\n\nexport class ArtworkWorker {\n\n\tconstructor(private store: Store, private imageModule: ImageModule) {\n\n\t}\n\n\tprivate async buildArtworkImageFile(folder: Folder, name: string, removedID?: string): Promise<Artwork> {\n\t\tconst destFile = path.join(folder.path, name);\n\t\tconst stat = await fse.stat(destFile);\n\t\tconst id = generateArtworkId(folder.id, name, stat.size);\n\t\tconst artwork: Artwork = {\n\t\t\tid,\n\t\t\tname,\n\t\t\ttypes: artWorkImageNameToType(name),\n\t\t\timage: await this.imageModule.getImageInfo(destFile),\n\t\t\tstat: {\n\t\t\t\tcreated: stat.ctime.valueOf(),\n\t\t\t\tmodified: stat.mtime.valueOf(),\n\t\t\t\tsize: stat.size\n\t\t\t}\n\t\t};\n\t\tfolder.tag.artworks = (folder.tag.artworks || []).filter(a => (a.id !== id) && (a.id !== removedID));\n\t\tfolder.tag.artworks.push(artwork);\n\t\tawait this.store.folderStore.replace(folder);\n\t\tawait this.imageModule.clearImageCacheByIDs([folder.id, artwork.id].concat(removedID ? [removedID] : []));\n\t\treturn artwork;\n\t}\n\n\tasync rename(folderID: string, artworkID: string, name: string, changes: Changes): Promise<void> {\n\t\tconst folder = await this.store.folderStore.byId(folderID);\n\t\tif (!folder) {\n\t\t\treturn Promise.reject(Error(`Folder ${folderID} not found`));\n\t\t}\n\t\tconst artwork = (folder.tag.artworks || []).find(a => a.id === artworkID);\n\t\tif (!artwork) {\n\t\t\treturn Promise.reject(Error(`Artwork ${artworkID} not found`));\n\t\t}\n\t\tif (containsFolderSystemChars(name)) {\n\t\t\treturn Promise.reject(Error('Invalid Image File Name'));\n\t\t}\n\t\tname = replaceFolderSystemChars(name, '').trim();\n\t\tif (name.length === 0) {\n\t\t\treturn Promise.reject(Error('Invalid Image File Name'));\n\t\t}\n\t\tconst ext = fileExt(artwork.name);\n\t\tconst newName = name + ext;\n\t\tawait fse.rename(path.join(folder.path, artwork.name), path.join(folder.path, newName));\n\t\tawait this.buildArtworkImageFile(folder, newName, artworkID);\n\t}\n\n\tasync create(folderID: string, artworkFilename: string, artworkMimeType: string, types: Array<ArtworkImageType>, changes: Changes): Promise<void> {\n\t\tconst folder = await this.store.folderStore.byId(folderID);\n\t\tif (!folder) {\n\t\t\treturn Promise.reject(Error(`Folder ${folderID} not found`));\n\t\t}\n\t\tconst name = FolderTypeImageName[folder.tag.type];\n\t\tlet suffix = fileSuffix(artworkFilename);\n\t\tif (suffix.length === 0) {\n\t\t\tconst info = await this.imageModule.getImageInfo(artworkFilename);\n\t\t\tsuffix = info.format;\n\t\t}\n\t\tif (!suffix || suffix.length === 0) {\n\t\t\treturn Promise.reject(Error('Image Format not known'));\n\t\t}\n\t\tlet dest = `${name}.${suffix}`;\n\t\tlet nr = 2;\n\t\twhile (await fse.pathExists(path.join(folder.path, dest))) {\n\t\t\tdest = `${name}-${nr}.${suffix}`;\n\t\t\tnr++;\n\t\t}\n\t\tconst destFile = path.join(folder.path, dest);\n\t\tawait fse.move(artworkFilename, destFile);\n\t\tawait this.buildArtworkImageFile(folder, dest);\n\t}\n\n\tasync update(folderID: string, artworkID: string, artworkFilename: string, artworkMimeType: string, changes: Changes): Promise<void> {\n\t\tconst folder = await this.store.folderStore.byId(folderID);\n\t\tif (!folder) {\n\t\t\treturn Promise.reject(Error(`Folder ${folderID} not found`));\n\t\t}\n\t\tconst artwork = (folder.tag.artworks || []).find(a => a.id === artworkID);\n\t\tif (!artwork) {\n\t\t\treturn Promise.reject(Error(`Artwork ${artworkID} not found`));\n\t\t}\n\t\tconst dest = path.join(folder.path, artwork.name);\n\t\tawait fileDeleteIfExists(dest);\n\t\tawait fse.move(artworkFilename, dest);\n\t\tawait this.buildArtworkImageFile(folder, artwork.name, artworkID);\n\t}\n\n\tasync download(rootID: string, folderID: string, artworkURL: string, types: Array<ArtworkImageType>, changes: Changes): Promise<void> {\n\t\tconst folder = await this.store.folderStore.byId(folderID);\n\t\tif (!folder) {\n\t\t\treturn Promise.reject(Error(`Folder ${folderID} not found`));\n\t\t}\n\t\tconst name = types.sort((a, b) => a.localeCompare(b)).join('-');\n\t\tconst filename = await this.imageModule.storeImage(folder.path, name, artworkURL);\n\t\tawait this.buildArtworkImageFile(folder, filename);\n\t}\n\n\tasync delete(folderID: string, artworkID: string, changes: Changes): Promise<void> {\n\t\tconst folder = await this.store.folderStore.byId(folderID);\n\t\tif (!folder) {\n\t\t\treturn Promise.reject(Error(`Folder ${folderID} not found`));\n\t\t}\n\t\tconst artwork = (folder.tag.artworks || []).find(a => a.id === artworkID);\n\t\tif (!artwork) {\n\t\t\treturn Promise.reject(Error(`Artwork ${artworkID} not found`));\n\t\t}\n\t\tfolder.tag.artworks = (folder.tag.artworks || []).filter(art => art.id !== artwork.id);\n\t\tawait this.store.folderStore.replace(folder);\n\t\tconst destName = path.join(folder.path, artwork.name);\n\t\tawait fileDeleteIfExists(destName);\n\t\tawait this.imageModule.clearImageCacheByIDs([folder.id, artwork.id]);\n\t}\n}\n","import {DBObjectType} from '../../../db/db.types';\nimport {Jam} from '../../../model/jam-rest-data';\nimport {RootScanStrategy} from '../../../model/jam-types';\nimport {AudioModule} from '../../../modules/audio/audio.module';\nimport {ImageModule} from '../../../modules/image/image.module';\nimport {updatePlayListTracks} from '../../playlist/playlist.service';\nimport {Root} from '../../root/root.model';\nimport {Store} from '../../store/store';\nimport {Changes, emptyChanges} from '../changes/changes';\nimport {MatchDir} from '../match-dir/match-dir.types';\nimport {MatchDirMerge} from '../merge/merge.match-dir';\nimport {MetaMerger} from '../merge/merge.meta';\nimport {logger} from '../../../utils/logger';\n\nconst log = logger('IO.ChangesWorker');\n\nexport class ChangesWorker {\n\n\tconstructor(\n\t\tprivate store: Store, private audioModule: AudioModule, private imageModule: ImageModule,\n\t\tpublic settings: Jam.AdminSettingsLibrary\n\t) {\n\n\t}\n\n\tasync cleanChanges(changes: Changes): Promise<void> {\n\t\tlet imageCleanIds = new Set<string>();\n\t\tlet trackCleanIds = new Set<string>();\n\t\tif (changes.removedAlbums.length > 0) {\n\t\t\tlog.debug('Removing Albums:', changes.removedAlbums.length);\n\t\t\tconst albumIDs = changes.removedAlbums.map(a => a.id);\n\t\t\tawait this.store.albumStore.remove(albumIDs);\n\t\t\tawait this.store.stateStore.removeByQuery({destIDs: albumIDs, type: DBObjectType.album});\n\t\t\timageCleanIds = new Set<string>([...imageCleanIds, ...albumIDs]);\n\t\t}\n\t\tif (changes.removedArtists.length > 0) {\n\t\t\tlog.debug('Removing Artists:', changes.removedArtists.length);\n\t\t\tconst artistIDs = changes.removedArtists.map(a => a.id);\n\t\t\tawait this.store.artistStore.remove(artistIDs);\n\t\t\tawait this.store.stateStore.removeByQuery({destIDs: artistIDs, type: DBObjectType.artist});\n\t\t\timageCleanIds = new Set<string>([...imageCleanIds, ...artistIDs]);\n\t\t}\n\t\tif (changes.removedFolders.length > 0) {\n\t\t\tlog.debug('Removing Folders:', changes.removedFolders.length);\n\t\t\tconst folderIDs = changes.removedFolders.map(folder => folder.id);\n\t\t\tawait this.store.folderStore.remove(folderIDs);\n\t\t\tawait this.store.stateStore.removeByQuery({destIDs: folderIDs, type: DBObjectType.folder});\n\t\t\timageCleanIds = new Set<string>([...imageCleanIds, ...folderIDs]);\n\t\t}\n\t\tif (changes.removedSeries.length > 0) {\n\t\t\tlog.debug('Removing Series:', changes.removedSeries.length);\n\t\t\tconst seriesIDs = changes.removedSeries.map(series => series.id);\n\t\t\tawait this.store.seriesStore.remove(seriesIDs);\n\t\t\tawait this.store.stateStore.removeByQuery({destIDs: seriesIDs, type: DBObjectType.series});\n\t\t\timageCleanIds = new Set<string>([...imageCleanIds, ...seriesIDs]);\n\t\t}\n\t\tif (changes.removedTracks.length > 0) {\n\t\t\tlog.debug('Removing Tracks:', changes.removedTracks.length);\n\t\t\tconst trackIDs = changes.removedTracks.map(track => track.id);\n\t\t\timageCleanIds = new Set<string>([...imageCleanIds, ...trackIDs]);\n\t\t\ttrackCleanIds = new Set<string>([...trackCleanIds, ...trackIDs]);\n\t\t\tawait this.store.trackStore.remove(trackIDs);\n\t\t\tawait this.store.stateStore.removeByQuery({destIDs: trackIDs, type: DBObjectType.track});\n\t\t\tawait this.store.bookmarkStore.removeByQuery({destIDs: trackIDs});\n\t\t\tconst playlists = await this.store.playlistStore.search({trackIDs});\n\t\t\tif (playlists.items.length > 0) {\n\t\t\t\tfor (const playlist of playlists.items) {\n\t\t\t\t\tconst count = playlist.trackIDs.length;\n\t\t\t\t\tplaylist.trackIDs = playlist.trackIDs.filter(id => !trackIDs.includes(id));\n\t\t\t\t\tif (count !== playlist.trackIDs.length) {\n\t\t\t\t\t\tlog.debug('Updating Playlist:', playlist.name);\n\t\t\t\t\t\tawait updatePlayListTracks(this.store.trackStore, playlist);\n\t\t\t\t\t\tawait this.store.playlistStore.replace(playlist);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t\tif (changes.updateAlbums.length > 0) {\n\t\t\tconst albumIDs = changes.updateAlbums.map(a => a.id);\n\t\t\timageCleanIds = new Set<string>([...imageCleanIds, ...albumIDs]);\n\t\t}\n\t\tif (changes.updateArtists.length > 0) {\n\t\t\tconst artistIDs = changes.updateArtists.map(a => a.id);\n\t\t\timageCleanIds = new Set<string>([...imageCleanIds, ...artistIDs]);\n\t\t}\n\t\tif (changes.updateFolders.length > 0) {\n\t\t\tconst folderIDs = changes.updateFolders.map(f => f.id);\n\t\t\timageCleanIds = new Set<string>([...imageCleanIds, ...folderIDs]);\n\t\t}\n\t\tif (changes.updateSeries.length > 0) {\n\t\t\tconst seriesIDs = changes.updateSeries.map(s => s.id);\n\t\t\timageCleanIds = new Set<string>([...imageCleanIds, ...seriesIDs]);\n\t\t}\n\t\tif (changes.updateTracks.length > 0) {\n\t\t\tfor (const t of changes.updateTracks) {\n\t\t\t\timageCleanIds.add(t.track.albumID);\n\t\t\t\timageCleanIds.add(t.oldTrack.albumID);\n\t\t\t}\n\t\t}\n\t\tlet ids = [...imageCleanIds];\n\t\tif (ids.length > 0) {\n\t\t\tlog.debug('Cleaning Image Cache IDs:', ids.length);\n\t\t\tawait this.imageModule.clearImageCacheByIDs(ids);\n\t\t}\n\t\tids = [...trackCleanIds];\n\t\tif (ids.length > 0) {\n\t\t\tlog.debug('Cleaning Audio Cache IDs:', ids.length);\n\t\t\tawait this.audioModule.clearCacheByIDs(ids);\n\t\t}\n\t}\n\n\tasync storeChanges(changes: Changes): Promise<void> {\n\t\tlog.debug('Storing New Tracks:', changes.newTracks.length);\n\t\tawait this.store.trackStore.bulk(changes.newTracks);\n\t\tlog.debug('Updating Tracks:', changes.updateTracks.length);\n\t\tawait this.store.trackStore.upsert(changes.updateTracks.map(t => t.track));\n\t\tlog.debug('Storing New Folders:', changes.newTracks.length);\n\t\tawait this.store.folderStore.bulk(changes.newFolders);\n\t\tlog.debug('Updating Folders:', changes.updateFolders.length);\n\t\tawait this.store.folderStore.upsert(changes.updateFolders);\n\t\tlog.debug('Storing New Albums:', changes.newTracks.length);\n\t\tawait this.store.albumStore.bulk(changes.newAlbums);\n\t\tlog.debug('Updating Albums:', changes.updateAlbums.length);\n\t\tawait this.store.albumStore.upsert(changes.updateAlbums);\n\t\tlog.debug('Storing New Artists:', changes.newTracks.length);\n\t\tawait this.store.artistStore.bulk(changes.newArtists);\n\t\tlog.debug('Updating Artists:', changes.updateArtists.length);\n\t\tawait this.store.artistStore.upsert(changes.updateArtists);\n\t\tlog.debug('Storing New Series:', changes.newTracks.length);\n\t\tawait this.store.seriesStore.bulk(changes.newSeries);\n\t\tlog.debug('Updating Series:', changes.updateSeries.length);\n\t\tawait this.store.seriesStore.upsert(changes.updateSeries);\n\t}\n\n\tasync mergeMatch(root: Root, rootMatch: MatchDir, rebuildDirTag: (dir: MatchDir) => boolean, forceTrackMetaRefresh: boolean, changes: Changes): Promise<void> {\n\t\tconst merger = new MatchDirMerge(this.audioModule, this.imageModule, this.store, this.settings, root.strategy || RootScanStrategy.auto);\n\t\tawait merger.merge(rootMatch, root.id, rebuildDirTag, forceTrackMetaRefresh, changes);\n\t}\n\n\tasync start(rootID: string): Promise<{ changes: Changes; root: Root }> {\n\t\tconst root = await this.store.rootStore.byId(rootID);\n\t\tif (!root) {\n\t\t\treturn Promise.reject(Error(`Root ${rootID} not found`));\n\t\t}\n\t\treturn {root, changes: emptyChanges()};\n\t}\n\n\tasync finish(changes: Changes, rootID: string, forceMetaRefresh: boolean): Promise<Changes> {\n\t\tconst metaMerger = new MetaMerger(this.store);\n\t\tawait metaMerger.mergeMeta(forceMetaRefresh, rootID, changes);\n\n\t\tawait this.storeChanges(changes);\n\t\tawait this.cleanChanges(changes);\n\n\t\tchanges.end = Date.now();\n\n\t\treturn changes;\n\t}\n\n}\n","import {Album} from '../../album/album.model';\nimport {Artist} from '../../artist/artist.model';\nimport {Folder} from '../../folder/folder.model';\nimport {Series} from '../../series/series.model';\nimport {Track} from '../../track/track.model';\n\nexport interface MergeChangesTrackInfo {\n\ttrack: Track;\n\toldTrack: Track;\n}\n\nexport interface Changes {\n\tnewArtists: Array<Artist>;\n\tupdateArtists: Array<Artist>;\n\tremovedArtists: Array<Artist>;\n\n\tnewAlbums: Array<Album>;\n\tupdateAlbums: Array<Album>;\n\tremovedAlbums: Array<Album>;\n\n\tnewTracks: Array<Track>;\n\tupdateTracks: Array<MergeChangesTrackInfo>;\n\tremovedTracks: Array<Track>;\n\n\tnewFolders: Array<Folder>;\n\tupdateFolders: Array<Folder>;\n\tremovedFolders: Array<Folder>;\n\n\tnewSeries: Array<Series>;\n\tupdateSeries: Array<Series>;\n\tremovedSeries: Array<Series>;\n\n\tstart: number;\n\tend: number;\n}\n\nexport function emptyChanges(): Changes {\n\tconst changes: Changes = {\n\t\tnewArtists: [],\n\t\tupdateArtists: [],\n\t\tremovedArtists: [],\n\n\t\tnewAlbums: [],\n\t\tupdateAlbums: [],\n\t\tremovedAlbums: [],\n\n\t\tnewTracks: [],\n\t\tupdateTracks: [],\n\t\tremovedTracks: [],\n\n\t\tnewSeries: [],\n\t\tupdateSeries: [],\n\t\tremovedSeries: [],\n\n\t\tnewFolders: [],\n\t\tupdateFolders: [],\n\t\tremovedFolders: [],\n\t\tstart: Date.now(),\n\t\tend: 0\n\t};\n\treturn changes;\n}\n","import {Jam} from '../../../model/jam-rest-data';\nimport {RootScanStrategy} from '../../../model/jam-types';\nimport {AudioModule} from '../../../modules/audio/audio.module';\nimport {ImageModule} from '../../../modules/image/image.module';\nimport {deepCompare} from '../../../utils/deep-compare';\nimport {logger} from '../../../utils/logger';\nimport {Store} from '../../store/store';\nimport {Changes} from '../changes/changes';\nimport {MatchDir} from '../match-dir/match-dir.types';\nimport {MatchDirMergeBuilder, MatchDirMergeTagBuilder, MergeMatchDir} from './merge.match-dir.builder';\nimport {processQueue} from '../../../utils/queue';\n\nconst log = logger('IO.MatchDirMerge');\n\nexport class MatchDirMerge {\n\tfolderBuilder: MatchDirMergeBuilder;\n\ttagBuilder: MatchDirMergeTagBuilder;\n\n\tconstructor(\n\t\tprivate audioModule: AudioModule, private imageModule: ImageModule,\n\t\tprivate store: Store, private settings: Jam.AdminSettingsLibrary, private strategy: RootScanStrategy\n\t) {\n\t\tthis.folderBuilder = new MatchDirMergeBuilder(audioModule, store);\n\t\tthis.tagBuilder = new MatchDirMergeTagBuilder(settings, strategy, imageModule);\n\t}\n\n\tprivate static folderHasChanged(dir: MergeMatchDir): boolean {\n\t\treturn (!dir.folder) ||\n\t\t\t(dir.stat.mtime !== dir.folder.stat.modified) ||\n\t\t\t(dir.stat.ctime !== dir.folder.stat.created) ||\n\t\t\t(!deepCompare(dir.folder.tag, dir.tag));\n\t}\n\n\tprivate static async mergeRecursive(dir: MergeMatchDir, changes: Changes): Promise<void> {\n\t\tlog.debug('Check For Changes:', dir.name);\n\t\tif (MatchDirMerge.folderHasChanged(dir)) {\n\t\t\tlog.info('Folder Changed:', dir.name);\n\t\t\tconst folder = MatchDirMergeBuilder.buildFolder(dir);\n\t\t\tfolder.id = dir.folder.id;\n\t\t\tdir.folder = folder;\n\t\t\tconst newFolder = changes.newFolders.find(f => f.id === folder.id);\n\t\t\tif (!newFolder) {\n\t\t\t\tchanges.updateFolders.push(folder);\n\t\t\t} else {\n\t\t\t\tchanges.newFolders = changes.newFolders.filter(f => f.id !== folder.id);\n\t\t\t\tchanges.newFolders.push(folder);\n\t\t\t}\n\t\t}\n\t\tif (dir.directories.length > 0) {\n\t\t\tawait processQueue<MergeMatchDir>(3, dir.directories, async d => {\n\t\t\t\tawait MatchDirMerge.mergeRecursive(d, changes);\n\t\t\t});\n\t\t}\n\t\t// for (const d of dir.directories) {\n\t\t// \tawait MatchDirMerge.mergeRecursive(d, changes);\n\t\t// }\n\t}\n\n\tasync merge(dir: MatchDir, rootID: string, rebuildDirTag: (dir: MatchDir) => boolean, forceTrackMetaRefresh: boolean, changes: Changes): Promise<void> {\n\t\tconst mergeMatchDir = await this.folderBuilder.buildMerge(dir, changes, forceTrackMetaRefresh);\n\t\tawait this.tagBuilder.buildMergeTags(mergeMatchDir, rebuildDirTag);\n\t\tawait MatchDirMerge.mergeRecursive(mergeMatchDir, changes);\n\t}\n\n}\n","export function deepCompare(a: any, b: any, ignore?: Array<string>): boolean {\n\tconst ignoreList: Array<string> = ignore || [];\n\tconst compare = (oa: any, ob: any): boolean => {\n\t\tif (a === undefined) {\n\t\t\treturn false;\n\t\t}\n\t\tif (b === undefined) {\n\t\t\treturn false;\n\t\t}\n\t\tif (typeof oa === 'object') {\n\t\t\tif (!deepCompare(oa, ob, ignore)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (oa !== ob) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t};\n\tif (a === undefined) {\n\t\treturn false;\n\t}\n\tif (b === undefined) {\n\t\treturn false;\n\t}\n\tlet key;\n\tfor (key in a) {\n\t\tif (a.hasOwnProperty(key) && !ignoreList.includes(key)) {\n\t\t\tif (!compare(a[key], b[key])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tfor (key in b) {\n\t\tif (b.hasOwnProperty(key) && !ignoreList.includes(key)) {\n\t\t\tif (!compare(a[key], b[key])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n","import path from 'path';\nimport {DBObjectType} from '../../../db/db.types';\nimport {Jam} from '../../../model/jam-rest-data';\nimport {AlbumType, FileTyp, FolderType, RootScanStrategy, TrackTagFormatType} from '../../../model/jam-types';\nimport {AudioModule} from '../../../modules/audio/audio.module';\nimport {ImageModule} from '../../../modules/image/image.module';\nimport {generateArtworkId} from '../../../utils/artwork-id';\nimport {basenameStripExt, ensureTrailingPathSeparator} from '../../../utils/fs-utils';\nimport {logger} from '../../../utils/logger';\nimport {processQueue} from '../../../utils/queue';\nimport {artWorkImageNameToType} from '../../folder/folder.format';\nimport {Artwork, Folder, FolderTag} from '../../folder/folder.model';\nimport {Store} from '../../store/store';\nimport {Track, TrackTag} from '../../track/track.model';\nimport {Changes} from '../changes/changes';\nimport {MatchDirMetaStats, MetaStat} from '../match-dir/match-dir.meta-stats';\nimport {MatchDir, MatchFile} from '../match-dir/match-dir.types';\n\nconst log = logger('IO.MatchDirMergeBuilder');\n\nexport interface MergeMatchDir extends MatchDir {\n\tfolder: Folder;\n\tdirectories: Array<MergeMatchDir>;\n\tmetaStat: MetaStat;\n}\n\nexport class MatchDirMergeBuilder {\n\n\tconstructor(private audioModule: AudioModule, private store: Store) {\n\t}\n\n\tprivate static trackHasChanged(file: MatchFile): boolean {\n\t\treturn (!file.track) ||\n\t\t\t(file.stat.mtime !== file.track.stat.modified) ||\n\t\t\t(file.stat.ctime !== file.track.stat.created) ||\n\t\t\t(file.stat.size !== file.track.stat.size);\n\t}\n\n\tprivate static buildDefaultTag(dir: MatchDir): FolderTag {\n\t\treturn {\n\t\t\tlevel: dir.level,\n\t\t\ttype: FolderType.unknown,\n\t\t\ttrackCount: dir.files.filter(t => t.type === FileTyp.AUDIO).length,\n\t\t\tfolderCount: dir.directories.length\n\t\t};\n\t}\n\n\tstatic buildFolder(dir: MatchDir): Folder {\n\t\treturn {\n\t\t\tid: '',\n\t\t\trootID: dir.rootID,\n\t\t\tpath: ensureTrailingPathSeparator(dir.name),\n\t\t\tparentID: (dir.parent && dir.parent.folder ? dir.parent.folder.id : undefined),\n\t\t\tstat: {\n\t\t\t\tcreated: dir.stat.ctime,\n\t\t\t\tmodified: dir.stat.mtime\n\t\t\t},\n\t\t\ttag: dir.tag || MatchDirMergeBuilder.buildDefaultTag(dir),\n\t\t\ttype: DBObjectType.folder\n\t\t};\n\t}\n\n\tprivate async buildTrack(file: MatchFile, parent: Folder): Promise<Track> {\n\t\tlog.debug('Building Track:', file.name);\n\t\tconst data = await this.audioModule.read(file.name);\n\t\tconst tag: TrackTag = data.tag || {format: TrackTagFormatType.none};\n\t\ttag.title = tag.title || basenameStripExt(file.name);\n\t\treturn {\n\t\t\tid: '',\n\t\t\trootID: file.rootID,\n\t\t\talbumID: '',\n\t\t\tartistID: '',\n\t\t\talbumArtistID: '',\n\t\t\tparentID: (parent ? parent.id : ''),\n\t\t\tname: path.basename(file.name),\n\t\t\tpath: ensureTrailingPathSeparator(path.dirname(file.name)),\n\t\t\tstat: {\n\t\t\t\tcreated: file.stat.ctime,\n\t\t\t\tmodified: file.stat.mtime,\n\t\t\t\tsize: file.stat.size\n\t\t\t},\n\t\t\tmedia: data.media || {},\n\t\t\ttag,\n\t\t\ttype: DBObjectType.track\n\t\t};\n\t}\n\n\tprivate async buildMergeTrack(file: MatchFile, folder: Folder, changes: Changes, forceTrackMetaRefresh: boolean): Promise<void> {\n\t\tif (!file.track) {\n\t\t\tfile.track = await this.buildTrack(file, folder);\n\t\t\tfile.track.id = await this.store.trackStore.getNewId();\n\t\t\tchanges.newTracks.push(file.track);\n\t\t} else if (forceTrackMetaRefresh || MatchDirMergeBuilder.trackHasChanged(file)) {\n\t\t\tconst oldTrack = file.track;\n\t\t\tfile.track = await this.buildTrack(file, folder);\n\t\t\tfile.track.id = oldTrack.id;\n\t\t\tchanges.updateTracks.push({track: file.track, oldTrack});\n\t\t}\n\t}\n\n\tasync buildMerge(dir: MatchDir, changes: Changes, forceTrackMetaRefresh: boolean): Promise<MergeMatchDir> {\n\t\tif (!dir.folder) {\n\t\t\tlog.debug('Building Folder:', dir.name);\n\t\t\tdir.folder = MatchDirMergeBuilder.buildFolder(dir);\n\t\t\tdir.folder.id = await this.store.trackStore.getNewId();\n\t\t\tchanges.newFolders.push(dir.folder);\n\t\t}\n\t\tfor (const sub of dir.directories) {\n\t\t\tawait this.buildMerge(sub, changes, forceTrackMetaRefresh);\n\t\t}\n\t\tif (dir.folder) {\n\t\t\tconst files = dir.files.filter(file => (file.type === FileTyp.AUDIO));\n\t\t\tconst folder = dir.folder;\n\t\t\tawait processQueue<MatchFile>(3, files, async file => {\n\t\t\t\tawait this.buildMergeTrack(file, folder, changes, forceTrackMetaRefresh);\n\t\t\t});\n\t\t}\n\t\treturn dir as MergeMatchDir;\n\t}\n\n}\n\nexport class MatchDirMergeTagBuilder {\n\n\tconstructor(private settings: Jam.AdminSettingsLibrary, private strategy: RootScanStrategy, private imageModule: ImageModule) {\n\t}\n\n\tprivate static isExtraFolder(dir: MergeMatchDir): boolean {\n\t\t// TODO: generalise extra folder detection (an admin setting?)\n\t\tconst name = path.basename(dir.name).toLowerCase();\n\t\treturn !!name.match(/(\\[(extra|various)]|^(extra|various)$)/);\n\t}\n\n\tprivate static getMixedFolderType(dir: MergeMatchDir, metaStat: MetaStat, strategy: RootScanStrategy): FolderType {\n\t\treturn MatchDirMergeTagBuilder.getMultiAlbumFolderType(dir);\n\t}\n\n\tprivate static getFolderType(dir: MergeMatchDir, metaStat: MetaStat, strategy: RootScanStrategy): FolderType {\n\t\tif (dir.level === 0) {\n\t\t\treturn FolderType.collection;\n\t\t}\n\t\tif (MatchDirMergeTagBuilder.isExtraFolder(dir)) {\n\t\t\treturn FolderType.extras;\n\t\t}\n\t\tif (metaStat.trackCount > 0) {\n\t\t\tif (metaStat.hasMultipleAlbums && dir.tag && dir.tag.albumType === AlbumType.series) {\n\t\t\t\treturn FolderType.artist;\n\t\t\t}\n\t\t\tconst dirCount = dir.directories.filter(d => !!d.tag && d.tag.type !== FolderType.extras).length;\n\t\t\tif (dirCount > 0) {\n\t\t\t\treturn MatchDirMergeTagBuilder.getMixedFolderType(dir, metaStat, strategy);\n\t\t\t}\n\t\t\treturn FolderType.album;\n\t\t}\n\t\tif (dir.directories.length === 0) {\n\t\t\treturn (dir.files.filter(f => f.type === FileTyp.AUDIO).length === 0) ? FolderType.extras : FolderType.album;\n\t\t}\n\t\tif (metaStat.hasMultipleAlbums) {\n\t\t\treturn (metaStat.hasMultipleArtists || strategy === RootScanStrategy.compilation) ? FolderType.collection : FolderType.artist;\n\t\t}\n\t\tif (dir.directories.length === 1) {\n\t\t\treturn (strategy === RootScanStrategy.compilation) ? FolderType.collection : FolderType.artist;\n\t\t}\n\t\tif (!metaStat.hasMultipleArtists && dir.directories.filter(d => d.tag && d.tag.type === FolderType.artist).length > 0) {\n\t\t\treturn FolderType.artist;\n\t\t}\n\t\treturn MatchDirMergeTagBuilder.getMultiAlbumFolderType(dir);\n\t}\n\n\tprivate static getMultiAlbumFolderType(dir: MergeMatchDir): FolderType {\n\t\tconst a = dir.directories.find(d => {\n\t\t\treturn (!!d.tag && d.tag.type === FolderType.artist);\n\t\t});\n\t\treturn a ? FolderType.collection : FolderType.multialbum;\n\t}\n\n\tprivate static applyFolderTagType(dir: MergeMatchDir, strategy: RootScanStrategy): void {\n\t\tif (!dir.tag || !dir.metaStat) {\n\t\t\treturn;\n\t\t}\n\t\tconst result = MatchDirMergeTagBuilder.getFolderType(dir, dir.metaStat, strategy);\n\t\t// console.log('check', dir.name, result);\n\t\tMatchDirMergeTagBuilder.setFolderTagType(dir.tag, result);\n\t\tif (result === FolderType.multialbum) {\n\t\t\tMatchDirMergeTagBuilder.markMultiAlbumChildDirs(dir);\n\t\t} else if (result === FolderType.artist) {\n\t\t\tdir.directories.forEach(MatchDirMergeTagBuilder.markArtistChildDirs);\n\t\t}\n\t}\n\n\tprivate static markMultiAlbumChildDirs(dir: MergeMatchDir): void {\n\t\tif (dir.tag && dir.tag.type !== FolderType.extras) {\n\t\t\tMatchDirMergeTagBuilder.setFolderTagType(dir.tag, FolderType.multialbum);\n\t\t}\n\t\tdir.directories.forEach(d => {\n\t\t\tif (dir.tag && d.tag && d.tag.type !== FolderType.extras) {\n\t\t\t\t// parent multialbum gets same album type as child multialbum folder\n\t\t\t\tdir.tag.albumType = d.tag.albumType;\n\t\t\t}\n\t\t\tMatchDirMergeTagBuilder.markMultiAlbumChildDirs(d);\n\t\t});\n\t}\n\n\tprivate static markArtistChildDirs(dir: MergeMatchDir): void {\n\t\tif (dir.tag && dir.tag.type === FolderType.artist) {\n\t\t\tMatchDirMergeTagBuilder.setFolderTagType(dir.tag, FolderType.collection);\n\t\t}\n\t\tdir.directories.forEach(d => {\n\t\t\tMatchDirMergeTagBuilder.markArtistChildDirs(d);\n\t\t});\n\t}\n\n\tprivate static setFolderTagType(tag: FolderTag, type: FolderType): void {\n\t\ttag.type = type;\n\t\tswitch (type) {\n\t\t\tcase FolderType.collection:\n\t\t\t\ttag.albumType = undefined;\n\t\t\t\ttag.mbArtistID = undefined;\n\t\t\t\ttag.mbReleaseID = undefined;\n\t\t\t\ttag.mbAlbumType = undefined;\n\t\t\t\ttag.mbReleaseGroupID = undefined;\n\t\t\t\ttag.artist = undefined;\n\t\t\t\ttag.artistSort = undefined;\n\t\t\t\ttag.album = undefined;\n\t\t\t\ttag.year = undefined;\n\t\t\t\tbreak;\n\t\t\tcase FolderType.artist:\n\t\t\t\ttag.mbReleaseID = undefined;\n\t\t\t\ttag.mbAlbumType = undefined;\n\t\t\t\ttag.mbReleaseGroupID = undefined;\n\t\t\t\ttag.album = undefined;\n\t\t\t\ttag.year = undefined;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t}\n\n\tprivate static splitDirectoryName(name: string): { title: string; year?: number } {\n\t\tconst result: { title: string; year?: number } = {title: path.basename(name).trim()};\n\t\t// year title | year - title | (year) title | [year] title\n\t\tconst parts = result.title.split(' ');\n\t\tconst s = parts[0].replace(/[^\\w\\s]/gi, '');\n\t\tif (s.length === 4) {\n\t\t\tconst y = Number(s);\n\t\t\tif (!isNaN(y)) {\n\t\t\t\tresult.year = y;\n\t\t\t\tparts.shift();\n\t\t\t\tif (parts[0] === '-') {\n\t\t\t\t\tparts.shift();\n\t\t\t\t}\n\t\t\t\tresult.title = parts.join(' ');\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate async buildFolderTag(dir: MergeMatchDir): Promise<FolderTag> {\n\t\tconst metaStat = dir.metaStat;\n\t\tif (!metaStat) {\n\t\t\tthrow Error('internal error, metastat must exist');\n\t\t}\n\t\tconst nameSplit = MatchDirMergeTagBuilder.splitDirectoryName(dir.name);\n\t\treturn {\n\t\t\ttrackCount: metaStat.trackCount,\n\t\t\tfolderCount: dir.directories.length,\n\t\t\tlevel: dir.level,\n\t\t\ttype: FolderType.unknown,\n\t\t\talbum: metaStat.album,\n\t\t\talbumType: metaStat.albumType,\n\t\t\talbumTrackCount: (metaStat.subFolderTrackCount || 0) + metaStat.trackCount,\n\t\t\tartist: metaStat.artist,\n\t\t\tartistSort: metaStat.artistSort,\n\t\t\ttitle: nameSplit.title,\n\t\t\tartworks: await this.buildFolderArtworks(dir),\n\t\t\tgenres: metaStat.genres,\n\t\t\tmbReleaseID: metaStat.mbReleaseID,\n\t\t\tmbReleaseGroupID: metaStat.mbReleaseGroupID,\n\t\t\tmbAlbumType: metaStat.mbAlbumType,\n\t\t\tmbArtistID: metaStat.mbArtistID,\n\t\t\tyear: (nameSplit.year !== undefined && nameSplit.year > 0) ? nameSplit.year : metaStat.year\n\t\t};\n\t}\n\n\tprivate async buildFolderArtwork(file: MatchFile, folderID: string): Promise<Artwork> {\n\t\tconst name = path.basename(file.name);\n\t\treturn {\n\t\t\tid: generateArtworkId(folderID, name, file.stat.size),\n\t\t\tname,\n\t\t\ttypes: artWorkImageNameToType(name),\n\t\t\timage: await this.imageModule.getImageInfo(file.name),\n\t\t\tstat: {created: file.stat.ctime, modified: file.stat.mtime, size: file.stat.size}\n\t\t};\n\t}\n\n\tprivate async buildFolderArtworks(dir: MergeMatchDir): Promise<Array<Artwork>> {\n\t\tconst files = dir.files.filter(file => file.type === FileTyp.IMAGE);\n\t\tconst result: Array<Artwork> = [];\n\t\tconst oldArtworks = dir.folder && dir.folder.tag && dir.folder.tag.artworks ? dir.folder.tag.artworks : [];\n\t\tfor (const file of files) {\n\t\t\tconst name = path.basename(file.name);\n\t\t\tconst oldArtwork = oldArtworks.find(o => o.name === name);\n\t\t\tif (oldArtwork && oldArtwork.stat.modified === file.stat.mtime) {\n\t\t\t\tresult.push(oldArtwork);\n\t\t\t} else {\n\t\t\t\tresult.push(await this.buildFolderArtwork(file, dir.folder.id));\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync buildMergeTags(dir: MergeMatchDir, rebuildTag: (dir: MatchDir) => boolean): Promise<void> {\n\t\tfor (const sub of dir.directories) {\n\t\t\tawait this.buildMergeTags(sub, rebuildTag);\n\t\t}\n\t\tif (rebuildTag(dir)) {\n\t\t\tdir.metaStat = MatchDirMetaStats.buildMetaStat(dir, this.settings, this.strategy);\n\t\t\tdir.tag = await this.buildFolderTag(dir);\n\t\t}\n\t\tMatchDirMergeTagBuilder.applyFolderTagType(dir, this.strategy);\n\t}\n}\n","import path from 'path';\nimport {Jam} from '../../../model/jam-rest-data';\nimport {AlbumType, FileTyp, FolderType, MUSICBRAINZ_VARIOUS_ARTISTS_NAME, RootScanStrategy} from '../../../model/jam-types';\nimport {extractAlbumName} from '../../../utils/album-name';\nimport {FolderTag} from '../../folder/folder.model';\nimport {Track} from '../../track/track.model';\nimport {MetaStatBuilder} from './match-dir.meta-stats.builder';\nimport {MatchDir} from './match-dir.types';\n\nexport interface MetaStat {\n\tartist?: string;\n\tartistSort?: string;\n\talbum?: string;\n\tgenres?: Array<string>;\n\tmbArtistID?: string;\n\tmbReleaseID?: string;\n\tmbReleaseGroupID?: string;\n\tmbAlbumType?: string;\n\tyear?: number;\n\thasMultipleArtists: boolean;\n\thasMultipleAlbums: boolean;\n\ttrackCount: number;\n\tsubFolderTrackCount?: number;\n\talbumType: AlbumType;\n}\n\nconst typeByGenreNames: { [name: string]: AlbumType } = {\n\taudiobook: AlbumType.audiobook,\n\t'audio theater': AlbumType.audiobook,\n\t'audio drama': AlbumType.audiobook,\n\t'audio series': AlbumType.audiobook,\n\tsoundtrack: AlbumType.soundtrack\n};\n\nconst typeByMusicbrainzString: Array<{ type: AlbumType; names: Array<string> }> = [\n\t{type: AlbumType.audiobook, names: ['audiobook', 'spokenword', 'audiodrama', 'audio drama', 'audio theater', 'audio series']},\n\t{type: AlbumType.bootleg, names: ['bootleg']},\n\t{type: AlbumType.compilation, names: ['compilation']},\n\t{type: AlbumType.live, names: ['live']},\n\t{type: AlbumType.soundtrack, names: ['soundtrack']},\n\t{type: AlbumType.ep, names: ['ep']},\n\t{type: AlbumType.single, names: ['single']},\n\t{type: AlbumType.album, names: ['album']}\n];\n\nexport class MatchDirMetaStats {\n\n\tprivate static getGenreAlbumType(genre: string): AlbumType {\n\t\treturn typeByGenreNames[genre.toLowerCase()] || AlbumType.unknown;\n\t}\n\n\tprivate static getMusicbrainzAlbumType(mbAlbumType: string): AlbumType {\n\t\tconst t = mbAlbumType.toLowerCase();\n\t\tfor (const type of typeByMusicbrainzString) {\n\t\t\tfor (const name of type.names) {\n\t\t\t\tif (t.includes(name)) {\n\t\t\t\t\treturn type.type;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn AlbumType.unknown;\n\t}\n\n\tprivate static getStrategyAlbumType(strategy: RootScanStrategy, hasMultipleArtists: boolean): AlbumType {\n\t\tswitch (strategy) {\n\t\t\tcase RootScanStrategy.auto:\n\t\t\t\treturn hasMultipleArtists ? AlbumType.compilation : AlbumType.album;\n\t\t\tcase RootScanStrategy.artistalbum:\n\t\t\t\treturn AlbumType.album;\n\t\t\tcase RootScanStrategy.compilation:\n\t\t\t\treturn AlbumType.compilation;\n\t\t\tcase RootScanStrategy.audiobook:\n\t\t\t\treturn AlbumType.audiobook;\n\t\t\tdefault:\n\t\t\t\treturn AlbumType.unknown;\n\t\t}\n\t}\n\n\tprivate static buildTrackSlugs(track: Track | undefined, builder: MetaStatBuilder): void {\n\t\tif (!track || !track.tag) {\n\t\t\treturn;\n\t\t}\n\t\tconst tracktag = track.tag;\n\t\tbuilder.statSlugValue('artist', tracktag.albumArtist || tracktag.artist);\n\t\tbuilder.statSlugValue('artistSort', tracktag.albumArtistSort || tracktag.artistSort);\n\t\tbuilder.statSlugValue('genre', tracktag.genre);\n\t\tbuilder.statSlugValue('series', tracktag.series);\n\t\tbuilder.statSlugValue('album', tracktag.album ? extractAlbumName(tracktag.album) : undefined);\n\t\tbuilder.statNumber('year', tracktag.year);\n\t\tbuilder.statTrackCount('albumTrackCount', tracktag.trackTotal, tracktag.disc);\n\t\tbuilder.statSlugValue('mbAlbumType', `${tracktag.mbAlbumType || ''}/${tracktag.mbAlbumStatus || ''}`);\n\t\tbuilder.statID('mbArtistID', tracktag.mbArtistID);\n\t\tbuilder.statID('mbReleaseID', tracktag.mbReleaseID);\n\t\tbuilder.statID('mbReleaseGroupID', tracktag.mbReleaseGroupID);\n\t}\n\n\tprivate static buildTracksSlugs(dir: MatchDir, builder: MetaStatBuilder): number {\n\t\tlet result = 0;\n\t\tfor (const file of dir.files) {\n\t\t\tif (file.type === FileTyp.AUDIO) {\n\t\t\t\tresult++;\n\t\t\t\tMatchDirMetaStats.buildTrackSlugs(file.track, builder);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static buildSubFolderSlugs(subtag: FolderTag, builder: MetaStatBuilder): number {\n\t\tbuilder.statSlugValue('artist', subtag.artist);\n\t\tbuilder.statSlugValue('artistSort', subtag.artistSort);\n\t\tbuilder.statSlugValue('album', subtag.album ? extractAlbumName(subtag.album) : undefined);\n\t\tif (subtag.genres) {\n\t\t\tfor (const genre of subtag.genres) {\n\t\t\t\tbuilder.statSlugValue('genre', genre);\n\t\t\t}\n\t\t}\n\t\tbuilder.statNumber('year', subtag.year);\n\t\tbuilder.statSlugValue('mbAlbumType', subtag.mbAlbumType);\n\t\tbuilder.statID('mbArtistID', subtag.mbArtistID);\n\t\tbuilder.statID('mbReleaseID', subtag.mbReleaseID);\n\t\tbuilder.statID('mbReleaseGroupID', subtag.mbReleaseGroupID);\n\t\treturn subtag.albumTrackCount || 0;\n\t}\n\n\tprivate static buildSubFoldersSlugs(dir: MatchDir, builder: MetaStatBuilder): number | undefined {\n\t\tlet result = 0;\n\t\tfor (const sub of dir.directories) {\n\t\t\tif (sub.folder && sub.tag && (sub.tag.type !== FolderType.extras)) {\n\t\t\t\tresult += MatchDirMetaStats.buildSubFolderSlugs(sub.tag, builder);\n\t\t\t}\n\t\t}\n\t\treturn result > 0 ? result : undefined;\n\t}\n\n\tprivate static getAlbumInfo(builder: MetaStatBuilder, strategy: RootScanStrategy): { albumType: AlbumType; artist?: string; genres?: Array<string>; mbAlbumType?: string; hasMultipleArtists: boolean } {\n\t\t// heuristically most used values\n\t\tconst artist = builder.mostUsed('artist', MUSICBRAINZ_VARIOUS_ARTISTS_NAME);\n\t\tconst genre = builder.mostUsed('genre');\n\t\tconst mbAlbumType = builder.mostUsed('mbAlbumType', '');\n\t\t// determinate album type\n\t\tconst hasMultipleArtists = artist === MUSICBRAINZ_VARIOUS_ARTISTS_NAME;\n\t\tlet albumType = AlbumType.unknown;\n\t\tif (genre) {\n\t\t\talbumType = MatchDirMetaStats.getGenreAlbumType(genre);\n\t\t}\n\t\tif (mbAlbumType && albumType === AlbumType.unknown) {\n\t\t\talbumType = MatchDirMetaStats.getMusicbrainzAlbumType(mbAlbumType);\n\t\t}\n\t\tif (albumType === AlbumType.unknown) {\n\t\t\talbumType = MatchDirMetaStats.getStrategyAlbumType(strategy, hasMultipleArtists);\n\t\t}\n\t\tif (albumType === AlbumType.audiobook) {\n\t\t\tconst series = builder.mostUsed('series');\n\t\t\tif (series) {\n\t\t\t\talbumType = AlbumType.series;\n\t\t\t}\n\t\t}\n\t\treturn {albumType, artist, hasMultipleArtists, mbAlbumType, genres: builder.asStringList('genre')};\n\t}\n\n\tstatic buildMetaStat(dir: MatchDir, settings: Jam.AdminSettingsLibrary, strategy: RootScanStrategy): MetaStat {\n\t\tconst builder = new MetaStatBuilder();\n\t\tconst trackCount = MatchDirMetaStats.buildTracksSlugs(dir, builder);\n\t\tconst subFolderTrackCount = MatchDirMetaStats.buildSubFoldersSlugs(dir, builder);\n\t\tconst {albumType, artist, hasMultipleArtists, mbAlbumType, genres} = MatchDirMetaStats.getAlbumInfo(builder, strategy);\n\t\treturn {\n\t\t\ttrackCount, subFolderTrackCount, albumType, genres, artist, hasMultipleArtists, mbAlbumType,\n\t\t\thasMultipleAlbums: builder.asList('album').length > 1,\n\t\t\talbum: builder.mostUsed('album', extractAlbumName(path.basename(dir.name))),\n\t\t\tartistSort: hasMultipleArtists ? undefined : builder.mostUsed('artistSort'),\n\t\t\tmbReleaseID: builder.mostUsed('mbReleaseID', ''),\n\t\t\tmbReleaseGroupID: builder.mostUsed('mbReleaseGroupID', ''),\n\t\t\tmbArtistID: builder.mostUsed('mbArtistID', ''),\n\t\t\tyear: builder.mostUsedNumber('year')\n\t\t};\n\t}\n}\n","import {AlbumType, cUnknownAlbum, cUnknownArtist, MUSICBRAINZ_VARIOUS_ARTISTS_NAME} from '../../../model/jam-types';\nimport {logger} from '../../../utils/logger';\nimport {slugify} from '../../../utils/slug';\nimport {Album} from '../../album/album.model';\nimport {Artist} from '../../artist/artist.model';\nimport {Series} from '../../series/series.model';\nimport {Store} from '../../store/store';\nimport {Track} from '../../track/track.model';\nimport {Changes} from '../changes/changes';\nimport {MetaStatBuilder} from '../match-dir/match-dir.meta-stats.builder';\nimport {getAlbumName, MetaMergerCache, MetaMergeTrackInfo, UpdateMetaMergeTrackInfo} from './merge.meta.cache';\n\nconst log = logger('IO.MetaMerger');\n\nexport class MetaMerger {\n\tcache: MetaMergerCache;\n\n\tconstructor(private store: Store) {\n\t\tthis.cache = new MetaMergerCache(store);\n\t}\n\n\tprivate async addMeta(trackInfo: MetaMergeTrackInfo, changes: Changes): Promise<void> {\n\t\tif (!trackInfo.parent) {\n\t\t\treturn;\n\t\t}\n\t\tconst artist = await this.cache.findOrCreateArtist(trackInfo, false, changes);\n\t\ttrackInfo.track.artistID = artist.id;\n\t\tconst albumArtist: Artist = (trackInfo.parent.tag.artist === MUSICBRAINZ_VARIOUS_ARTISTS_NAME) ?\n\t\t\tawait this.cache.findOrCreateCompilationArtist(changes) :\n\t\t\tawait this.cache.findOrCreateArtist(trackInfo, true, changes);\n\t\ttrackInfo.track.albumArtistID = albumArtist.id;\n\t\tconst album = await this.cache.findOrCreateAlbum(trackInfo, albumArtist.id, changes);\n\t\ttrackInfo.track.albumID = album.id;\n\t\tif (trackInfo.track.tag.series) {\n\t\t\tconst series = await this.cache.findOrCreateSeries(trackInfo, albumArtist.id, albumArtist.name, album.id, changes);\n\t\t\tif (series) {\n\t\t\t\ttrackInfo.track.seriesID = series.id;\n\t\t\t\talbum.seriesID = series.id;\n\t\t\t\tif (!artist.seriesIDs.includes(series.id)) {\n\t\t\t\t\tartist.seriesIDs.push(series.id);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async removeMeta(track: Track, changes: Changes): Promise<void> {\n\t\tif (track.seriesID) {\n\t\t\tconst series = await this.cache.getSeriesByID(track.seriesID, changes);\n\t\t\tif (series && !changes.updateSeries.includes(series)) {\n\t\t\t\tchanges.updateSeries.push(series);\n\t\t\t}\n\t\t}\n\t\tlet artist = await this.cache.getArtistByID(track.artistID, changes);\n\t\tif (artist && !changes.updateArtists.includes(artist)) {\n\t\t\tchanges.updateArtists.push(artist);\n\t\t}\n\t\tif (track.artistID !== track.albumArtistID) {\n\t\t\tartist = await this.cache.getArtistByID(track.albumArtistID, changes);\n\t\t\tif (artist && !changes.updateArtists.includes(artist)) {\n\t\t\t\tchanges.updateArtists.push(artist);\n\t\t\t}\n\t\t}\n\t\tconst album = await this.cache.getAlbumByID(track.albumID, changes);\n\t\tif (album && !changes.updateAlbums.includes(album)) {\n\t\t\tchanges.updateAlbums.push(album);\n\t\t}\n\t}\n\n\tprivate async collectNewTrackInfos(changes: Changes): Promise<Array<MetaMergeTrackInfo>> {\n\t\tconst newTracks: Array<MetaMergeTrackInfo> = [];\n\t\tfor (const track of changes.newTracks) {\n\t\t\tconst parent = await this.cache.getFolderByID(track.parentID, changes);\n\t\t\tif (parent) {\n\t\t\t\tnewTracks.push({track, parent});\n\t\t\t}\n\t\t}\n\t\treturn newTracks;\n\t}\n\n\tprivate async collectUpdateTrackInfos(changes: Changes): Promise<Array<UpdateMetaMergeTrackInfo>> {\n\t\tconst updateTracks: Array<UpdateMetaMergeTrackInfo> = [];\n\t\tfor (const trackInfo of changes.updateTracks) {\n\t\t\tconst parent = await this.cache.getFolderByID(trackInfo.track.parentID, changes);\n\t\t\tif (parent) {\n\t\t\t\tupdateTracks.push({track: trackInfo.track, oldTrack: trackInfo.oldTrack, parent});\n\t\t\t}\n\t\t}\n\t\treturn updateTracks;\n\t}\n\n\tprivate async collectAll(rootID: string, changes: Changes): Promise<void> {\n\t\tconst allArtistIDs = await this.store.artistStore.searchIDs({rootID});\n\t\tfor (const id of allArtistIDs) {\n\t\t\tawait this.cache.getArtistByID(id, changes);\n\t\t}\n\t\tconst allAlbumIDs = await this.store.albumStore.searchIDs({rootID});\n\t\tfor (const id of allAlbumIDs) {\n\t\t\tawait this.cache.getAlbumByID(id, changes);\n\t\t}\n\t\tconst allSeriesIDs = await this.store.seriesStore.searchIDs({rootID});\n\t\tfor (const id of allSeriesIDs) {\n\t\t\tawait this.cache.getSeriesByID(id, changes);\n\t\t}\n\t}\n\n\t// artist\n\n\tprivate async refreshArtistTracks(artist: Artist, removedTrackIDs: Array<string>, updateTracks: Array<UpdateMetaMergeTrackInfo>, newTracks: Array<MetaMergeTrackInfo>): Promise<Array<Track>> {\n\t\t// get all track ids in the db\n\t\tlet trackIDs = await this.store.trackStore.searchIDs({artistID: artist.id});\n\t\tconst tracksAlbumsIDs = await this.store.trackStore.searchIDs({albumArtistID: artist.id});\n\t\tfor (const id of tracksAlbumsIDs) {\n\t\t\tif (!trackIDs.includes(id)) {\n\t\t\t\ttrackIDs.push(id);\n\t\t\t}\n\t\t}\n\t\t// filter out removed tracks\n\t\ttrackIDs = trackIDs.filter(t => !removedTrackIDs.includes(t));\n\t\tlet removedFromArtist = updateTracks.filter(t => (t.oldTrack.artistID === artist.id && t.track.artistID !== artist.id)).map(t => t.track.id);\n\t\t// filter out updated tracks which are no longer part of the artist\n\t\ttrackIDs = trackIDs.filter(t => !removedFromArtist.includes(t));\n\t\t// filter out updated tracks which are no longer part of the album artist\n\t\tremovedFromArtist = updateTracks.filter(t => (t.oldTrack.albumArtistID === artist.id && t.track.albumArtistID !== artist.id)).map(t => t.track.id);\n\t\ttrackIDs = trackIDs.filter(t => !removedFromArtist.includes(t));\n\t\t// get all new and updated tracks which are part of the artist\n\t\tconst refreshedTracks: Array<MetaMergeTrackInfo> = (updateTracks.filter(t => t.track.artistID === artist.id || t.track.albumArtistID === artist.id) as Array<MetaMergeTrackInfo>)\n\t\t\t.concat(newTracks.filter(t => t.track.artistID === artist.id || t.track.albumArtistID === artist.id));\n\n\t\tconst tracks = await this.store.trackStore.byIds(trackIDs);\n\t\treturn tracks.concat(refreshedTracks.map(t => t.track));\n\t}\n\n\tprivate async refreshArtistAlbums(artist: Artist, changes: Changes): Promise<Array<Album>> {\n\t\t// get all album ids in the db\n\t\tlet albumIDs = await this.store.albumStore.searchIDs({artistID: artist.id});\n\t\t// filter out removed album\n\t\talbumIDs = albumIDs.filter(id => !changes.removedAlbums.find(a => a.id === id));\n\t\t// filter out updated albums which are no longer part of the artist\n\t\tconst refreshedAlbums = changes.updateAlbums.filter(a => a.artistID === artist.id)\n\t\t\t.concat(changes.newAlbums.filter(a => a.artistID === artist.id));\n\t\talbumIDs = albumIDs.filter(id => !refreshedAlbums.find(t => t.id === id));\n\n\t\tconst albums = await this.store.albumStore.byIds(albumIDs);\n\t\treturn refreshedAlbums.concat(albums);\n\t}\n\n\tprivate async refreshArtist(artist: Artist, changes: Changes, removedTrackIDs: Array<string>, updateTracks: Array<UpdateMetaMergeTrackInfo>, newTracks: Array<MetaMergeTrackInfo>): Promise<void> {\n\t\tlog.debug('Refreshing Artist:', artist.name);\n\t\tconst tracks = await this.refreshArtistTracks(artist, removedTrackIDs, updateTracks, newTracks);\n\t\tif (tracks.length === 0) {\n\t\t\tif (changes.newArtists.includes(artist)) {\n\t\t\t\tlog.error('new artist without tracks', artist);\n\t\t\t} else {\n\t\t\t\tchanges.removedArtists.push(artist);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tconst metaStatBuilder = new MetaStatBuilder();\n\t\tconst rootIDs = new Set<string>();\n\t\tconst folderIDs = new Set<string>();\n\t\tconst trackIDs = new Set<string>();\n\t\tconst seriesIDs = new Set<string>();\n\t\tfor (const track of tracks) {\n\t\t\tif (track.artistID === artist.id) {\n\t\t\t\tmetaStatBuilder.statSlugValue('artist', track.tag.artist);\n\t\t\t\tmetaStatBuilder.statSlugValue('artistSort', track.tag.artistSort);\n\t\t\t}\n\t\t\tif (track.albumArtistID === artist.id) {\n\t\t\t\tmetaStatBuilder.statSlugValue('artist', track.tag.albumArtist);\n\t\t\t\tmetaStatBuilder.statSlugValue('artistSort', track.tag.albumArtistSort);\n\t\t\t}\n\t\t\tmetaStatBuilder.statSlugValue('genre', track.tag.genre);\n\t\t\trootIDs.add(track.rootID);\n\t\t\tfolderIDs.add(track.parentID);\n\t\t\ttrackIDs.add(track.id);\n\t\t\tif (track.seriesID) {\n\t\t\t\tseriesIDs.add(track.seriesID);\n\t\t\t}\n\t\t}\n\t\tartist.rootIDs = [...rootIDs];\n\t\tartist.trackIDs = [...trackIDs];\n\t\tartist.folderIDs = [...folderIDs];\n\t\tartist.seriesIDs = [...seriesIDs];\n\t\tartist.genres = metaStatBuilder.asStringList('genre');\n\t\tif (artist.name !== MUSICBRAINZ_VARIOUS_ARTISTS_NAME) {\n\t\t\tconst artistName = metaStatBuilder.mostUsed('artist') || cUnknownArtist;\n\t\t\tartist.name = artistName;\n\t\t\tartist.slug = slugify(artistName);\n\t\t\tartist.nameSort = metaStatBuilder.mostUsed('artistSort');\n\t\t}\n\t\tconst albums = await this.refreshArtistAlbums(artist, changes);\n\t\tconst albumIDs = new Set<string>();\n\t\tconst albumTypes = new Set<AlbumType>();\n\t\tfor (const album of albums) {\n\t\t\talbumIDs.add(album.id);\n\t\t\talbumTypes.add(album.albumType);\n\t\t}\n\t\tartist.albumIDs = [...albumIDs];\n\t\tartist.albumTypes = [...albumTypes];\n\t\tif (!changes.newArtists.includes(artist)) {\n\t\t\tchanges.updateArtists.push(artist);\n\t\t}\n\t}\n\n\tprivate async refreshArtists(changes: Changes, removedTrackIDs: Array<string>, updateTracks: Array<UpdateMetaMergeTrackInfo>, newTracks: Array<MetaMergeTrackInfo>): Promise<void> {\n\t\tconst checkArtists = changes.updateArtists.concat(changes.newArtists);\n\t\tchanges.removedArtists = [];\n\t\tchanges.updateArtists = [];\n\t\tfor (const artist of checkArtists) {\n\t\t\tawait this.refreshArtist(artist, changes, removedTrackIDs, updateTracks, newTracks);\n\t\t}\n\t}\n\n\t// series\n\n\tprivate async refreshSeriesTracks(series: Series, changes: Changes, removedTrackIDs: Array<string>, updateTracks: Array<UpdateMetaMergeTrackInfo>, newTracks: Array<MetaMergeTrackInfo>): Promise<Array<MetaMergeTrackInfo>> {\n\t\tlet trackIDs = await this.store.trackStore.searchIDs({seriesID: series.id});\n\t\t// filter out removed tracks\n\t\ttrackIDs = trackIDs.filter(t => !removedTrackIDs.includes(t));\n\t\t// filter out updated tracks which are no longer part of the series\n\t\tconst removedFromAlbum = updateTracks.filter(t => (t.oldTrack.seriesID === series.id && t.track.seriesID !== series.id)).map(t => t.track.id);\n\t\ttrackIDs = trackIDs.filter(t => !removedFromAlbum.includes(t));\n\t\t// get all new and updated tracks which are part of the series\n\t\tconst refreshedTracks: Array<MetaMergeTrackInfo> = (updateTracks.filter(t => t.track && t.track.seriesID === series.id) as Array<MetaMergeTrackInfo>)\n\t\t\t.concat(newTracks.filter(t => t.track.seriesID === series.id));\n\t\tconst refreshIDs = refreshedTracks.map(t => t.track.id);\n\t\ttrackIDs = trackIDs.filter(t => !refreshIDs.includes(t));\n\t\t// unchanged tracks\n\t\tconst tracks = await this.store.trackStore.byIds(trackIDs);\n\t\tfor (const track of tracks) {\n\t\t\tconst folder = await this.cache.getFolderByID(track.parentID, changes);\n\t\t\tif (folder) {\n\t\t\t\trefreshedTracks.push({track, parent: folder});\n\t\t\t}\n\t\t}\n\t\treturn refreshedTracks;\n\t}\n\n\tprivate async refreshSeriesAlbums(series: Series, changes: Changes): Promise<Array<Album>> {\n\t\t// get all album ids in the db\n\t\tlet albumIDs = await this.store.albumStore.searchIDs({seriesID: series.id});\n\t\t// filter out removed album\n\t\talbumIDs = albumIDs.filter(id => !changes.removedAlbums.find(a => a.id === id));\n\t\t// filter out updated albums which are no longer part of the artist\n\t\tconst refreshedAlbums = changes.updateAlbums.filter(a => a.seriesID === series.id)\n\t\t\t.concat(changes.newAlbums.filter(a => a.seriesID === series.id));\n\t\talbumIDs = albumIDs.filter(id => !refreshedAlbums.find(t => t.id === id));\n\t\tconst albums = await this.store.albumStore.byIds(albumIDs);\n\t\treturn refreshedAlbums.concat(albums);\n\t}\n\n\tprivate async refreshSeries(series: Series, changes: Changes, removedTrackIDs: Array<string>, updateTracks: Array<UpdateMetaMergeTrackInfo>, newTracks: Array<MetaMergeTrackInfo>): Promise<void> {\n\t\tlog.debug('Refreshing Series:', series.name);\n\t\tconst tracks = await this.refreshSeriesTracks(series, changes, removedTrackIDs, updateTracks, newTracks);\n\t\tif (tracks.length === 0) {\n\t\t\tif (changes.newSeries.includes(series)) {\n\t\t\t\tconsole.error('new series without tracks', series);\n\t\t\t} else {\n\t\t\t\tchanges.removedSeries.push(series);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tconst rootIDs = new Set<string>();\n\t\tconst trackIDs = new Set<string>();\n\t\tconst folderIDs = new Set<string>();\n\t\tconst albumIDs = new Set<string>();\n\t\tfor (const trackInfo of tracks) {\n\t\t\tconst track = trackInfo.track;\n\t\t\trootIDs.add(track.rootID);\n\t\t\tfolderIDs.add(track.parentID);\n\t\t\talbumIDs.add(track.albumID);\n\t\t\ttrackIDs.add(track.id);\n\t\t}\n\t\tconst albums = await this.refreshSeriesAlbums(series, changes);\n\t\tconst albumTypes = new Set<AlbumType>();\n\t\tfor (const album of albums) {\n\t\t\talbumTypes.add(album.albumType);\n\t\t}\n\t\tconst artist = await this.cache.getArtistByID(series.artistID, changes);\n\t\tif (artist) {\n\t\t\tseries.artist = artist.name;\n\t\t}\n\t\tseries.rootIDs = [...rootIDs];\n\t\tseries.trackIDs = [...trackIDs];\n\t\tseries.folderIDs = [...folderIDs];\n\t\tseries.albumIDs = [...albumIDs];\n\t\tseries.albumTypes = [...albumTypes];\n\t\tif (!changes.newSeries.includes(series)) {\n\t\t\tchanges.updateSeries.push(series);\n\t\t}\n\t}\n\n\tprivate async refreshSerieses(changes: Changes, removedTrackIDs: Array<string>, updateTracks: Array<UpdateMetaMergeTrackInfo>, newTracks: Array<MetaMergeTrackInfo>): Promise<void> {\n\t\tconst checkSeries = changes.updateSeries.concat(changes.newSeries);\n\t\tchanges.removedSeries = [];\n\t\tchanges.updateSeries = [];\n\t\tfor (const item of checkSeries) {\n\t\t\tawait this.refreshSeries(item, changes, removedTrackIDs, updateTracks, newTracks);\n\t\t}\n\t}\n\n\t// album\n\n\tprivate async refreshAlbumTracks(album: Album, changes: Changes, removedTrackIDs: Array<string>, updateTracks: Array<UpdateMetaMergeTrackInfo>, newTracks: Array<MetaMergeTrackInfo>): Promise<Array<MetaMergeTrackInfo>> {\n\t\tlet trackIDs = await this.store.trackStore.searchIDs({albumID: album.id});\n\t\t// filter out removed tracks\n\t\ttrackIDs = trackIDs.filter(t => !removedTrackIDs.includes(t));\n\t\t// filter out updated tracks which are no longer part of the album\n\t\tconst removedFromAlbum = updateTracks.filter(t => (t.oldTrack.albumID === album.id && t.track.albumID !== album.id)).map(t => t.track.id);\n\t\ttrackIDs = trackIDs.filter(t => !removedFromAlbum.includes(t));\n\t\t// get all new and updated tracks which are part of the album\n\t\tconst refreshedTracks: Array<MetaMergeTrackInfo> = (updateTracks.filter(t => t.track && t.track.albumID === album.id) as Array<MetaMergeTrackInfo>)\n\t\t\t.concat(newTracks.filter(t => t.track.albumID === album.id));\n\t\tconst refreshIDs = refreshedTracks.map(t => t.track.id);\n\t\ttrackIDs = trackIDs.filter(t => !refreshIDs.includes(t));\n\t\t// unchanged tracks\n\t\tconst tracks = await this.store.trackStore.byIds(trackIDs);\n\t\tfor (const track of tracks) {\n\t\t\tconst folder = await this.cache.getFolderByID(track.parentID, changes);\n\t\t\tif (folder) {\n\t\t\t\trefreshedTracks.push({track, parent: folder});\n\t\t\t}\n\t\t}\n\t\treturn refreshedTracks;\n\t}\n\n\tprivate async refreshAlbum(album: Album, changes: Changes, removedTrackIDs: Array<string>, updateTracks: Array<UpdateMetaMergeTrackInfo>, newTracks: Array<MetaMergeTrackInfo>): Promise<void> {\n\t\tlog.debug('Refreshing Album:', album.name);\n\t\tconst trackInfos = await this.refreshAlbumTracks(album, changes, removedTrackIDs, updateTracks, newTracks);\n\t\tif (trackInfos.length === 0) {\n\t\t\tif (!changes.removedAlbums.includes(album)) {\n\t\t\t\tchanges.removedAlbums.push(album);\n\t\t\t} else {\n\t\t\t\tconsole.error('new album without tracks', album);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tlet duration = 0;\n\t\tconst rootIDs = new Set<string>();\n\t\tconst folderIDs = new Set<string>();\n\t\tconst trackIDs = new Set<string>();\n\t\tconst metaStatBuilder = new MetaStatBuilder();\n\t\tfor (const trackInfo of trackInfos) {\n\t\t\tconst track = trackInfo.track;\n\t\t\trootIDs.add(track.rootID);\n\t\t\tfolderIDs.add(track.parentID);\n\t\t\ttrackIDs.add(track.id);\n\t\t\tmetaStatBuilder.statSlugValue('artist', track.tag.albumArtist || track.tag.artist);\n\t\t\tmetaStatBuilder.statID('mbArtistID', track.tag.mbAlbumArtistID || track.tag.mbArtistID);\n\t\t\tmetaStatBuilder.statID('mbReleaseID', track.tag.mbReleaseID);\n\t\t\tmetaStatBuilder.statSlugValue('genre', track.tag.genre);\n\t\t\tmetaStatBuilder.statSlugValue('seriesNr', track.tag.seriesNr);\n\t\t\tmetaStatBuilder.statSlugValue('series', track.tag.series);\n\t\t\tmetaStatBuilder.statNumber('year', track.tag.year);\n\t\t\tduration += (track.media.duration || 0);\n\t\t\tmetaStatBuilder.statSlugValue('name', getAlbumName(trackInfo));\n\t\t\tmetaStatBuilder.statID('albumType', trackInfo.parent && trackInfo.parent.tag && trackInfo.parent.tag.albumType !== undefined ? trackInfo.parent.tag.albumType : undefined);\n\t\t}\n\t\talbum.rootIDs = [...rootIDs];\n\t\talbum.trackIDs = [...trackIDs];\n\t\talbum.folderIDs = [...folderIDs];\n\t\talbum.artist = metaStatBuilder.mostUsed('artist') || cUnknownArtist;\n\t\talbum.name = metaStatBuilder.mostUsed('name') || cUnknownAlbum;\n\t\talbum.seriesNr = metaStatBuilder.mostUsed('seriesNr');\n\t\talbum.mbArtistID = metaStatBuilder.mostUsed('mbArtistID');\n\t\talbum.mbReleaseID = metaStatBuilder.mostUsed('mbReleaseID');\n\t\talbum.genres = metaStatBuilder.asStringList('genre');\n\t\talbum.series = metaStatBuilder.mostUsed('series');\n\t\talbum.year = metaStatBuilder.mostUsedNumber('year');\n\t\talbum.albumType = metaStatBuilder.mostUsed('albumType') as AlbumType || AlbumType.unknown;\n\t\talbum.duration = duration;\n\t\tif (!changes.newAlbums.includes(album)) {\n\t\t\tchanges.updateAlbums.push(album);\n\t\t}\n\t}\n\n\tprivate async refreshAlbums(changes: Changes, removedTrackIDs: Array<string>, updateTracks: Array<UpdateMetaMergeTrackInfo>, newTracks: Array<MetaMergeTrackInfo>): Promise<void> {\n\t\tconst checkAlbums = changes.updateAlbums.concat(changes.newAlbums);\n\t\tchanges.removedAlbums = [];\n\t\tchanges.updateAlbums = [];\n\t\tfor (const album of checkAlbums) {\n\t\t\tawait this.refreshAlbum(album, changes, removedTrackIDs, updateTracks, newTracks);\n\t\t}\n\t}\n\n\tasync mergeMeta(forceMetaRefresh: boolean, rootID: string, changes: Changes): Promise<void> {\n\t\tconst newTracks: Array<MetaMergeTrackInfo> = await this.collectNewTrackInfos(changes);\n\t\tconst updateTracks: Array<UpdateMetaMergeTrackInfo> = await this.collectUpdateTrackInfos(changes);\n\t\t// merge new\n\t\tfor (const trackInfo of newTracks) {\n\t\t\tawait this.addMeta(trackInfo, changes);\n\t\t}\n\t\t// remove missing\n\t\tfor (const track of changes.removedTracks) {\n\t\t\tawait this.removeMeta(track, changes);\n\t\t}\n\t\t// update updated\n\t\tfor (const trackInfo of updateTracks) {\n\t\t\tawait this.removeMeta(trackInfo.oldTrack, changes);\n\t\t\tawait this.addMeta(trackInfo, changes);\n\t\t}\n\t\tif (forceMetaRefresh) {\n\t\t\t// collect all artists & albums to refresh\n\t\t\tawait this.collectAll(rootID, changes);\n\t\t}\n\t\tconst removedTrackIDs = changes.removedTracks.map(t => t.id);\n\t\tawait this.refreshAlbums(changes, removedTrackIDs, updateTracks, newTracks);\n\t\tawait this.refreshArtists(changes, removedTrackIDs, updateTracks, newTracks);\n\t\tawait this.refreshSerieses(changes, removedTrackIDs, updateTracks, newTracks);\n\t}\n}\n","import {DBObjectType} from '../../../db/db.types';\nimport {AlbumType, cUnknownAlbum, cUnknownArtist, MUSICBRAINZ_VARIOUS_ARTISTS_ID, MUSICBRAINZ_VARIOUS_ARTISTS_NAME} from '../../../model/jam-types';\nimport {extractAlbumName} from '../../../utils/album-name';\nimport {slugify} from '../../../utils/slug';\nimport {Album} from '../../album/album.model';\nimport {Artist} from '../../artist/artist.model';\nimport {Folder} from '../../folder/folder.model';\nimport {Series} from '../../series/series.model';\nimport {Store} from '../../store/store';\nimport {Track} from '../../track/track.model';\nimport {Changes} from '../changes/changes';\n\nexport interface MetaMergeTrackInfo {\n\ttrack: Track;\n\tparent: Folder;\n}\n\nexport interface UpdateMetaMergeTrackInfo extends MetaMergeTrackInfo {\n\toldTrack: Track;\n}\n\nexport function getAlbumName(trackInfo: MetaMergeTrackInfo): string {\n\tif (trackInfo.parent && trackInfo.parent.tag.albumType === AlbumType.compilation) {\n\t\treturn trackInfo.parent.tag.album || cUnknownAlbum;\n\t}\n\treturn extractAlbumName(trackInfo.track.tag.album || cUnknownAlbum);\n}\n\nexport function getAlbumSlug(trackInfo: MetaMergeTrackInfo): string {\n\treturn slugify(getAlbumName(trackInfo));\n}\n\nexport class MetaMergerCache {\n\tprivate artistCache: Array<{ artist: Artist; slugs: Array<string> }> = [];\n\tprivate seriesCache: Array<Series> = [];\n\tprivate albumCache: Array<Album> = [];\n\tprivate folderCache: Array<Folder> = [];\n\n\tconstructor(private store: Store) {\n\n\t}\n\n\t// series\n\n\tprivate async buildSeries(trackInfo: MetaMergeTrackInfo, artistID: string, artist: string): Promise<Series> {\n\t\treturn {\n\t\t\tid: await this.store.seriesStore.getNewId(),\n\t\t\ttype: DBObjectType.series,\n\t\t\tname: trackInfo.track.tag.series || '',\n\t\t\talbumTypes: trackInfo.parent && trackInfo.parent.tag && trackInfo.parent.tag.albumType !== undefined ? [trackInfo.parent.tag.albumType] : [AlbumType.unknown],\n\t\t\tartistID, artist,\n\t\t\tfolderIDs: [],\n\t\t\talbumIDs: [],\n\t\t\ttrackIDs: [],\n\t\t\trootIDs: [],\n\t\t\tcreated: Date.now()\n\t\t};\n\t}\n\n\tprivate async findSeriesInDB(trackInfo: MetaMergeTrackInfo, artistID: string): Promise<Series | undefined> {\n\t\treturn this.store.seriesStore.searchOne({name: trackInfo.track.tag.series, artistID});\n\t}\n\n\tprivate async findSeriesInCache(trackInfo: MetaMergeTrackInfo, artistID: string): Promise<Series | undefined> {\n\t\tif (!trackInfo.track.tag.series) {\n\t\t\treturn;\n\t\t}\n\t\treturn this.seriesCache.find(a => (a.name === trackInfo.track.tag.series) && (a.artistID === artistID));\n\t}\n\n\tasync getSeriesByID(id: string, changes?: Changes): Promise<Series | undefined> {\n\t\tlet series = this.seriesCache.find(a => a.id === id);\n\t\tif (series) {\n\t\t\treturn series;\n\t\t}\n\t\tseries = await this.store.seriesStore.byId(id);\n\t\tif (series) {\n\t\t\tthis.seriesCache.push(series);\n\t\t\tif (changes) {\n\t\t\t\tchanges.updateSeries.push(series);\n\t\t\t}\n\t\t}\n\t\treturn series;\n\t}\n\n\tasync findOrCreateSeries(trackInfo: MetaMergeTrackInfo, artistID: string, artist: string, albumID: string, changes: Changes): Promise<Series> {\n\t\tlet series = await this.findSeriesInCache(trackInfo, artistID);\n\t\tif (series) {\n\t\t\treturn series;\n\t\t}\n\t\tseries = await this.findSeriesInDB(trackInfo, artistID);\n\t\tif (!series) {\n\t\t\tseries = await this.buildSeries(trackInfo, artistID, artist);\n\t\t\tchanges.newSeries.push(series);\n\t\t} else {\n\t\t\tchanges.updateSeries.push(series);\n\t\t}\n\t\tthis.seriesCache.push(series);\n\t\treturn series;\n\t}\n\n\t// album\n\n\tprivate async buildAlbum(trackInfo: MetaMergeTrackInfo, artistID: string): Promise<Album> {\n\t\treturn {\n\t\t\tid: await this.store.albumStore.getNewId(),\n\t\t\ttype: DBObjectType.album,\n\t\t\tslug: getAlbumSlug(trackInfo),\n\t\t\tname: getAlbumName(trackInfo),\n\t\t\talbumType: trackInfo.parent && trackInfo.parent.tag && trackInfo.parent.tag.albumType !== undefined ? trackInfo.parent.tag.albumType : AlbumType.unknown,\n\t\t\tartist: trackInfo.track.tag.albumArtist || trackInfo.track.tag.artist || cUnknownArtist,\n\t\t\tartistID,\n\t\t\tmbArtistID: trackInfo.track.tag.mbAlbumArtistID || trackInfo.track.tag.mbArtistID,\n\t\t\tmbReleaseID: trackInfo.track.tag.mbReleaseID,\n\t\t\tseries: trackInfo.track.tag.series,\n\t\t\tseriesNr: trackInfo.track.tag.seriesNr,\n\t\t\tgenres: [],\n\t\t\tfolderIDs: [],\n\t\t\ttrackIDs: [],\n\t\t\trootIDs: [],\n\t\t\tyear: trackInfo.track.tag.year,\n\t\t\tduration: trackInfo.track.media.duration || 0,\n\t\t\tcreated: Date.now()\n\t\t};\n\t}\n\n\tprivate async findAlbumInDB(trackInfo: MetaMergeTrackInfo, artistID: string): Promise<Album | undefined> {\n\t\tif (trackInfo.track.tag.mbReleaseID) {\n\t\t\tconst album = await this.store.albumStore.searchOne({mbReleaseID: trackInfo.track.tag.mbReleaseID});\n\t\t\tif (album) {\n\t\t\t\treturn album;\n\t\t\t}\n\t\t}\n\t\treturn this.store.albumStore.searchOne({slug: getAlbumSlug(trackInfo), artistID});\n\t}\n\n\tprivate async findAlbumInCache(trackInfo: MetaMergeTrackInfo, artistID: string): Promise<Album | undefined> {\n\t\tif (trackInfo.track.tag.mbReleaseID) {\n\t\t\tconst album = this.albumCache.find(a => a.mbReleaseID === trackInfo.track.tag.mbReleaseID);\n\t\t\tif (album) {\n\t\t\t\treturn album;\n\t\t\t}\n\t\t}\n\t\tconst name = getAlbumName(trackInfo);\n\t\treturn this.albumCache.find(a => (a.name === name) && (a.artistID === artistID));\n\t}\n\n\tasync getAlbumByID(id: string, changes?: Changes): Promise<Album | undefined> {\n\t\tlet album = this.albumCache.find(a => a.id === id);\n\t\tif (album) {\n\t\t\treturn album;\n\t\t}\n\t\talbum = await this.store.albumStore.byId(id);\n\t\tif (album) {\n\t\t\tthis.albumCache.push(album);\n\t\t\tif (changes) {\n\t\t\t\tchanges.updateAlbums.push(album);\n\t\t\t}\n\t\t}\n\t\treturn album;\n\t}\n\n\tasync findOrCreateAlbum(trackInfo: MetaMergeTrackInfo, artistID: string, changes: Changes): Promise<Album> {\n\t\tlet album = await this.findAlbumInCache(trackInfo, artistID);\n\t\tif (album) {\n\t\t\treturn album;\n\t\t}\n\t\talbum = await this.findAlbumInDB(trackInfo, artistID);\n\t\tif (!album) {\n\t\t\talbum = await this.buildAlbum(trackInfo, artistID);\n\t\t\tchanges.newAlbums.push(album);\n\t\t} else {\n\t\t\tchanges.updateAlbums.push(album);\n\t\t}\n\t\tthis.albumCache.push(album);\n\t\treturn album;\n\t}\n\n\t// artist\n\n\tprivate async buildArtist(trackInfo: MetaMergeTrackInfo, albumArtist: boolean): Promise<Artist> {\n\t\tlet aa = {mbArtistID: trackInfo.track.tag.mbArtistID, name: trackInfo.track.tag.artist, nameSort: trackInfo.track.tag.artistSort};\n\t\tif (albumArtist && (trackInfo.track.tag.mbAlbumArtistID || trackInfo.track.tag.albumArtist)) {\n\t\t\taa = {mbArtistID: trackInfo.track.tag.mbAlbumArtistID, name: trackInfo.track.tag.albumArtist, nameSort: trackInfo.track.tag.albumArtistSort};\n\t\t}\n\t\taa.name = aa.name || cUnknownArtist;\n\t\treturn {\n\t\t\tid: await this.store.artistStore.getNewId(),\n\t\t\ttype: DBObjectType.artist,\n\t\t\trootIDs: [],\n\t\t\tslug: slugify(aa.name),\n\t\t\tname: aa.name,\n\t\t\tnameSort: aa.nameSort,\n\t\t\tmbArtistID: aa.mbArtistID,\n\t\t\talbumTypes: [],\n\t\t\tseriesIDs: [],\n\t\t\talbumIDs: [],\n\t\t\tfolderIDs: [],\n\t\t\ttrackIDs: [],\n\t\t\tcreated: Date.now()\n\t\t};\n\t}\n\n\tprivate async findArtistInDB(trackInfo: MetaMergeTrackInfo, albumArtist: boolean): Promise<Artist | undefined> {\n\t\tconst mbArtistID = albumArtist ? (trackInfo.track.tag.mbAlbumArtistID || trackInfo.track.tag.mbArtistID) : trackInfo.track.tag.mbArtistID;\n\t\tif (mbArtistID) {\n\t\t\tconst artist = await this.store.artistStore.searchOne({mbArtistID});\n\t\t\tif (artist) {\n\t\t\t\treturn artist;\n\t\t\t}\n\t\t}\n\t\tconst slug = slugify((albumArtist ? (trackInfo.track.tag.albumArtist || trackInfo.track.tag.artist) : trackInfo.track.tag.artist) || cUnknownArtist);\n\t\treturn this.store.artistStore.searchOne({slug});\n\t}\n\n\tprivate async findArtistInCache(trackInfo: MetaMergeTrackInfo, albumArtist: boolean): Promise<Artist | undefined> {\n\t\tlet aa = {mbArtistID: trackInfo.track.tag.mbArtistID, name: trackInfo.track.tag.artist};\n\t\tif (albumArtist && (trackInfo.track.tag.mbAlbumArtistID || trackInfo.track.tag.albumArtist)) {\n\t\t\taa = {mbArtistID: trackInfo.track.tag.mbAlbumArtistID, name: trackInfo.track.tag.albumArtist};\n\t\t}\n\t\tconst slug = slugify(aa.name || cUnknownArtist);\n\t\tif (aa.mbArtistID) {\n\t\t\tconst artist = this.artistCache.find(a => a.artist.mbArtistID === aa.mbArtistID);\n\t\t\tif (artist) {\n\t\t\t\t// disabled merging with id AND slug. if aa.mbArtistID is wrong, it's causing wrongly combined artists\n\t\t\t\t// in all following new tracks of those artists all over the place, which is worse than duplicated artist entries\n\t\t\t\t// not sure how to handle invalid data better in this stage\n\n\t\t\t\t// if (!artist.slugs.includes(slug)) {\n\t\t\t\t// \tartist.slugs.push(slug);\n\t\t\t\t// }\n\t\t\t\treturn artist.artist;\n\t\t\t}\n\t\t}\n\t\tconst slugArtist = this.artistCache.find(a => a.slugs.includes(slug));\n\t\tif (slugArtist) {\n\t\t\tif (!slugArtist.artist.mbArtistID && aa.mbArtistID) {\n\t\t\t\tslugArtist.artist.mbArtistID = aa.mbArtistID;\n\t\t\t}\n\t\t\treturn slugArtist.artist;\n\t\t}\n\t}\n\n\tasync getArtistByID(id: string, changes: Changes): Promise<Artist | undefined> {\n\t\tconst artistCache = this.artistCache.find(a => a.artist.id === id);\n\t\tif (artistCache) {\n\t\t\treturn artistCache.artist;\n\t\t}\n\t\tconst artist = await this.store.artistStore.byId(id);\n\t\tif (artist) {\n\t\t\tthis.artistCache.push({artist, slugs: [artist.slug]});\n\t\t\tchanges.updateArtists.push(artist);\n\t\t}\n\t\treturn artist;\n\t}\n\n\tprivate async findCompilationArtist(changes: Changes): Promise<Artist | undefined> {\n\t\tconst artistCache = this.artistCache.find(a => a.artist.mbArtistID === MUSICBRAINZ_VARIOUS_ARTISTS_ID);\n\t\tif (artistCache) {\n\t\t\treturn artistCache.artist;\n\t\t}\n\t\tconst artist = await this.store.artistStore.searchOne({mbArtistID: MUSICBRAINZ_VARIOUS_ARTISTS_ID});\n\t\tif (artist) {\n\t\t\tchanges.updateArtists.push(artist);\n\t\t\tthis.artistCache.push({artist, slugs: [artist.slug]});\n\t\t}\n\t\treturn artist;\n\t}\n\n\tasync findOrCreateCompilationArtist(changes: Changes): Promise<Artist> {\n\t\tlet artist = await this.findCompilationArtist(changes);\n\t\tif (!artist) {\n\t\t\tartist = {\n\t\t\t\tid: await this.store.artistStore.getNewId(),\n\t\t\t\ttype: DBObjectType.artist,\n\t\t\t\trootIDs: [],\n\t\t\t\tslug: slugify(MUSICBRAINZ_VARIOUS_ARTISTS_NAME),\n\t\t\t\tname: MUSICBRAINZ_VARIOUS_ARTISTS_NAME,\n\t\t\t\tmbArtistID: MUSICBRAINZ_VARIOUS_ARTISTS_ID,\n\t\t\t\talbumTypes: [AlbumType.compilation],\n\t\t\t\tseriesIDs: [],\n\t\t\t\tfolderIDs: [],\n\t\t\t\talbumIDs: [],\n\t\t\t\ttrackIDs: [],\n\t\t\t\tcreated: Date.now()\n\t\t\t};\n\t\t\tchanges.newArtists.push(artist);\n\t\t\tthis.artistCache.push({artist, slugs: [artist.slug]});\n\t\t\treturn artist;\n\t\t}\n\t\treturn artist;\n\t}\n\n\tasync findOrCreateArtist(trackInfo: MetaMergeTrackInfo, albumArtist: boolean, changes: Changes): Promise<Artist> {\n\t\tlet artist = await this.findArtistInCache(trackInfo, albumArtist);\n\t\tif (artist) {\n\t\t\treturn artist;\n\t\t}\n\t\tartist = await this.findArtistInDB(trackInfo, albumArtist);\n\t\tif (!artist) {\n\t\t\tconst name = (albumArtist ? (trackInfo.track.tag.albumArtist || trackInfo.track.tag.artist) : trackInfo.track.tag.artist) || cUnknownArtist;\n\t\t\tif (name === MUSICBRAINZ_VARIOUS_ARTISTS_NAME) {\n\t\t\t\treturn this.findOrCreateCompilationArtist(changes);\n\t\t\t}\n\t\t\tartist = await this.buildArtist(trackInfo, albumArtist);\n\t\t\tchanges.newArtists.push(artist);\n\t\t} else {\n\t\t\tchanges.updateArtists.push(artist);\n\t\t}\n\t\tthis.artistCache.push({artist, slugs: [artist.slug]});\n\t\treturn artist;\n\t}\n\n\t// folder\n\n\tasync getFolderByID(id: string, changes: Changes): Promise<Folder | undefined> {\n\t\tlet folder = changes.newFolders.find(f => f.id === id);\n\t\tif (!folder) {\n\t\t\tfolder = changes.updateFolders.find(f => f.id === id);\n\t\t}\n\t\tif (!folder) {\n\t\t\tfolder = this.folderCache.find(f => f.id === id);\n\t\t}\n\t\tif (!folder) {\n\t\t\tfolder = await this.store.folderStore.byId(id);\n\t\t\tif (folder) {\n\t\t\t\tthis.folderCache.push(folder);\n\t\t\t}\n\t\t}\n\t\treturn folder;\n\t}\n}\n","import fse from 'fs-extra';\nimport path from 'path';\nimport {DBObjectType} from '../../../db/db.types';\nimport {FolderType} from '../../../model/jam-types';\nimport {containsFolderSystemChars, ensureTrailingPathSeparator, replaceFolderSystemChars} from '../../../utils/fs-utils';\nimport {Folder} from '../../folder/folder.model';\nimport {Root} from '../../root/root.model';\nimport {Store} from '../../store/store';\nimport {Track} from '../../track/track.model';\n\nexport class FolderWorker {\n\n\tconstructor(private store: Store) {\n\n\t}\n\n\tprivate static async validateFolderName(newName: string): Promise<string> {\n\t\tif (containsFolderSystemChars(newName)) {\n\t\t\treturn Promise.reject(Error('Invalid Directory Name'));\n\t\t}\n\t\tconst name = replaceFolderSystemChars(newName, '').trim();\n\t\tif (name.length === 0 || ['.', '..'].includes(name)) {\n\t\t\treturn Promise.reject(Error('Invalid Directory Name'));\n\t\t}\n\t\treturn name;\n\t}\n\n\tprivate static async validateFolderTask(sourceDir: string, destPath: string, destName: string): Promise<void> {\n\t\tif (!await fse.pathExists(sourceDir)) {\n\t\t\treturn Promise.reject(Error('Directory does not exists'));\n\t\t}\n\t\tconst newPath = path.join(destPath, destName);\n\t\tconst exists = await fse.pathExists(newPath);\n\t\tif (exists) {\n\t\t\treturn Promise.reject(Error('Folder name already used in Destination'));\n\t\t}\n\t}\n\n\tprivate static async buildNewFolder(dir: string, parent: Folder): Promise<Folder> {\n\t\tconst stat = await fse.stat(dir);\n\t\treturn {\n\t\t\tid: '',\n\t\t\ttype: DBObjectType.folder,\n\t\t\trootID: parent.rootID,\n\t\t\tpath: ensureTrailingPathSeparator(dir),\n\t\t\tparentID: parent.id,\n\t\t\tstat: {\n\t\t\t\tcreated: stat.ctime.valueOf(),\n\t\t\t\tmodified: stat.mtime.valueOf()\n\t\t\t},\n\t\t\ttag: {\n\t\t\t\tlevel: parent.tag.level + 1,\n\t\t\t\ttrackCount: 0,\n\t\t\t\tfolderCount: 0,\n\t\t\t\ttype: FolderType.extras\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate async updatePaths(oldPath: string, newPath: string, rootID: string): Promise<{ changedFolderIDs: Set<string>; changedTrackIDs: Set<string> }> {\n\t\tnewPath = ensureTrailingPathSeparator(newPath);\n\t\toldPath = ensureTrailingPathSeparator(oldPath);\n\t\tconst folders = (await this.store.folderStore.search({inPath: oldPath})).items;\n\t\tfor (const f of folders) {\n\t\t\tf.path = f.path.replace(ensureTrailingPathSeparator(oldPath), ensureTrailingPathSeparator(newPath));\n\t\t\tf.rootID = rootID;\n\t\t}\n\t\tawait this.store.folderStore.replaceMany(folders);\n\t\tconst tracks = (await this.store.trackStore.search({inPath: oldPath})).items;\n\t\tfor (const t of tracks) {\n\t\t\tt.path = t.path.replace(ensureTrailingPathSeparator(oldPath), ensureTrailingPathSeparator(newPath));\n\t\t\tt.rootID = rootID;\n\t\t}\n\t\tawait this.store.trackStore.replaceMany(tracks);\n\t\treturn {changedFolderIDs: new Set<string>(folders.map(f => f.id)), changedTrackIDs: new Set<string>(tracks.map(t => t.id))};\n\t}\n\n\tprivate async moveFolder(folder: Folder, newParent: Folder): Promise<{ changedFolderIDs: Set<string>; changedTrackIDs: Set<string> }> {\n\t\tif (folder.parentID === newParent.id) {\n\t\t\treturn Promise.reject(Error('Folder name already used in Destination'));\n\t\t}\n\t\tconst p = newParent.path;\n\t\tconst name = path.basename(folder.path);\n\t\tconst oldpath = folder.path;\n\t\tconst newPath = path.join(p, name);\n\t\tawait FolderWorker.validateFolderTask(oldpath, p, name);\n\t\ttry {\n\t\t\tawait fse.move(folder.path, newPath);\n\t\t} catch (e) {\n\t\t\treturn Promise.reject(Error('Folder moving failed'));\n\t\t}\n\t\tfolder.path = ensureTrailingPathSeparator(newPath);\n\t\tfolder.rootID = newParent.rootID;\n\t\tfolder.parentID = newParent.id;\n\t\tawait this.store.folderStore.replace(folder);\n\t\treturn this.updatePaths(oldpath, newPath, newParent.rootID);\n\t}\n\n\tpublic async move(newParentID: string, moveFolderIDs: Array<string>): Promise<{ changedFolderIDs: Array<string>; changedTrackIDs: Array<string> }> {\n\t\tconst newParent = await this.store.folderStore.byId(newParentID);\n\t\tif (!newParent) {\n\t\t\treturn Promise.reject(Error('Destination Folder not found'));\n\t\t}\n\t\tif (moveFolderIDs.includes(newParentID)) {\n\t\t\treturn Promise.reject(Error('Folder cannot be moved to itself'));\n\t\t}\n\t\tlet changedFolderIDs = new Set<string>();\n\t\tlet changedTrackIDs = new Set<string>();\n\t\tchangedFolderIDs.add(newParent.id);\n\t\tfor (const id of moveFolderIDs) {\n\t\t\tchangedFolderIDs.add(id);\n\t\t\tconst folder = await this.store.folderStore.byId(id);\n\t\t\tif (!folder) {\n\t\t\t\treturn Promise.reject(Error('Source Folder not found'));\n\t\t\t}\n\t\t\tif (folder.parentID) {\n\t\t\t\tchangedFolderIDs.add(folder.parentID);\n\t\t\t}\n\t\t\tconst res = await this.moveFolder(folder, newParent);\n\t\t\tchangedFolderIDs = new Set<string>([...changedFolderIDs, ...res.changedFolderIDs]);\n\t\t\tchangedTrackIDs = new Set<string>([...changedTrackIDs, ...res.changedTrackIDs]);\n\t\t}\n\t\treturn {changedFolderIDs: [...changedFolderIDs], changedTrackIDs: [...changedTrackIDs]};\n\t}\n\n\tpublic async rename(folderID: string, newName: string): Promise<{ changedFolderIDs: Array<string>; changedTrackIDs: Array<string> }> {\n\t\tconst folder = await this.store.folderStore.byId(folderID);\n\t\tif (!folder) {\n\t\t\treturn Promise.reject(Error('Folder not found'));\n\t\t}\n\t\tconst name = await FolderWorker.validateFolderName(newName);\n\t\tconst p = path.dirname(folder.path);\n\t\tconst newPath = path.join(p, name);\n\t\tawait FolderWorker.validateFolderTask(folder.path, p, name);\n\t\ttry {\n\t\t\tawait fse.rename(folder.path, newPath);\n\t\t} catch (e) {\n\t\t\treturn Promise.reject(Error('Folder renaming failed'));\n\t\t}\n\t\tawait this.updatePaths(folder.path, newPath, folder.rootID);\n\t\tfolder.path = ensureTrailingPathSeparator(newPath);\n\t\treturn {changedFolderIDs: [], changedTrackIDs: []};\n\t}\n\n\tpublic async create(parentID: string, name: string): Promise<{ folder: Folder; parent: Folder }> {\n\t\tconst parent = await this.store.folderStore.byId(parentID);\n\t\tif (!parent) {\n\t\t\treturn Promise.reject(Error('Destination Folder not found'));\n\t\t}\n\t\tname = await FolderWorker.validateFolderName(name);\n\t\tconst destination = path.join(parent.path, name);\n\t\tawait FolderWorker.validateFolderTask(parent.path, parent.path, name);\n\t\tawait fse.mkdir(destination);\n\t\tconst folder = await FolderWorker.buildNewFolder(destination, parent);\n\t\tparent.tag.folderCount += 1;\n\t\treturn {folder, parent};\n\t}\n\n\tpublic async delete(root: Root, folderIDs: Array<string>): Promise<{ removedFolders: Array<Folder>; removedTracks: Array<Track>; changedFolderIDs: Array<string>; changedTrackIDs: Array<string> }> {\n\t\tconst folders = await this.store.folderStore.byIds(folderIDs);\n\t\tfor (const folder of folders) {\n\t\t\tif (folder.tag.level === 0) {\n\t\t\t\treturn Promise.reject(Error('Root folder can not be deleted'));\n\t\t\t}\n\t\t}\n\t\tconst inPaths = folders.map(f => f.path);\n\t\tconst removedFolders = (await this.store.folderStore.search({inPaths})).items;\n\t\tconst trashPath = path.join(root.path, '.trash');\n\t\tfor (const folder of folders) {\n\t\t\tawait fse.move(folder.path, path.join(trashPath, `${Date.now()}_${path.basename(folder.path)}`));\n\t\t}\n\t\tconst removedTracks = (await this.store.trackStore.search({inPaths})).items;\n\t\tconst changedFolderIDs = new Set<string>();\n\t\tfor (const folder of folders) {\n\t\t\tif (folder.parentID) {\n\t\t\t\tchangedFolderIDs.add(folder.parentID);\n\t\t\t}\n\t\t}\n\t\treturn {removedFolders, removedTracks, changedFolderIDs: [...changedFolderIDs], changedTrackIDs: []};\n\t}\n}\n","import {DBObjectType} from '../../../db/db.types';\nimport {RootScanStrategy} from '../../../model/jam-types';\nimport {Folder} from '../../folder/folder.model';\nimport {Root} from '../../root/root.model';\nimport {Store} from '../../store/store';\nimport {Track} from '../../track/track.model';\nimport {MatchDirBuilderScan} from '../match-dir/match-dir.builder.scan';\nimport {MatchDir} from '../match-dir/match-dir.types';\nimport {DirScanner} from '../scan-dir/scan-dir';\n\nexport class RootWorker {\n\n\tconstructor(private store: Store) {\n\n\t}\n\n\tprivate async checkUsedPath(dir: string): Promise<void> {\n\t\tconst roots = await this.store.rootStore.all();\n\t\tfor (const r of roots) {\n\t\t\tif (dir.startsWith(r.path) || r.path.startsWith(dir)) {\n\t\t\t\treturn Promise.reject(Error('Root path already used'));\n\t\t\t}\n\t\t}\n\t}\n\n\tasync remove(root: Root): Promise<{ removedFolders: Array<Folder>; removedTracks: Array<Track> }> {\n\t\tconst removedTracks = (await this.store.trackStore.search({rootID: root.id})).items;\n\t\tconst removedFolders = (await this.store.folderStore.search({rootID: root.id})).items;\n\t\tawait this.store.rootStore.remove(root.id);\n\t\treturn {removedTracks, removedFolders};\n\t}\n\n\tasync scan(root: Root): Promise<{ rootMatch: MatchDir; removedFolders: Array<Folder>; removedTracks: Array<Track> }> {\n\t\tconst dirScanner = new DirScanner();\n\t\tconst scanDir = await dirScanner.scan(root.path, root.id);\n\t\tconst scanMatcher = new MatchDirBuilderScan(this.store);\n\t\treturn scanMatcher.match(scanDir);\n\t}\n\n\tasync create(name: string, path: string, strategy: RootScanStrategy): Promise<Root> {\n\t\tconst root: Root = {id: '', created: Date.now(), type: DBObjectType.root, name, path, strategy};\n\t\tawait this.addRoot(root);\n\t\treturn root;\n\t}\n\n\tasync addRoot(root: Root): Promise<string> {\n\t\tawait this.checkUsedPath(root.path);\n\t\troot.id = await this.store.rootStore.add(root);\n\t\treturn root.id;\n\t}\n\n\tasync update(root: Root, name: string, path: string, strategy: RootScanStrategy): Promise<void> {\n\t\troot.name = name;\n\t\tif (root.path !== path) {\n\t\t\tawait this.checkUsedPath(path);\n\t\t\troot.path = path;\n\t\t}\n\t\troot.strategy = strategy;\n\t\tawait this.store.rootStore.replace(root);\n\t}\n}\n","import path from 'path';\nimport {logger} from '../../../utils/logger';\nimport {Folder} from '../../folder/folder.model';\nimport {Store} from '../../store/store';\nimport {Track} from '../../track/track.model';\nimport {ScanDir} from '../scan-dir/scan-dir';\nimport {MatchDir} from './match-dir.types';\n\nconst log = logger('IO.MatchDirBuilderScan');\n\nexport class MatchDirBuilderScan {\n\n\tconstructor(public store: Store) {\n\t}\n\n\tprivate cloneScanDir(dir: ScanDir, parent: MatchDir | undefined, level: number): MatchDir {\n\t\tconst result: MatchDir = {\n\t\t\trootID: dir.rootID,\n\t\t\tparent,\n\t\t\tlevel,\n\t\t\tname: dir.name,\n\t\t\tstat: dir.stat,\n\t\t\tfolder: undefined,\n\t\t\tfiles: dir.files.map(file => {\n\t\t\t\treturn {name: file.name, type: file.type, stat: file.stat, rootID: dir.rootID};\n\t\t\t}),\n\t\t\tdirectories: []\n\t\t};\n\t\tresult.directories = dir.directories.map(sub => this.cloneScanDir(sub, result, level + 1));\n\t\treturn result;\n\t}\n\n\tprivate async matchDirR(dir: MatchDir, searchTracks: Array<Track>, searchFolders: Array<Folder>, removedFolders: Array<Folder>, removedTracks: Array<Track>): Promise<void> {\n\t\tlog.debug('Matching:', dir.name);\n\t\tconst tracks = searchTracks.filter(t => t.path === dir.name); // await this.store.trackStore.search({path: dir.name});\n\t\ttracks.forEach(track => {\n\t\t\tconst filename = path.join(track.path, track.name);\n\t\t\tconst file = dir.files.find(f => f.name === filename);\n\t\t\tif (file) {\n\t\t\t\tfile.track = track;\n\t\t\t} else {\n\t\t\t\tremovedTracks.push(track);\n\t\t\t}\n\t\t});\n\t\tif (dir.folder) {\n\t\t\tconst folderId = dir.folder.id;\n\t\t\tconst folders = searchFolders.filter(f => f.parentID === folderId) // await this.store.folderStore.search({parentID: dir.folder.id});\n\t\t\t\t.sort((a, b) => a.path.localeCompare(b.path));\n\t\t\tfor (const subFolder of folders) {\n\t\t\t\tconst subDir = dir.directories.find(sd => sd.name === subFolder.path);\n\t\t\t\tif (!subDir) {\n\t\t\t\t\tremovedFolders.push(subFolder);\n\t\t\t\t} else {\n\t\t\t\t\tsubDir.folder = subFolder;\n\t\t\t\t\tawait this.matchDirR(subDir, searchTracks, searchFolders, removedFolders, removedTracks);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tasync match(dir: ScanDir): Promise<{ rootMatch: MatchDir; removedFolders: Array<Folder>; removedTracks: Array<Track> }> {\n\t\tconst tracks = await this.store.trackStore.search({inPath: dir.name});\n\t\tconst folders = await this.store.folderStore.search({inPath: dir.name});\n\t\tconst rootMatch: MatchDir = this.cloneScanDir(dir, undefined, 0);\n\t\trootMatch.folder = await this.store.folderStore.searchOne({path: dir.name});\n\t\tconst removedFolders: Array<Folder> = [];\n\t\tconst removedTracks: Array<Track> = [];\n\t\tawait this.matchDirR(rootMatch, tracks.items, folders.items, removedFolders, removedTracks);\n\t\tfor (const sub of removedFolders) {\n\t\t\tconst folderList = await this.store.folderStore.search({inPath: sub.path});\n\t\t\tfor (const folder of folderList.items) {\n\t\t\t\tif (!removedFolders.find(f => f.id === folder.id)) {\n\t\t\t\t\tremovedFolders.push(folder);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst trackList = await this.store.trackStore.search({inPath: sub.path});\n\t\t\tfor (const track of trackList.items) {\n\t\t\t\tif (!removedTracks.find(t => t.id === track.id)) {\n\t\t\t\t\tremovedTracks.push(track);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn {rootMatch, removedTracks, removedFolders};\n\t}\n\n}\n","import fse from 'fs-extra';\nimport path from 'path';\nimport {FileTyp} from '../../../model/jam-types';\nimport {getFileType} from '../../../utils/filetype';\nimport {ensureTrailingPathSeparator} from '../../../utils/fs-utils';\nimport {logger} from '../../../utils/logger';\nimport {processQueue} from '../../../utils/queue';\n\nconst log = logger('IO.DirScanner');\n\nexport interface ScanDir {\n\tname: string;\n\trootID: string;\n\tstat: {\n\t\tctime: number;\n\t\tmtime: number;\n\t};\n\tdirectories: Array<ScanDir>;\n\tfiles: Array<ScanFile>;\n}\n\nexport interface ScanFile {\n\tname: string;\n\ttype: FileTyp;\n\tstat: {\n\t\tctime: number;\n\t\tmtime: number;\n\t\tsize: number;\n\t};\n}\n\nexport class DirScanner {\n\n\tprivate async scanDirR(dir: string, stat: fse.Stats, rootID: string): Promise<ScanDir> {\n\t\tlog.debug('Scanning:', dir);\n\t\tconst result: ScanDir = {\n\t\t\tname: ensureTrailingPathSeparator(dir),\n\t\t\tstat: {\n\t\t\t\tctime: stat.ctime.valueOf(),\n\t\t\t\tmtime: stat.mtime.valueOf()\n\t\t\t},\n\t\t\trootID,\n\t\t\tdirectories: [],\n\t\t\tfiles: []\n\t\t};\n\t\tconst folders: Array<{ dir: string; stat: fse.Stats }> = [];\n\t\tconst list = await fse.readdir(dir);\n\t\tfor (const filename of list) {\n\t\t\tif (filename[0] !== '.') {\n\t\t\t\tconst sub = path.join(dir, filename);\n\t\t\t\tconst subStat = await fse.stat(sub);\n\t\t\t\tif (subStat.isDirectory()) {\n\t\t\t\t\tfolders.push({dir: sub, stat: subStat});\n\t\t\t\t} else {\n\t\t\t\t\tconst file: ScanFile = {\n\t\t\t\t\t\tname: sub,\n\t\t\t\t\t\ttype: getFileType(sub),\n\t\t\t\t\t\tstat: {\n\t\t\t\t\t\t\tctime: subStat.ctime.valueOf(),\n\t\t\t\t\t\t\tmtime: subStat.mtime.valueOf(),\n\t\t\t\t\t\t\tsize: subStat.size\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tresult.files.push(file);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (folders.length > 0) {\n\t\t\tawait processQueue<{ dir: string; stat: fse.Stats }>(3, folders, async folder => {\n\t\t\t\tconst sub = await this.scanDirR(folder.dir, folder.stat, rootID);\n\t\t\t\tresult.directories.push(sub);\n\t\t\t});\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic async scan(dir: string, rootID: string): Promise<ScanDir> {\n\t\tlog.info('Scanning Root', dir);\n\t\tconst stat = await fse.stat(dir);\n\t\treturn this.scanDirR(dir, stat, rootID);\n\t}\n\n}\n","import fse from 'fs-extra';\nimport path from 'path';\nimport {Jam} from '../../../model/jam-rest-data';\nimport {TrackHealthID} from '../../../model/jam-types';\nimport {AudioModule} from '../../../modules/audio/audio.module';\nimport {ImageModule} from '../../../modules/image/image.module';\nimport {ensureTrailingPathSeparator, fileExt, replaceFileSystemChars} from '../../../utils/fs-utils';\nimport {Root} from '../../root/root.model';\nimport {Store} from '../../store/store';\nimport {Track} from '../../track/track.model';\nimport {processQueue} from '../../../utils/queue';\n\nexport class TrackWorker {\n\n\tconstructor(private store: Store, private imageModule: ImageModule, private audioModule: AudioModule) {\n\n\t}\n\n\tpublic async writeTags(tags: Array<{ trackID: string; tag: Jam.RawTag }>): Promise<{ changedFolderIDs: Array<string>; changedTrackIDs: Array<string> }> {\n\t\tconst changedTrackIDs = [];\n\t\tconst tracks = await this.store.trackStore.byIds(tags.map(t => t.trackID));\n\t\tconst changedFolderIDs: Array<string> = [];\n\t\tfor (const track of tracks) {\n\t\t\tconst tag = tags.find(t => t.trackID === track.id);\n\t\t\tif (tag) {\n\t\t\t\tchangedTrackIDs.push(track.id);\n\t\t\t\tconst filename = path.join(track.path, track.name);\n\t\t\t\tawait this.audioModule.writeRawTag(filename, tag.tag);\n\t\t\t\tif (!changedFolderIDs.includes(track.parentID)) {\n\t\t\t\t\tchangedFolderIDs.push(track.parentID);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn {changedTrackIDs, changedFolderIDs};\n\t}\n\n\tpublic async fix(fixes: Array<{ trackID: string; fixID: TrackHealthID }>): Promise<{ changedFolderIDs: Array<string>; changedTrackIDs: Array<string> }> {\n\t\tconst changedFolderIDs = new Set<string>();\n\t\tconst changedTrackIDs = new Set<string>();\n\t\tconst tracks = await this.store.trackStore.byIds(fixes.map(t => t.trackID));\n\t\tconst fixTasks: Array<{ filename: string; fixIDs: Array<TrackHealthID> }> = [];\n\t\tfor (const track of tracks) {\n\t\t\tchangedTrackIDs.add(track.id);\n\t\t\tchangedFolderIDs.add(track.parentID);\n\t\t\tfixTasks.push({filename: path.join(track.path, track.name), fixIDs: fixes.filter(f => f.trackID === track.id).map(f => f.fixID)});\n\t\t}\n\t\tawait processQueue<{ filename: string; fixIDs: Array<TrackHealthID> }>(3, fixTasks, async item => {\n\t\t\tfor (const fixID of item.fixIDs) {\n\t\t\t\tif ([TrackHealthID.mp3HeaderExists, TrackHealthID.mp3HeaderValid].includes(fixID)) {\n\t\t\t\t\tawait this.audioModule.mp3.rewrite(item.filename);\n\t\t\t\t} else if ([TrackHealthID.mp3Garbage, TrackHealthID.mp3MediaValid].includes(fixID)) {\n\t\t\t\t\tawait this.audioModule.mp3.fixAudio(item.filename);\n\t\t\t\t} else if ([TrackHealthID.id3v2NoId3v1].includes(fixID)) {\n\t\t\t\t\tawait this.audioModule.mp3.removeID3v1(item.filename);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn {changedFolderIDs: [...changedFolderIDs], changedTrackIDs: [...changedTrackIDs]};\n\t}\n\n\tpublic async rename(trackID: string, newName: string): Promise<void> {\n\t\tconst name = replaceFileSystemChars(newName, '').trim();\n\t\tif (name.length === 0) {\n\t\t\treturn Promise.reject(Error('Invalid Name'));\n\t\t}\n\t\tconst track = await this.store.trackStore.byId(trackID);\n\t\tif (!track) {\n\t\t\treturn Promise.reject(Error('Track not found'));\n\t\t}\n\t\tconst ext = fileExt(name);\n\t\tconst ext2 = fileExt(track.name);\n\t\tif (ext !== ext2) {\n\t\t\treturn Promise.reject(Error(`Changing File extension not supported ${ext}=>${ext2}`));\n\t\t}\n\t\tconst newPath = path.join(track.path, name);\n\t\tconst exists = await fse.pathExists(newPath);\n\t\tif (exists) {\n\t\t\treturn Promise.reject(Error('File already exists'));\n\t\t}\n\t\tawait fse.rename(path.join(track.path, track.name), path.join(track.path, name));\n\t\ttrack.name = name;\n\t\tawait this.store.trackStore.replace(track);\n\t}\n\n\tpublic async delete(root: Root, trackIDs: Array<string>): Promise<{ changedFolderIDs: Array<string>; changedTrackIDs: Array<string>; removedTracks: Array<Track> }> {\n\t\tconst removedTracks = await this.store.trackStore.byIds(trackIDs);\n\t\tconst trashPath = path.join(root.path, '.trash');\n\t\tfor (const track of removedTracks) {\n\t\t\tawait fse.move(path.join(track.path, track.name), path.join(trashPath, `${Date.now()}_${track.name}`));\n\t\t}\n\t\tconst changedFolderIDs: Array<string> = [];\n\t\tfor (const track of removedTracks) {\n\t\t\tif (!changedFolderIDs.includes(track.parentID)) {\n\t\t\t\tchangedFolderIDs.push(track.parentID);\n\t\t\t}\n\t\t}\n\t\treturn {changedFolderIDs, changedTrackIDs: [], removedTracks};\n\t}\n\n\tpublic async move(trackIDs: Array<string>, newParentID: string): Promise<{ changedFolderIDs: Array<string>; changedTrackIDs: Array<string> }> {\n\t\tconst tracks = await this.store.trackStore.byIds(trackIDs);\n\t\tconst newParent = await this.store.folderStore.byId(newParentID);\n\t\tif (!newParent) {\n\t\t\treturn Promise.reject(Error('Destination Folder not found'));\n\t\t}\n\t\tfor (const track of tracks) {\n\t\t\tif (track.parentID === newParentID) {\n\t\t\t\treturn Promise.reject(Error('File is already in folder'));\n\t\t\t}\n\t\t\tif (await fse.pathExists(path.join(newParent.path, track.name))) {\n\t\t\t\treturn Promise.reject(Error('File name is already used in folder'));\n\t\t\t}\n\t\t}\n\t\tconst changedFolderIDs: Array<string> = [newParent.id];\n\t\tconst changedTrackIDs: Array<string> = [];\n\t\tfor (const track of tracks) {\n\t\t\tchangedTrackIDs.push(track.id);\n\t\t\tif (!changedFolderIDs.includes(track.parentID)) {\n\t\t\t\tchangedFolderIDs.push(track.parentID);\n\t\t\t}\n\t\t\tawait fse.move(path.join(track.path, track.name), path.join(newParent.path, track.name));\n\t\t\ttrack.path = ensureTrailingPathSeparator(newParent.path);\n\t\t\ttrack.rootID = newParent.rootID;\n\t\t\ttrack.parentID = newParent.id;\n\t\t}\n\t\tawait this.store.trackStore.replaceMany(tracks);\n\t\treturn {changedTrackIDs, changedFolderIDs};\n\t}\n\n\tpublic async refresh(trackIDs: Array<string>): Promise<{ changedFolderIDs: Array<string>; changedTrackIDs: Array<string> }> {\n\t\tconst tracks = await this.store.trackStore.byIds(trackIDs);\n\t\tconst changedFolderIDs: Array<string> = [];\n\t\tconst changedTrackIDs: Array<string> = [];\n\t\tfor (const track of tracks) {\n\t\t\tif (!changedTrackIDs.includes(track.id)) {\n\t\t\t\tchangedTrackIDs.push(track.id);\n\t\t\t}\n\t\t\tif (!changedFolderIDs.includes(track.parentID)) {\n\t\t\t\tchangedFolderIDs.push(track.parentID);\n\t\t\t}\n\t\t}\n\t\treturn {changedFolderIDs, changedTrackIDs};\n\t}\n}\n","import {Database} from '../../db/db.model';\nimport {AlbumStore} from '../album/album.store';\nimport {ArtistStore} from '../artist/artist.store';\nimport {DBObject} from '../base/base.model';\nimport {BaseStore, SearchQuery} from '../base/base.store';\nimport {BookmarkStore} from '../bookmark/bookmark.store';\nimport {EpisodeStore} from '../episode/episode.store';\nimport {FolderStore} from '../folder/folder.store';\nimport {MetaDataStore} from '../metadata/metadata.store';\nimport {PlaylistStore} from '../playlist/playlist.store';\nimport {PlayQueueStore} from '../playqueue/playqueue.store';\nimport {PodcastStore} from '../podcast/podcast.store';\nimport {RadioStore} from '../radio/radio.store';\nimport {RootStore} from '../root/root.store';\nimport {SeriesStore} from '../series/series.store';\nimport {SessionStore} from '../session/session.store';\nimport {SettingsStore} from '../settings/settings.store';\nimport {StateStore} from '../state/state.store';\nimport {TrackStore} from '../track/track.store';\nimport {UserStore} from '../user/user.store';\n\nexport class Store {\n\tpublic settingsStore: SettingsStore;\n\tpublic trackStore: TrackStore;\n\tpublic folderStore: FolderStore;\n\tpublic userStore: UserStore;\n\tpublic stateStore: StateStore;\n\tpublic playlistStore: PlaylistStore;\n\tpublic podcastStore: PodcastStore;\n\tpublic episodeStore: EpisodeStore;\n\tpublic bookmarkStore: BookmarkStore;\n\tpublic rootStore: RootStore;\n\tpublic artistStore: ArtistStore;\n\tpublic albumStore: AlbumStore;\n\tpublic playQueueStore: PlayQueueStore;\n\tpublic radioStore: RadioStore;\n\tpublic metaStore: MetaDataStore;\n\tpublic sessionStore: SessionStore;\n\tpublic seriesStore: SeriesStore;\n\n\tconstructor(public db: Database) {\n\t\tthis.settingsStore = new SettingsStore(this.db);\n\t\tthis.trackStore = new TrackStore(this.db);\n\t\tthis.folderStore = new FolderStore(this.db);\n\t\tthis.userStore = new UserStore(this.db);\n\t\tthis.stateStore = new StateStore(this.db);\n\t\tthis.playlistStore = new PlaylistStore(this.db);\n\t\tthis.podcastStore = new PodcastStore(this.db);\n\t\tthis.episodeStore = new EpisodeStore(this.db);\n\t\tthis.bookmarkStore = new BookmarkStore(this.db);\n\t\tthis.artistStore = new ArtistStore(this.db);\n\t\tthis.albumStore = new AlbumStore(this.db);\n\t\tthis.playQueueStore = new PlayQueueStore(this.db);\n\t\tthis.radioStore = new RadioStore(this.db);\n\t\tthis.rootStore = new RootStore(this.db);\n\t\tthis.metaStore = new MetaDataStore(this.db);\n\t\tthis.sessionStore = new SessionStore(this.db);\n\t\tthis.seriesStore = new SeriesStore(this.db);\n\t}\n\n\tasync reset(): Promise<void> {\n\t\tawait this.db.reset();\n\t}\n\n\tasync check(): Promise<void> {\n\t\tawait this.db.check();\n\t}\n\n\tasync open(): Promise<void> {\n\t\tawait this.db.open();\n\t}\n\n\tasync close(): Promise<void> {\n\t\tawait this.db.close();\n\t}\n\n\tallStores(): Array<BaseStore<DBObject, SearchQuery>> {\n\t\treturn [\n\t\t\tthis.folderStore, this.trackStore, this.albumStore, this.artistStore,\n\t\t\tthis.podcastStore, this.episodeStore, this.seriesStore, this.playlistStore,\n\t\t\tthis.radioStore, this.userStore, this.rootStore\n\t\t];\n\t}\n\n\tstreamStores(): Array<BaseStore<DBObject, SearchQuery>> {\n\t\treturn [this.trackStore, this.episodeStore];\n\t}\n\n\tdownloadStores(): Array<BaseStore<DBObject, SearchQuery>> {\n\t\treturn [\n\t\t\tthis.folderStore, this.trackStore, this.albumStore, this.artistStore,\n\t\t\tthis.podcastStore, this.episodeStore, this.seriesStore, this.playlistStore\n\t\t];\n\t}\n\n\tasync findInStores(id: string, stores: Array<BaseStore<DBObject, SearchQuery>>): Promise<DBObject | undefined> {\n\t\tfor (const store of stores) {\n\t\t\tconst obj = await store.byId(id);\n\t\t\tif (obj) {\n\t\t\t\treturn obj;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync findInAll(id: string): Promise<DBObject | undefined> {\n\t\tfor (const store of this.allStores()) {\n\t\t\tconst obj = await store.byId(id);\n\t\t\tif (obj) {\n\t\t\t\treturn obj;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync findMultiInAll(ids: Array<string>): Promise<Array<DBObject>> {\n\t\tlet result: Array<DBObject> = [];\n\t\tfor (const store of this.allStores()) {\n\t\t\tconst objs = await store.byIds(ids);\n\t\t\tresult = result.concat(objs);\n\t\t}\n\t\treturn result;\n\t}\n\n}\n","import {Database, DatabaseQuery} from '../../db/db.model';\nimport {DBObjectType} from '../../db/db.types';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {QueryHelper} from '../base/base.query.helper';\nimport {BaseStore, SearchQuery, SearchQuerySort} from '../base/base.store';\nimport {Album} from './album.model';\n\nexport interface SearchQueryAlbum extends SearchQuery {\n\tname?: string;\n\tslug?: string;\n\trootID?: string;\n\trootIDs?: Array<string>;\n\tartist?: string;\n\tartistID?: string;\n\ttrackID?: string;\n\ttrackIDs?: Array<string>;\n\tseriesID?: string;\n\tseriesIDs?: Array<string>;\n\talbumType?: string;\n\talbumTypes?: Array<string>;\n\tmbReleaseID?: string;\n\tmbArtistID?: string;\n\tgenre?: string;\n\tnewerThan?: number;\n\tfromYear?: number;\n\ttoYear?: number;\n\tsorts?: Array<SearchQuerySort<JamParameters.AlbumSortField>>;\n}\n\nconst fieldMap: { [name in JamParameters.AlbumSortField]: string } = {\n\tname: 'name',\n\tartist: 'artist',\n\tgenre: 'genres',\n\tyear: 'year',\n\tcreated: 'created'\n};\n\nexport class AlbumStore extends BaseStore<Album, SearchQueryAlbum> {\n\n\tconstructor(db: Database) {\n\t\tsuper(DBObjectType.album, db);\n\t}\n\n\tprotected transformQuery(query: SearchQueryAlbum): DatabaseQuery {\n\t\tconst q = new QueryHelper();\n\t\tq.term('rootIDs', query.rootID);\n\t\tq.terms('rootIDs', query.rootIDs);\n\t\tq.term('trackIDs', query.trackID);\n\t\tq.terms('trackIDs', query.trackIDs);\n\t\tq.term('seriesID', query.seriesID);\n\t\tq.terms('seriesID', query.seriesIDs);\n\t\tq.term('albumType', query.albumType);\n\t\tq.terms('albumType', query.albumTypes);\n\t\tq.term('artistID', query.artistID);\n\t\tq.term('genres', query.genre);\n\t\tq.term('mbReleaseID', query.mbReleaseID);\n\t\tq.term('mbArtistID', query.mbArtistID);\n\t\tq.term('artist', query.artist);\n\t\tq.term('name', query.name);\n\t\tq.term('slug', query.slug);\n\t\tq.range('year', query.toYear, query.fromYear);\n\t\tq.range('created', undefined, query.newerThan);\n\t\tq.match('name', query.query);\n\t\treturn q.get(query, fieldMap);\n\t}\n\n}\n","import {Database, DatabaseQuery} from '../../db/db.model';\nimport {DBObjectType} from '../../db/db.types';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {QueryHelper} from '../base/base.query.helper';\nimport {BaseStore, SearchQuery, SearchQuerySort} from '../base/base.store';\nimport {Artist} from './artist.model';\n\nexport interface SearchQueryArtist extends SearchQuery {\n\tname?: string;\n\tslug?: string;\n\tnames?: Array<string>;\n\tid?: string;\n\tids?: Array<string>;\n\ttrackID?: string;\n\ttrackIDs?: Array<string>;\n\trootID?: string;\n\trootIDs?: Array<string>;\n\tseriesID?: string;\n\tseriesIDs?: Array<string>;\n\tmbArtistID?: string;\n\tgenre?: string;\n\talbumID?: string;\n\talbumType?: string;\n\talbumTypes?: Array<string>;\n\tnewerThan?: number;\n\tsorts?: Array<SearchQuerySort<JamParameters.ArtistSortField>>;\n}\n\nconst fieldMap: { [name in JamParameters.ArtistSortField]: string } = {\n\tname: 'name',\n\tcreated: 'created'\n};\n\nexport class ArtistStore extends BaseStore<Artist, SearchQueryArtist> {\n\n\tconstructor(db: Database) {\n\t\tsuper(DBObjectType.artist, db);\n\t}\n\n\tprotected transformQuery(query: SearchQueryArtist): DatabaseQuery {\n\t\tconst q = new QueryHelper();\n\t\tq.term('name', query.name);\n\t\tq.terms('name', query.names);\n\t\tq.term('trackIDs', query.trackID);\n\t\tq.terms('trackIDs', query.trackIDs);\n\t\tq.term('seriesIDs', query.seriesID);\n\t\tq.terms('seriesIDs', query.seriesIDs);\n\t\tq.term('genres', query.genre);\n\t\tq.term('rootIDs', query.rootID);\n\t\tq.terms('rootIDs', query.rootIDs);\n\t\tq.term('albumTypes', query.albumType);\n\t\tq.terms('albumTypes', query.albumTypes);\n\t\tq.term('slug', query.slug);\n\t\tq.term('albumIDs', query.albumID);\n\t\tq.term('mbArtistID', query.mbArtistID);\n\t\tq.range('created', undefined, query.newerThan);\n\t\tq.match('name', query.query);\n\t\treturn q.get(query, fieldMap);\n\t}\n\n}\n","import {Database, DatabaseQuery} from '../../db/db.model';\nimport {DBObjectType} from '../../db/db.types';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {QueryHelper} from '../base/base.query.helper';\nimport {BaseStore, SearchQuery, SearchQuerySort} from '../base/base.store';\nimport {Bookmark} from './bookmark.model';\n\nexport interface SearchQueryBookmark extends SearchQuery {\n\tposition?: number;\n\tuserID?: string;\n\tdestID?: string;\n\tdestIDs?: Array<string>;\n\tsorts?: Array<SearchQuerySort<JamParameters.BookmarkSortField>>;\n}\n\nconst fieldMap: { [name in JamParameters.BookmarkSortField]: string } = {\n\tcreated: 'created',\n\tposition: 'position'\n};\n\nexport class BookmarkStore extends BaseStore<Bookmark, SearchQueryBookmark> {\n\n\tconstructor(db: Database) {\n\t\tsuper(DBObjectType.bookmark, db);\n\t}\n\n\tprotected transformQuery(query: SearchQueryBookmark): DatabaseQuery {\n\t\tconst q = new QueryHelper();\n\t\tq.term('position', query.position);\n\t\tq.term('userID', query.userID);\n\t\tq.term('destID', query.destID);\n\t\tq.terms('destID', query.destIDs);\n\t\treturn q.get(query, fieldMap);\n\t}\n\n}\n","import {Database, DatabaseQuery} from '../../db/db.model';\nimport {DBObjectType} from '../../db/db.types';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {QueryHelper} from '../base/base.query.helper';\nimport {BaseStore, SearchQuery, SearchQuerySort} from '../base/base.store';\nimport {Episode} from './episode.model';\n\nexport interface SearchQueryEpisode extends SearchQuery {\n\tpodcastID?: string;\n\tpodcastIDs?: Array<string>;\n\tname?: string;\n\tstatus?: string;\n\tnewerThan?: number;\n\tsorts?: Array<SearchQuerySort<JamParameters.EpisodeSortField>>;\n}\n\nconst fieldMap: { [name in JamParameters.EpisodeSortField]: string } = {\n\tpodcast: 'podcastID',\n\tdate: 'date',\n\tname: 'name',\n\tcreated: 'created'\n};\n\nexport class EpisodeStore extends BaseStore<Episode, SearchQueryEpisode> {\n\n\tconstructor(db: Database) {\n\t\tsuper(DBObjectType.episode, db);\n\t}\n\n\tprotected transformQuery(query: SearchQueryEpisode): DatabaseQuery {\n\t\tconst q = new QueryHelper();\n\t\tq.terms('podcastID', query.podcastIDs);\n\t\tq.term('podcastID', query.podcastID);\n\t\tq.term('status', query.status);\n\t\tq.term('name', query.name);\n\t\tq.range('date', undefined, query.newerThan);\n\t\tq.match('name', query.query);\n\t\treturn q.get(query, fieldMap);\n\t}\n\n}\n","import {Database, DatabaseQuery} from '../../db/db.model';\nimport {DBObjectType} from '../../db/db.types';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {FolderType} from '../../model/jam-types';\nimport {ensureTrailingPathSeparator} from '../../utils/fs-utils';\nimport {QueryHelper} from '../base/base.query.helper';\nimport {BaseStore, SearchQuery, SearchQuerySort} from '../base/base.store';\nimport {Folder} from './folder.model';\n\nexport interface SearchQueryFolder extends SearchQuery {\n\trootID?: string;\n\trootIDs?: Array<string>;\n\tparentID?: string;\n\tparentIDs?: Array<string>;\n\tpath?: string;\n\tinPath?: string;\n\tinPaths?: Array<string>;\n\tartist?: string;\n\tartists?: Array<string>;\n\ttitle?: string;\n\talbum?: string;\n\tgenre?: string;\n\tlevel?: number;\n\tnewerThan?: number;\n\tfromYear?: number;\n\ttoYear?: number;\n\tmbReleaseID?: string;\n\tmbArtistID?: string;\n\ttype?: FolderType;\n\ttypes?: Array<FolderType>;\n\tsorts?: Array<SearchQuerySort<JamParameters.FolderSortField>>;\n}\n\nconst sortFieldMap: { [name in JamParameters.FolderSortField]: string } = {\n\tartist: 'tag.artist',\n\talbum: 'tag.album',\n\tgenre: 'tag.genres',\n\tcreated: 'stat.created',\n\tparent: 'parentID',\n\ttitle: 'tag.title',\n\tyear: 'tag.year'\n};\n\nexport class FolderStore extends BaseStore<Folder, SearchQueryFolder> {\n\n\tconstructor(db: Database) {\n\t\tsuper(DBObjectType.folder, db);\n\t}\n\n\tprotected transformQuery(query: SearchQueryFolder): DatabaseQuery {\n\t\tconst q = new QueryHelper();\n\t\tq.term('path', query.path);\n\t\tq.startsWiths('path', query.inPaths ? query.inPaths.map(ensureTrailingPathSeparator) : undefined);\n\t\tq.startsWith('path', query.inPath ? ensureTrailingPathSeparator(query.inPath) : undefined);\n\t\tq.term('tag.mbReleaseID', query.mbReleaseID);\n\t\tq.term('tag.mbArtistID', query.mbArtistID);\n\t\tq.term('tag.genres', query.genre);\n\t\tq.term('tag.title', query.title);\n\t\tq.term('tag.album', query.album);\n\t\tq.term('rootID', query.rootID);\n\t\tq.terms('rootID', query.rootIDs);\n\t\tq.term('parentID', query.parentID);\n\t\tq.terms('parentID', query.parentIDs);\n\t\tq.term('tag.level', query.level);\n\t\tq.term('tag.artist', query.artist);\n\t\tq.terms('tag.artist', query.artists);\n\t\tq.term('tag.type', query.type);\n\t\tq.terms('tag.type', query.types);\n\t\tq.range('tag.year', query.toYear, query.fromYear);\n\t\tq.range('stat.created', undefined, query.newerThan);\n\t\tq.match('tag.title', query.query);\n\t\treturn q.get(query, sortFieldMap);\n\t}\n\n}\n","import {Database, DatabaseQuery} from '../../db/db.model';\nimport {DBObjectType} from '../../db/db.types';\nimport {QueryHelper} from '../base/base.query.helper';\nimport {BaseStore, SearchQuery} from '../base/base.store';\nimport {MetaData} from './metadata.model';\nimport {MetaDataType} from './metadata.types';\n\nexport interface SearchQueryMetaData extends SearchQuery {\n\tname?: string;\n\tdataType?: MetaDataType;\n\tolderThan?: number;\n}\n\nexport class MetaDataStore extends BaseStore<MetaData, SearchQueryMetaData> {\n\n\tconstructor(db: Database) {\n\t\tsuper(DBObjectType.metadata, db);\n\t}\n\n\tprotected transformQuery(query: SearchQueryMetaData): DatabaseQuery {\n\t\tconst q = new QueryHelper();\n\t\tq.term('name', query.name);\n\t\tq.term('dataType', query.dataType);\n\t\tq.range('date', query.olderThan, undefined);\n\t\treturn q.get(query);\n\t}\n\n}\n","import {Database, DatabaseQuery} from '../../db/db.model';\nimport {DBObjectType} from '../../db/db.types';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {QueryHelper} from '../base/base.query.helper';\nimport {BaseStore, SearchQuery, SearchQuerySort} from '../base/base.store';\nimport {Playlist} from './playlist.model';\n\nexport interface SearchQueryPlaylist extends SearchQuery {\n\tname?: string;\n\tuserID?: string;\n\tisPublic?: boolean;\n\ttrackID?: string;\n\ttrackIDs?: Array<string>;\n\tnewerThan?: number;\n\tsorts?: Array<SearchQuerySort<JamParameters.PlaylistSortField>>;\n}\n\nconst fieldMap: { [name in JamParameters.PlaylistSortField]: string } = {\n\tname: 'name',\n\tcreated: 'created'\n};\n\nexport class PlaylistStore extends BaseStore<Playlist, SearchQueryPlaylist> {\n\n\tconstructor(db: Database) {\n\t\tsuper(DBObjectType.playlist, db);\n\t}\n\n\tprotected transformQuery(query: SearchQueryPlaylist): DatabaseQuery {\n\t\tconst q = new QueryHelper();\n\t\tq.term('trackIDs', query.trackID);\n\t\tq.terms('trackIDs', query.trackIDs);\n\t\tq.term('userID', query.userID);\n\t\tq.term('name', query.name);\n\t\tq.bool('isPublic', query.isPublic);\n\t\tq.match('name', query.query);\n\t\tq.range('created', undefined, query.newerThan);\n\t\treturn q.get(query, fieldMap);\n\t}\n\n}\n","import {Database, DatabaseQuery} from '../../db/db.model';\nimport {DBObjectType} from '../../db/db.types';\nimport {QueryHelper} from '../base/base.query.helper';\nimport {BaseStore, SearchQuery} from '../base/base.store';\nimport {PlayQueue} from './playqueue.model';\n\nexport interface SearchQueryPlayQueue extends SearchQuery {\n\tuserID?: string;\n}\n\nexport class PlayQueueStore extends BaseStore<PlayQueue, SearchQueryPlayQueue> {\n\n\tconstructor(db: Database) {\n\t\tsuper(DBObjectType.playqueue, db);\n\t}\n\n\tprotected transformQuery(query: SearchQueryPlayQueue): DatabaseQuery {\n\t\tconst q = new QueryHelper();\n\t\tq.term('userID', query.userID);\n\t\treturn q.get(query);\n\t}\n\n}\n","import {Database, DatabaseQuery} from '../../db/db.model';\nimport {DBObjectType} from '../../db/db.types';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {QueryHelper} from '../base/base.query.helper';\nimport {BaseStore, SearchQuery, SearchQuerySort} from '../base/base.store';\nimport {Podcast} from './podcast.model';\n\nexport interface SearchQueryPodcast extends SearchQuery {\n\turl?: string;\n\ttitle?: string;\n\tstatus?: string;\n\tnewerThan?: number;\n\tsorts?: Array<SearchQuerySort<JamParameters.PodcastSortField>>;\n}\n\nconst fieldMap: { [name in JamParameters.PodcastSortField]: string } = {\n\ttitle: 'tag.title',\n\tcreated: 'created'\n};\n\nexport class PodcastStore extends BaseStore<Podcast, SearchQueryPodcast> {\n\n\tconstructor(db: Database) {\n\t\tsuper(DBObjectType.podcast, db);\n\t}\n\n\tprotected transformQuery(query: SearchQueryPodcast): DatabaseQuery {\n\t\tconst q = new QueryHelper();\n\t\tq.term('url', query.url);\n\t\tq.term('tag.title', query.title);\n\t\tq.term('status', query.status);\n\t\tq.range('created', undefined, query.newerThan);\n\t\tq.match('tag.title', query.query);\n\t\treturn q.get(query, fieldMap);\n\t}\n\n}\n","import {Database, DatabaseQuery} from '../../db/db.model';\nimport {DBObjectType} from '../../db/db.types';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {QueryHelper} from '../base/base.query.helper';\nimport {BaseStore, SearchQuery, SearchQuerySort} from '../base/base.store';\nimport {Radio} from './radio.model';\n\nexport interface SearchQueryRadio extends SearchQuery {\n\tname?: string;\n\turl?: string;\n\thomepage?: string;\n\tsorts?: Array<SearchQuerySort<JamParameters.RadioSortField>>;\n}\n\nconst fieldMap: { [name in JamParameters.RadioSortField]: string } = {\n\tname: 'name',\n\tcreated: 'created'\n};\n\nexport class RadioStore extends BaseStore<Radio, SearchQueryRadio> {\n\n\tconstructor(db: Database) {\n\t\tsuper(DBObjectType.radio, db);\n\t}\n\n\tprotected transformQuery(query: SearchQueryRadio): DatabaseQuery {\n\t\tconst q = new QueryHelper();\n\t\tq.term('url', query.url);\n\t\tq.term('homepage', query.homepage);\n\t\tq.term('name', query.name);\n\t\tq.match('name', query.query);\n\t\treturn q.get(query, fieldMap);\n\t}\n}\n","import {Database, DatabaseQuery} from '../../db/db.model';\nimport {DBObjectType} from '../../db/db.types';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {QueryHelper} from '../base/base.query.helper';\nimport {BaseStore, SearchQuery, SearchQuerySort} from '../base/base.store';\nimport {Root} from './root.model';\n\nexport interface SearchQueryRoot extends SearchQuery {\n\tname?: string;\n\tpath?: string;\n\tsorts?: Array<SearchQuerySort<JamParameters.RootSortField>>;\n}\n\nconst sortFieldMap: { [key in JamParameters.RootSortField]: string } = {\n\tname: 'name',\n\tcreated: 'created'\n};\n\nexport class RootStore extends BaseStore<Root, SearchQueryRoot> {\n\n\tconstructor(db: Database) {\n\t\tsuper(DBObjectType.root, db);\n\t}\n\n\tprotected transformQuery(query: SearchQueryRoot): DatabaseQuery {\n\t\tconst q = new QueryHelper();\n\t\tq.term('name', query.name);\n\t\tq.term('path', query.path);\n\t\tq.match('name', query.query);\n\t\treturn q.get(query, sortFieldMap);\n\t}\n\n}\n","import {Database, DatabaseQuery} from '../../db/db.model';\nimport {DBObjectType} from '../../db/db.types';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {QueryHelper} from '../base/base.query.helper';\nimport {BaseStore, SearchQuery, SearchQuerySort} from '../base/base.store';\nimport {Series} from './series.model';\n\nexport interface SearchQuerySeries extends SearchQuery {\n\tname?: string;\n\trootID?: string;\n\trootIDs?: Array<string>;\n\tartistID?: string;\n\ttrackID?: string;\n\ttrackIDs?: Array<string>;\n\tfolderID?: string;\n\tfolderIDs?: Array<string>;\n\talbumID?: string;\n\talbumIDs?: Array<string>;\n\talbumType?: string;\n\talbumTypes?: Array<string>;\n\tnewerThan?: number;\n\tsorts?: Array<SearchQuerySort<JamParameters.SeriesSortField>>;\n}\n\nconst fieldMap: { [name in JamParameters.SeriesSortField]: string } = {\n\tname: 'name',\n\tcreated: 'created'\n};\n\nexport class SeriesStore extends BaseStore<Series, SearchQuerySeries> {\n\n\tconstructor(db: Database) {\n\t\tsuper(DBObjectType.series, db);\n\t}\n\n\tprotected transformQuery(query: SearchQuerySeries): DatabaseQuery {\n\t\tconst q = new QueryHelper();\n\t\tq.term('rootIDs', query.rootID);\n\t\tq.terms('rootIDs', query.rootIDs);\n\t\tq.term('trackIDs', query.trackID);\n\t\tq.terms('trackIDs', query.trackIDs);\n\t\tq.term('folderIDs', query.folderID);\n\t\tq.terms('folderIDs', query.folderIDs);\n\t\tq.term('albumIDs', query.albumID);\n\t\tq.terms('albumIDs', query.albumIDs);\n\t\tq.term('albumTypes', query.albumType);\n\t\tq.terms('albumTypes', query.albumTypes);\n\t\tq.term('artistID', query.artistID);\n\t\tq.term('name', query.name);\n\t\tq.range('created', undefined, query.newerThan);\n\t\tq.match('name', query.query);\n\t\treturn q.get(query, fieldMap);\n\t}\n\n}\n","import {Database, DatabaseQuery} from '../../db/db.model';\nimport {DBObjectType} from '../../db/db.types';\nimport {QueryHelper} from '../base/base.query.helper';\nimport {BaseStore, SearchQuery} from '../base/base.store';\nimport {Session} from './session.model';\n\nexport interface SearchQuerySession extends SearchQuery {\n\tjwth?: string;\n\tsessionID?: string;\n\tmode?: string;\n\tuserID?: string;\n\tclient?: string;\n}\n\nexport class SessionStore extends BaseStore<Session, SearchQuerySession> {\n\n\tconstructor(db: Database) {\n\t\tsuper(DBObjectType.session, db);\n\t}\n\n\tprotected transformQuery(query: SearchQuerySession): DatabaseQuery {\n\t\tconst q = new QueryHelper();\n\t\tq.term('jwth', query.jwth);\n\t\tq.term('mode', query.mode);\n\t\tq.term('sessionID', query.sessionID);\n\t\tq.term('userID', query.userID);\n\t\tq.term('client', query.client);\n\t\treturn q.get(query);\n\t}\n\n}\n","import {Database, DatabaseQuery} from '../../db/db.model';\nimport {DBObjectType} from '../../db/db.types';\nimport {QueryHelper} from '../base/base.query.helper';\nimport {BaseStore, SearchQuery} from '../base/base.store';\nimport {Settings} from './settings.model';\n\nexport interface SearchQuerySettings extends SearchQuery {\n\tsection?: string;\n}\n\nexport class SettingsStore extends BaseStore<Settings, SearchQuerySettings> {\n\n\tconstructor(db: Database) {\n\t\tsuper(DBObjectType.settings, db);\n\t}\n\n\tprotected transformQuery(query: SearchQuerySettings): DatabaseQuery {\n\t\tconst q = new QueryHelper();\n\t\tq.term('section', query.section);\n\t\treturn q.get(query);\n\t}\n\n}\n","import {Database, DatabaseQuery} from '../../db/db.model';\nimport {DBObjectType} from '../../db/db.types';\nimport {QueryHelper} from '../base/base.query.helper';\nimport {BaseStore, SearchQuery} from '../base/base.store';\nimport {State} from './state.model';\n\nexport interface SearchQueryState extends SearchQuery {\n\tdestID?: string;\n\tdestIDs?: Array<string>;\n\tuserID?: string;\n\ttype?: DBObjectType;\n\tisPlayed?: boolean;\n\tisFaved?: boolean;\n\tminRating?: number;\n\tmaxRating?: number;\n}\n\nexport class StateStore extends BaseStore<State, SearchQueryState> {\n\n\tconstructor(db: Database) {\n\t\tsuper(DBObjectType.state, db);\n\t}\n\n\tprotected transformQuery(query: SearchQueryState): DatabaseQuery {\n\t\tconst q = new QueryHelper();\n\t\tq.term('userID', query.userID);\n\t\tq.term('destID', query.destID);\n\t\tq.terms('destID', query.destIDs);\n\t\tq.term('destType', query.type);\n\t\tq.notNull('faved', query.isFaved);\n\t\tq.range('rated', query.maxRating, query.minRating);\n\t\tq.range('played', undefined, query.isPlayed ? 1 : undefined);\n\t\treturn q.get(query);\n\t}\n\n}\n","import {Database, DatabaseQuery} from '../../db/db.model';\nimport {DBObjectType} from '../../db/db.types';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {ensureTrailingPathSeparator} from '../../utils/fs-utils';\nimport {QueryHelper} from '../base/base.query.helper';\nimport {BaseStore, SearchQuery, SearchQuerySort} from '../base/base.store';\nimport {Track} from './track.model';\n\nexport interface SearchQueryTrack extends SearchQuery {\n\tpath?: string;\n\tinPath?: string;\n\tinPaths?: Array<string>;\n\tartist?: string;\n\tartistID?: string;\n\tartistIDs?: Array<string>;\n\talbumArtistID?: string;\n\talbumArtistIDs?: Array<string>;\n\tparentID?: string;\n\tparentIDs?: Array<string>;\n\tmbTrackID?: string;\n\tmbTrackIDs?: Array<string>;\n\trootID?: string;\n\trootIDs?: Array<string>;\n\ttitle?: string;\n\talbum?: string;\n\talbumID?: string;\n\talbumIDs?: Array<string>;\n\tseriesID?: string;\n\tseriesIDs?: Array<string>;\n\tgenre?: string;\n\tnewerThan?: number;\n\tfromYear?: number;\n\ttoYear?: number;\n\tsorts?: Array<SearchQuerySort<JamParameters.TrackSortField>>;\n}\n\nconst fieldMap: { [name in JamParameters.TrackSortField]: string } = {\n\tartist: 'tag.artist',\n\talbum: 'tag.album',\n\talbumartist: 'tag.albumArtist',\n\tgenre: 'tag.genre',\n\tparent: 'path',\n\ttitle: 'tag.title',\n\tyear: 'tag.year',\n\tcreated: 'stat.created'\n};\n\nexport class TrackStore extends BaseStore<Track, SearchQueryTrack> {\n\tconstructor(db: Database) {\n\t\tsuper(DBObjectType.track, db);\n\t}\n\n\tprotected transformQuery(query: SearchQueryTrack): DatabaseQuery {\n\t\tconst q = new QueryHelper();\n\t\tq.terms('parentID', query.parentIDs);\n\t\tq.term('path', query.path);\n\t\tq.startsWiths('path', query.inPaths ? query.inPaths.map(ensureTrailingPathSeparator) : undefined);\n\t\tq.startsWith('path', query.inPath ? ensureTrailingPathSeparator(query.inPath) : undefined);\n\t\tq.term('tag.genre', query.genre);\n\t\tq.term('rootID', query.rootID);\n\t\tq.terms('rootID', query.rootIDs);\n\t\tq.term('parentID', query.parentID);\n\t\tq.term('tag.mbTrackID', query.mbTrackID);\n\t\tq.terms('tag.mbTrackID', query.mbTrackIDs);\n\t\tq.term('tag.artist', query.artist);\n\t\tq.term('tag.title', query.title);\n\t\tq.match('tag.title', query.query);\n\t\tq.term('tag.album', query.album);\n\t\tq.term('artistID', query.artistID);\n\t\tq.terms('artistID', query.artistIDs);\n\t\tq.term('seriesID', query.seriesID);\n\t\tq.terms('seriesID', query.seriesIDs);\n\t\tq.term('albumArtistID', query.albumArtistID);\n\t\tq.terms('albumArtistID', query.albumArtistIDs);\n\t\tq.term('albumID', query.albumID);\n\t\tq.terms('albumID', query.albumIDs);\n\t\tq.range('tag.year', query.toYear, query.fromYear);\n\t\tq.range('stat.created', undefined, query.newerThan);\n\t\treturn q.get(query, fieldMap);\n\t}\n\n\t// async genres(): Promise<Array<string>> {\n\t// \treturn await this.group.distinct('tag.genre');\n\t// }\n\n}\n","import {Database, DatabaseQuery} from '../../db/db.model';\nimport {DBObjectType} from '../../db/db.types';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {QueryHelper} from '../base/base.query.helper';\nimport {BaseStore, SearchQuery, SearchQuerySort} from '../base/base.store';\nimport {User} from './user.model';\n\nexport interface SearchQueryUser extends SearchQuery {\n\tname?: string;\n\tisAdmin?: boolean;\n\tsorts?: Array<SearchQuerySort<JamParameters.UserSortField>>;\n}\n\nconst fieldMap: { [name in JamParameters.UserSortField]: string } = {\n\tname: 'name',\n\tcreated: 'created'\n};\n\nexport class UserStore extends BaseStore<User, SearchQueryUser> {\n\n\tconstructor(db: Database) {\n\t\tsuper(DBObjectType.user, db);\n\t}\n\n\tprotected transformQuery(query: SearchQueryUser): DatabaseQuery {\n\t\tconst q = new QueryHelper();\n\t\tq.term('name', query.name);\n\t\tq.bool('roles.admin', query.isAdmin);\n\t\tq.match('name', query.query);\n\t\treturn q.get(query, fieldMap);\n\t}\n\n}\n"],"sourceRoot":""}